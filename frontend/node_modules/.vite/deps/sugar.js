import {
  __commonJS
} from "./chunk-AUZ3RYOM.js";

// node_modules/sugar-core/sugar-core.js
var require_sugar_core = __commonJS({
  "node_modules/sugar-core/sugar-core.js"(exports, module) {
    (function() {
      "use strict";
      var Sugar;
      var SUGAR_GLOBAL = "Sugar";
      var NATIVE_NAMES = "Object Number String Array Date RegExp Function";
      var STATIC = 1;
      var INSTANCE = 2;
      var PROPERTY_DESCRIPTOR_SUPPORT = !!(Object.defineProperty && Object.defineProperties);
      var globalContext = getGlobal();
      var allowObjectPrototype = false;
      var namespacesByName = {};
      var namespacesByClassString = {};
      var defineProperty = PROPERTY_DESCRIPTOR_SUPPORT ? Object.defineProperty : definePropertyShim;
      var DefaultChainable = getNewChainableClass("Chainable");
      function getGlobal() {
        return testGlobal(typeof global !== "undefined" && global) || testGlobal(typeof window !== "undefined" && window);
      }
      function testGlobal(obj) {
        return obj && obj.Object === Object ? obj : null;
      }
      function setupGlobal() {
        Sugar = globalContext[SUGAR_GLOBAL];
        if (Sugar) {
          return;
        }
        Sugar = function(arg) {
          forEachProperty(Sugar, function(sugarNamespace, name) {
            if (hasOwn(namespacesByName, name)) {
              sugarNamespace.extend(arg);
            }
          });
          return Sugar;
        };
        if (typeof module !== "undefined" && module.exports) {
          module.exports = Sugar;
        } else {
          try {
            globalContext[SUGAR_GLOBAL] = Sugar;
          } catch (e) {
          }
        }
        forEachProperty(NATIVE_NAMES.split(" "), function(name) {
          createNamespace(name);
        });
        setGlobalProperties();
      }
      function createNamespace(name) {
        var isObject = name === "Object";
        var sugarNamespace = getNewChainableClass(name, true);
        var extend = function(opts) {
          var nativeClass = globalContext[name], nativeProto = nativeClass.prototype;
          var staticMethods = {}, instanceMethods = {}, methodsByName;
          function objectRestricted(name2, target) {
            return isObject && target === nativeProto && (!allowObjectPrototype || name2 === "get" || name2 === "set");
          }
          function arrayOptionExists(field, val) {
            var arr = opts[field];
            if (arr) {
              for (var i = 0, el; el = arr[i]; i++) {
                if (el === val) {
                  return true;
                }
              }
            }
            return false;
          }
          function arrayOptionExcludes(field, val) {
            return opts[field] && !arrayOptionExists(field, val);
          }
          function disallowedByFlags(methodName, target, flags) {
            if (!target[methodName] || !flags) {
              return false;
            }
            for (var i = 0; i < flags.length; i++) {
              if (opts[flags[i]] === false) {
                return true;
              }
            }
          }
          function namespaceIsExcepted() {
            return arrayOptionExists("except", nativeClass) || arrayOptionExcludes("namespaces", nativeClass);
          }
          function methodIsExcepted(methodName) {
            return arrayOptionExists("except", methodName);
          }
          function canExtend(methodName, method, target) {
            return !objectRestricted(methodName, target) && !disallowedByFlags(methodName, target, method.flags) && !methodIsExcepted(methodName);
          }
          opts = opts || {};
          methodsByName = opts.methods;
          if (namespaceIsExcepted()) {
            return;
          } else if (isObject && typeof opts.objectPrototype === "boolean") {
            allowObjectPrototype = opts.objectPrototype;
          }
          forEachProperty(methodsByName || sugarNamespace, function(method, methodName) {
            if (methodsByName) {
              methodName = method;
              method = sugarNamespace[methodName];
            }
            if (hasOwn(method, "instance") && canExtend(methodName, method, nativeProto)) {
              instanceMethods[methodName] = method.instance;
            }
            if (hasOwn(method, "static") && canExtend(methodName, method, nativeClass)) {
              staticMethods[methodName] = method;
            }
          });
          extendNative(nativeClass, staticMethods);
          extendNative(nativeProto, instanceMethods);
          if (!methodsByName) {
            setProperty(sugarNamespace, "active", true);
          }
          return sugarNamespace;
        };
        function defineWithOptionCollect(methodName, instance, args) {
          setProperty(sugarNamespace, methodName, function(arg1, arg2, arg3) {
            var opts = collectDefineOptions(arg1, arg2, arg3);
            defineMethods(sugarNamespace, opts.methods, instance, args, opts.last);
            return sugarNamespace;
          });
        }
        defineWithOptionCollect("defineStatic", STATIC);
        defineWithOptionCollect("defineInstance", INSTANCE);
        defineWithOptionCollect("defineInstanceAndStatic", INSTANCE | STATIC);
        defineWithOptionCollect("defineStaticWithArguments", STATIC, true);
        defineWithOptionCollect("defineInstanceWithArguments", INSTANCE, true);
        setProperty(sugarNamespace, "defineStaticPolyfill", function(arg1, arg2, arg3) {
          var opts = collectDefineOptions(arg1, arg2, arg3);
          extendNative(globalContext[name], opts.methods, true, opts.last);
          return sugarNamespace;
        });
        setProperty(sugarNamespace, "defineInstancePolyfill", function(arg1, arg2, arg3) {
          var opts = collectDefineOptions(arg1, arg2, arg3);
          extendNative(globalContext[name].prototype, opts.methods, true, opts.last);
          forEachProperty(opts.methods, function(fn, methodName) {
            defineChainableMethod(sugarNamespace, methodName, fn);
          });
          return sugarNamespace;
        });
        setProperty(sugarNamespace, "alias", function(name2, source) {
          var method = typeof source === "string" ? sugarNamespace[source] : source;
          setMethod(sugarNamespace, name2, method);
          return sugarNamespace;
        });
        setProperty(sugarNamespace, "extend", extend);
        namespacesByName[name] = sugarNamespace;
        namespacesByClassString["[object " + name + "]"] = sugarNamespace;
        mapNativeToChainable(name);
        mapObjectChainablesToNamespace(sugarNamespace);
        return Sugar[name] = sugarNamespace;
      }
      function setGlobalProperties() {
        setProperty(Sugar, "VERSION", "2.0.6");
        setProperty(Sugar, "extend", Sugar);
        setProperty(Sugar, "toString", toString);
        setProperty(Sugar, "createNamespace", createNamespace);
        setProperty(Sugar, "util", {
          "hasOwn": hasOwn,
          "getOwn": getOwn,
          "setProperty": setProperty,
          "classToString": classToString,
          "defineProperty": defineProperty,
          "forEachProperty": forEachProperty,
          "mapNativeToChainable": mapNativeToChainable
        });
      }
      function toString() {
        return SUGAR_GLOBAL;
      }
      function defineMethods(sugarNamespace, methods, type, args, flags) {
        forEachProperty(methods, function(method, methodName) {
          var instanceMethod, staticMethod = method;
          if (args) {
            staticMethod = wrapMethodWithArguments(method);
          }
          if (flags) {
            staticMethod.flags = flags;
          }
          if (type & INSTANCE && !method.instance) {
            instanceMethod = wrapInstanceMethod(method, args);
            setProperty(staticMethod, "instance", instanceMethod);
          }
          if (type & STATIC) {
            setProperty(staticMethod, "static", true);
          }
          setMethod(sugarNamespace, methodName, staticMethod);
          if (sugarNamespace.active) {
            sugarNamespace.extend(methodName);
          }
        });
      }
      function collectDefineOptions(arg1, arg2, arg3) {
        var methods, last;
        if (typeof arg1 === "string") {
          methods = {};
          methods[arg1] = arg2;
          last = arg3;
        } else {
          methods = arg1;
          last = arg2;
        }
        return {
          last,
          methods
        };
      }
      function wrapInstanceMethod(fn, args) {
        return args ? wrapMethodWithArguments(fn, true) : wrapInstanceMethodFixed(fn);
      }
      function wrapMethodWithArguments(fn, instance) {
        var startCollect = fn.length - 1 - (instance ? 1 : 0);
        return function() {
          var args = [], collectedArgs = [], len;
          if (instance) {
            args.push(this);
          }
          len = Math.max(arguments.length, startCollect);
          for (var i = 0; i < len; i++) {
            if (i < startCollect) {
              args.push(arguments[i]);
            } else {
              collectedArgs.push(arguments[i]);
            }
          }
          args.push(collectedArgs);
          return fn.apply(this, args);
        };
      }
      function wrapInstanceMethodFixed(fn) {
        switch (fn.length) {
          case 0:
          case 1:
            return function() {
              return fn(this);
            };
          case 2:
            return function(a) {
              return fn(this, a);
            };
          case 3:
            return function(a, b) {
              return fn(this, a, b);
            };
          case 4:
            return function(a, b, c) {
              return fn(this, a, b, c);
            };
          case 5:
            return function(a, b, c, d) {
              return fn(this, a, b, c, d);
            };
        }
      }
      function extendNative(target, source, polyfill, override) {
        forEachProperty(source, function(method, name) {
          if (polyfill && !override && target[name]) {
            return;
          }
          setProperty(target, name, method);
        });
      }
      function setMethod(sugarNamespace, methodName, method) {
        sugarNamespace[methodName] = method;
        if (method.instance) {
          defineChainableMethod(sugarNamespace, methodName, method.instance, true);
        }
      }
      function getNewChainableClass(name) {
        var fn = function SugarChainable(obj, arg) {
          if (!(this instanceof fn)) {
            return new fn(obj, arg);
          }
          if (this.constructor !== fn) {
            obj = this.constructor.apply(obj, arguments);
          }
          this.raw = obj;
        };
        setProperty(fn, "toString", function() {
          return SUGAR_GLOBAL + name;
        });
        setProperty(fn.prototype, "valueOf", function() {
          return this.raw;
        });
        return fn;
      }
      function defineChainableMethod(sugarNamespace, methodName, fn) {
        var wrapped = wrapWithChainableResult(fn), existing, collision, dcp;
        dcp = DefaultChainable.prototype;
        existing = dcp[methodName];
        collision = existing && existing !== Object.prototype[methodName];
        if (!existing || !existing.disambiguate) {
          dcp[methodName] = collision ? disambiguateMethod(methodName) : wrapped;
        }
        sugarNamespace.prototype[methodName] = wrapped;
        if (sugarNamespace === Sugar.Object) {
          mapObjectChainableToAllNamespaces(methodName, wrapped);
        }
      }
      function mapObjectChainablesToNamespace(sugarNamespace) {
        forEachProperty(Sugar.Object && Sugar.Object.prototype, function(val, methodName) {
          if (typeof val === "function") {
            setObjectChainableOnNamespace(sugarNamespace, methodName, val);
          }
        });
      }
      function mapObjectChainableToAllNamespaces(methodName, fn) {
        forEachProperty(namespacesByName, function(sugarNamespace) {
          setObjectChainableOnNamespace(sugarNamespace, methodName, fn);
        });
      }
      function setObjectChainableOnNamespace(sugarNamespace, methodName, fn) {
        var proto = sugarNamespace.prototype;
        if (!hasOwn(proto, methodName)) {
          proto[methodName] = fn;
        }
      }
      function wrapWithChainableResult(fn) {
        return function() {
          return new DefaultChainable(fn.apply(this.raw, arguments));
        };
      }
      function disambiguateMethod(methodName) {
        var fn = function() {
          var raw = this.raw, sugarNamespace;
          if (raw != null) {
            sugarNamespace = namespacesByClassString[classToString(raw)];
          }
          if (!sugarNamespace) {
            sugarNamespace = Sugar.Object;
          }
          return new sugarNamespace(raw)[methodName].apply(this, arguments);
        };
        fn.disambiguate = true;
        return fn;
      }
      function mapNativeToChainable(name, methodNames) {
        var sugarNamespace = namespacesByName[name], nativeProto = globalContext[name].prototype;
        if (!methodNames && ownPropertyNames) {
          methodNames = ownPropertyNames(nativeProto);
        }
        forEachProperty(methodNames, function(methodName) {
          if (nativeMethodProhibited(methodName)) {
            return;
          }
          try {
            var fn = nativeProto[methodName];
            if (typeof fn !== "function") {
              return;
            }
          } catch (e) {
            return;
          }
          defineChainableMethod(sugarNamespace, methodName, fn);
        });
      }
      function nativeMethodProhibited(methodName) {
        return methodName === "constructor" || methodName === "valueOf" || methodName === "__proto__";
      }
      var ownPropertyNames = Object.getOwnPropertyNames, internalToString = Object.prototype.toString, internalHasOwnProperty = Object.prototype.hasOwnProperty;
      var forEachProperty = function(obj, fn) {
        for (var key in obj) {
          if (!hasOwn(obj, key))
            continue;
          if (fn.call(obj, obj[key], key, obj) === false)
            break;
        }
      };
      function definePropertyShim(obj, prop, descriptor) {
        obj[prop] = descriptor.value;
      }
      function setProperty(target, name, value, enumerable) {
        defineProperty(target, name, {
          value,
          enumerable: !!enumerable,
          configurable: true,
          writable: true
        });
      }
      function classToString(obj) {
        return internalToString.call(obj);
      }
      function hasOwn(obj, prop) {
        return !!obj && internalHasOwnProperty.call(obj, prop);
      }
      function getOwn(obj, prop) {
        if (hasOwn(obj, prop)) {
          return obj[prop];
        }
      }
      setupGlobal();
      var ENHANCEMENTS_FLAG = "enhance";
      var NATIVE_TYPES = "Boolean Number String Date RegExp Function Array Error Set Map";
      var NO_KEYS_IN_STRING_OBJECTS = !("0" in Object("a"));
      var PRIVATE_PROP_PREFIX = "_sugar_";
      var PROPERTY_RANGE_REG = /^(.*?)\[([-\d]*)\.\.([-\d]*)\](.*)$/;
      var TRIM_CHARS = "	\n\v\f\r   ᠎             \u2028\u2029　\uFEFF";
      var STRING_FORMAT_REG = /([{}])\1|{([^}]*)}|(%)%|(%(\w*))/g;
      var HALF_WIDTH_ZERO = 48, FULL_WIDTH_ZERO = 65296, HALF_WIDTH_PERIOD = ".", FULL_WIDTH_PERIOD = "．", HALF_WIDTH_COMMA = ",", OPEN_BRACE = "{", CLOSE_BRACE = "}";
      var sugarObject = Sugar.Object, sugarArray = Sugar.Array, sugarDate = Sugar.Date, sugarString = Sugar.String, sugarNumber = Sugar.Number, sugarFunction = Sugar.Function, sugarRegExp = Sugar.RegExp;
      var isSerializable, isBoolean, isNumber, isString, isDate, isRegExp, isFunction, isArray, isSet, isMap, isError;
      function buildClassChecks() {
        var knownTypes = {};
        function addCoreTypes() {
          var names = spaceSplit(NATIVE_TYPES);
          isBoolean = buildPrimitiveClassCheck(names[0]);
          isNumber = buildPrimitiveClassCheck(names[1]);
          isString = buildPrimitiveClassCheck(names[2]);
          isDate = buildClassCheck(names[3]);
          isRegExp = buildClassCheck(names[4]);
          isFunction = buildClassCheck(names[5]);
          isArray = Array.isArray || buildClassCheck(names[6]);
          isError = buildClassCheck(names[7]);
          isSet = buildClassCheck(names[8], typeof Set !== "undefined" && Set);
          isMap = buildClassCheck(names[9], typeof Map !== "undefined" && Map);
          addKnownType("Arguments");
          addKnownType(names[0]);
          addKnownType(names[1]);
          addKnownType(names[2]);
          addKnownType(names[3]);
          addKnownType(names[4]);
          addKnownType(names[6]);
        }
        function addArrayTypes() {
          var types = "Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64";
          forEach(spaceSplit(types), function(str) {
            addKnownType(str + "Array");
          });
        }
        function addKnownType(className) {
          var str = "[object " + className + "]";
          knownTypes[str] = true;
        }
        function isKnownType(className) {
          return knownTypes[className];
        }
        function buildClassCheck(className, globalObject) {
          if (globalObject && isClass(new globalObject(), "Object")) {
            return getConstructorClassCheck(globalObject);
          } else {
            return getToStringClassCheck(className);
          }
        }
        function getConstructorClassCheck(obj) {
          var ctorStr = String(obj);
          return function(obj2) {
            return String(obj2.constructor) === ctorStr;
          };
        }
        function getToStringClassCheck(className) {
          return function(obj, str) {
            return isClass(obj, className, str);
          };
        }
        function buildPrimitiveClassCheck(className) {
          var type = className.toLowerCase();
          return function(obj) {
            var t = typeof obj;
            return t === type || t === "object" && isClass(obj, className);
          };
        }
        addCoreTypes();
        addArrayTypes();
        isSerializable = function(obj, className) {
          return isKnownType(className) || isPlainObject(obj, className);
        };
      }
      function isClass(obj, className, str) {
        if (!str) {
          str = classToString(obj);
        }
        return str === "[object " + className + "]";
      }
      function wrapNamespace(method) {
        return function(sugarNamespace, arg1, arg2) {
          sugarNamespace[method](arg1, arg2);
        };
      }
      var alias = wrapNamespace("alias"), defineStatic = wrapNamespace("defineStatic"), defineInstance = wrapNamespace("defineInstance"), defineStaticPolyfill = wrapNamespace("defineStaticPolyfill"), defineInstancePolyfill = wrapNamespace("defineInstancePolyfill"), defineInstanceAndStatic = wrapNamespace("defineInstanceAndStatic"), defineInstanceWithArguments = wrapNamespace("defineInstanceWithArguments");
      function defineInstanceSimilar(sugarNamespace, set, fn, flags) {
        defineInstance(sugarNamespace, collectSimilarMethods(set, fn), flags);
      }
      function defineInstanceAndStaticSimilar(sugarNamespace, set, fn, flags) {
        defineInstanceAndStatic(sugarNamespace, collectSimilarMethods(set, fn), flags);
      }
      function collectSimilarMethods(set, fn) {
        var methods = {};
        if (isString(set)) {
          set = spaceSplit(set);
        }
        forEach(set, function(el, i) {
          fn(methods, el, i);
        });
        return methods;
      }
      function fixArgumentLength(fn) {
        var staticFn = function(a) {
          var args = arguments;
          return fn(a, args[1], args[2], args.length - 1);
        };
        staticFn.instance = function(b) {
          var args = arguments;
          return fn(this, b, args[1], args.length);
        };
        return staticFn;
      }
      function defineAccessor(namespace, name, fn) {
        setProperty(namespace, name, fn);
      }
      function defineOptionsAccessor(namespace, defaults) {
        var obj = simpleClone(defaults);
        function getOption(name) {
          return obj[name];
        }
        function setOption(arg1, arg2) {
          var options;
          if (arguments.length === 1) {
            options = arg1;
          } else {
            options = {};
            options[arg1] = arg2;
          }
          forEachProperty(options, function(val, name) {
            if (val === null) {
              val = defaults[name];
            }
            obj[name] = val;
          });
        }
        defineAccessor(namespace, "getOption", getOption);
        defineAccessor(namespace, "setOption", setOption);
        return getOption;
      }
      function defineOnPrototype(ctor, methods) {
        var proto = ctor.prototype;
        forEachProperty(methods, function(val, key) {
          proto[key] = val;
        });
      }
      function assertArgument(exists) {
        if (!exists) {
          throw new TypeError("Argument required");
        }
      }
      function assertCallable(obj) {
        if (!isFunction(obj)) {
          throw new TypeError("Function is not callable");
        }
      }
      function assertArray(obj) {
        if (!isArray(obj)) {
          throw new TypeError("Array required");
        }
      }
      function assertWritable(obj) {
        if (isPrimitive(obj)) {
          throw new TypeError("Property cannot be written");
        }
      }
      function coercePositiveInteger(n) {
        n = +n || 0;
        if (n < 0 || !isNumber(n) || !isFinite(n)) {
          throw new RangeError("Invalid number");
        }
        return trunc(n);
      }
      function isDefined(o) {
        return o !== void 0;
      }
      function isUndefined(o) {
        return o === void 0;
      }
      function privatePropertyAccessor(key) {
        var privateKey = PRIVATE_PROP_PREFIX + key;
        return function(obj, val) {
          if (arguments.length > 1) {
            setProperty(obj, privateKey, val);
            return obj;
          }
          return obj[privateKey];
        };
      }
      function setChainableConstructor(sugarNamespace, createFn) {
        sugarNamespace.prototype.constructor = function() {
          return createFn.apply(this, arguments);
        };
      }
      function getMatcher(f) {
        if (!isPrimitive(f)) {
          var className = classToString(f);
          if (isRegExp(f, className)) {
            return regexMatcher(f);
          } else if (isDate(f, className)) {
            return dateMatcher(f);
          } else if (isFunction(f, className)) {
            return functionMatcher(f);
          } else if (isPlainObject(f, className)) {
            return fuzzyMatcher(f);
          }
        }
        return defaultMatcher(f);
      }
      function fuzzyMatcher(obj) {
        var matchers = {};
        return function(el, i, arr) {
          var matched = true;
          if (!isObjectType(el)) {
            return false;
          }
          forEachProperty(obj, function(val, key) {
            matchers[key] = getOwn(matchers, key) || getMatcher(val);
            if (matchers[key].call(arr, el[key], i, arr) === false) {
              matched = false;
            }
            return matched;
          });
          return matched;
        };
      }
      function defaultMatcher(f) {
        return function(el) {
          return isEqual(el, f);
        };
      }
      function regexMatcher(reg) {
        reg = RegExp(reg);
        return function(el) {
          return reg.test(el);
        };
      }
      function dateMatcher(d) {
        var ms = d.getTime();
        return function(el) {
          return !!(el && el.getTime) && el.getTime() === ms;
        };
      }
      function functionMatcher(fn) {
        return function(el, i, arr) {
          return el === fn || fn.call(arr, el, i, arr);
        };
      }
      function getKeys(obj) {
        return Object.keys(obj);
      }
      function deepHasProperty(obj, key, any) {
        return handleDeepProperty(obj, key, any, true);
      }
      function deepGetProperty(obj, key, any) {
        return handleDeepProperty(obj, key, any, false);
      }
      function deepSetProperty(obj, key, val) {
        handleDeepProperty(obj, key, false, false, true, false, val);
        return obj;
      }
      function handleDeepProperty(obj, key, any, has, fill, fillLast, val) {
        var ns, bs, ps, cbi, set, isLast, isPush, isIndex, nextIsIndex, exists;
        ns = obj;
        if (key == null)
          return;
        if (isObjectType(key)) {
          bs = [key];
        } else {
          key = String(key);
          if (key.indexOf("..") !== -1) {
            return handleArrayIndexRange(obj, key, any, val);
          }
          bs = key.split("[");
        }
        set = isDefined(val);
        for (var i = 0, blen = bs.length; i < blen; i++) {
          ps = bs[i];
          if (isString(ps)) {
            ps = periodSplit(ps);
          }
          for (var j = 0, plen = ps.length; j < plen; j++) {
            key = ps[j];
            isLast = i === blen - 1 && j === plen - 1;
            cbi = key.indexOf("]");
            isIndex = cbi !== -1;
            isPush = set && cbi === 0;
            nextIsIndex = blen > 1 && j === plen - 1;
            if (isPush) {
              key = ns.length;
            } else if (isIndex) {
              key = key.slice(0, -1);
            }
            if (isIndex && key < 0) {
              key = +key + ns.length;
            }
            if (i || key || blen === 1) {
              exists = any ? key in Object(ns) : hasOwn(ns, key);
              if (fill && (!isLast || fillLast) && !exists) {
                ns = ns[key] = nextIsIndex || fillLast && isLast ? [] : {};
                continue;
              }
              if (has) {
                if (isLast || !exists) {
                  return exists;
                }
              } else if (set && isLast) {
                assertWritable(ns);
                ns[key] = val;
              }
              ns = exists ? ns[key] : void 0;
            }
          }
        }
        return ns;
      }
      function handleArrayIndexRange(obj, key, any, val) {
        var match, start, end, leading, trailing, arr, set;
        match = key.match(PROPERTY_RANGE_REG);
        if (!match) {
          return;
        }
        set = isDefined(val);
        leading = match[1];
        if (leading) {
          arr = handleDeepProperty(obj, leading, any, false, set ? true : false, true);
        } else {
          arr = obj;
        }
        assertArray(arr);
        trailing = match[4];
        start = match[2] ? +match[2] : 0;
        end = match[3] ? +match[3] : arr.length;
        end = end === -1 ? arr.length : end + 1;
        if (set) {
          for (var i = start; i < end; i++) {
            handleDeepProperty(arr, i + trailing, any, false, true, false, val);
          }
        } else {
          arr = arr.slice(start, end);
          if (trailing) {
            if (trailing.charAt(0) === HALF_WIDTH_PERIOD) {
              trailing = trailing.slice(1);
            }
            return map(arr, function(el) {
              return handleDeepProperty(el, trailing);
            });
          }
        }
        return arr;
      }
      function getOwnKey(obj, key) {
        if (hasOwn(obj, key)) {
          return key;
        }
      }
      function hasProperty(obj, prop) {
        return !isPrimitive(obj) && prop in obj;
      }
      function isObjectType(obj, type) {
        return !!obj && (type || typeof obj) === "object";
      }
      function isPrimitive(obj, type) {
        type = type || typeof obj;
        return obj == null || type === "string" || type === "number" || type === "boolean";
      }
      function isPlainObject(obj, className) {
        return isObjectType(obj) && isClass(obj, "Object", className) && hasValidPlainObjectPrototype(obj) && hasOwnEnumeratedProperties(obj);
      }
      function hasValidPlainObjectPrototype(obj) {
        var hasToString = "toString" in obj;
        var hasConstructor = "constructor" in obj;
        return !hasConstructor && !hasToString || hasConstructor && !hasOwn(obj, "constructor") && hasOwn(obj.constructor.prototype, "isPrototypeOf");
      }
      function hasOwnEnumeratedProperties(obj) {
        var objectProto = Object.prototype;
        for (var key in obj) {
          var val = obj[key];
          if (!hasOwn(obj, key) && val !== objectProto[key]) {
            return false;
          }
        }
        return true;
      }
      function simpleRepeat(n, fn) {
        for (var i = 0; i < n; i++) {
          fn(i);
        }
      }
      function simpleClone(obj) {
        return simpleMerge({}, obj);
      }
      function simpleMerge(target, source) {
        forEachProperty(source, function(val, key) {
          target[key] = val;
        });
        return target;
      }
      function coercePrimitiveToObject(obj) {
        if (isPrimitive(obj)) {
          obj = Object(obj);
        }
        if (NO_KEYS_IN_STRING_OBJECTS && isString(obj)) {
          forceStringCoercion(obj);
        }
        return obj;
      }
      function forceStringCoercion(obj) {
        var i = 0, chr2;
        while (chr2 = obj.charAt(i)) {
          obj[i++] = chr2;
        }
      }
      function isEqual(a, b, stack) {
        var aClass, bClass;
        if (a === b) {
          return a !== 0 || 1 / a === 1 / b;
        }
        aClass = classToString(a);
        bClass = classToString(b);
        if (aClass !== bClass) {
          return false;
        }
        if (isSerializable(a, aClass) && isSerializable(b, bClass)) {
          return objectIsEqual(a, b, aClass, stack);
        } else if (isSet(a, aClass) && isSet(b, bClass)) {
          return a.size === b.size && isEqual(setToArray(a), setToArray(b), stack);
        } else if (isMap(a, aClass) && isMap(b, bClass)) {
          return a.size === b.size && isEqual(mapToArray(a), mapToArray(b), stack);
        } else if (isError(a, aClass) && isError(b, bClass)) {
          return a.toString() === b.toString();
        }
        return false;
      }
      function objectIsEqual(a, b, aClass, stack) {
        var aType = typeof a, bType = typeof b, propsEqual, count;
        if (aType !== bType) {
          return false;
        }
        if (isObjectType(a.valueOf())) {
          if (a.length !== b.length) {
            return false;
          }
          count = 0;
          propsEqual = true;
          iterateWithCyclicCheck(a, false, stack, function(key, val, cyc, stack2) {
            if (!cyc && (!(key in b) || !isEqual(val, b[key], stack2))) {
              propsEqual = false;
            }
            count++;
            return propsEqual;
          });
          if (!propsEqual || count !== getKeys(b).length) {
            return false;
          }
        }
        return a.valueOf().toString() === b.valueOf().toString();
      }
      function serializeInternal(obj, refs, stack) {
        var type = typeof obj, sign = "", className, value, ref;
        if (1 / obj === -Infinity) {
          sign = "-";
        }
        if (isPrimitive(obj, type) && !isRealNaN(obj)) {
          return type + sign + obj;
        }
        className = classToString(obj);
        if (!isSerializable(obj, className)) {
          ref = indexOf(refs, obj);
          if (ref === -1) {
            ref = refs.length;
            refs.push(obj);
          }
          return ref;
        } else if (isObjectType(obj)) {
          value = serializeDeep(obj, refs, stack) + obj.toString();
        } else if (obj.valueOf) {
          value = obj.valueOf();
        }
        return type + className + sign + value;
      }
      function serializeDeep(obj, refs, stack) {
        var result = "";
        iterateWithCyclicCheck(obj, true, stack, function(key, val, cyc, stack2) {
          result += cyc ? "CYC" : key + serializeInternal(val, refs, stack2);
        });
        return result;
      }
      function iterateWithCyclicCheck(obj, sortedKeys, stack, fn) {
        function next(val, key) {
          var cyc = false;
          if (stack.length > 1) {
            var i = stack.length;
            while (i--) {
              if (stack[i] === val) {
                cyc = true;
              }
            }
          }
          stack.push(val);
          fn(key, val, cyc, stack);
          stack.pop();
        }
        function iterateWithSortedKeys() {
          var arr = getKeys(obj).sort(), key;
          for (var i = 0; i < arr.length; i++) {
            key = arr[i];
            next(obj[key], arr[i]);
          }
        }
        if (!stack) {
          stack = [];
        }
        if (sortedKeys) {
          iterateWithSortedKeys();
        } else {
          forEachProperty(obj, next);
        }
      }
      function isArrayIndex(n) {
        return n >>> 0 == n && n != 4294967295;
      }
      function iterateOverSparseArray(arr, fn, fromIndex, loop) {
        var indexes = getSparseArrayIndexes(arr, fromIndex, loop), index;
        for (var i = 0, len = indexes.length; i < len; i++) {
          index = indexes[i];
          fn.call(arr, arr[index], index, arr);
        }
        return arr;
      }
      function getSparseArrayIndexes(arr, fromIndex, loop, fromRight) {
        var indexes = [], i;
        for (i in arr) {
          if (isArrayIndex(i) && (loop || (fromRight ? i <= fromIndex : i >= fromIndex))) {
            indexes.push(+i);
          }
        }
        indexes.sort(function(a, b) {
          var aLoop = a > fromIndex;
          var bLoop = b > fromIndex;
          if (aLoop !== bLoop) {
            return aLoop ? -1 : 1;
          }
          return a - b;
        });
        return indexes;
      }
      function getEntriesForIndexes(obj, find, loop, isString2) {
        var result, length = obj.length;
        if (!isArray(find)) {
          return entryAtIndex(obj, find, length, loop, isString2);
        }
        result = new Array(find.length);
        forEach(find, function(index, i) {
          result[i] = entryAtIndex(obj, index, length, loop, isString2);
        });
        return result;
      }
      function getNormalizedIndex(index, length, loop) {
        if (index && loop) {
          index = index % length;
        }
        if (index < 0)
          index = length + index;
        return index;
      }
      function entryAtIndex(obj, index, length, loop, isString2) {
        index = getNormalizedIndex(index, length, loop);
        return isString2 ? obj.charAt(index) : obj[index];
      }
      function mapWithShortcuts(el, f, context, mapArgs) {
        if (!f) {
          return el;
        } else if (f.apply) {
          return f.apply(context, mapArgs);
        } else if (isArray(f)) {
          return map(f, function(m) {
            return mapWithShortcuts(el, m, context, mapArgs);
          });
        } else if (isFunction(el[f])) {
          return el[f].call(el);
        } else {
          return deepGetProperty(el, f, true);
        }
      }
      function spaceSplit(str) {
        return str.split(" ");
      }
      function commaSplit(str) {
        return str.split(HALF_WIDTH_COMMA);
      }
      function periodSplit(str) {
        return str.split(HALF_WIDTH_PERIOD);
      }
      function forEach(arr, fn) {
        for (var i = 0, len = arr.length; i < len; i++) {
          if (!(i in arr)) {
            return iterateOverSparseArray(arr, fn, i);
          }
          fn(arr[i], i);
        }
      }
      function filter(arr, fn) {
        var result = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          var el = arr[i];
          if (i in arr && fn(el, i)) {
            result.push(el);
          }
        }
        return result;
      }
      function map(arr, fn) {
        var result = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          if (i in arr) {
            result.push(fn(arr[i], i));
          }
        }
        return result;
      }
      function indexOf(arr, el) {
        for (var i = 0, len = arr.length; i < len; i++) {
          if (i in arr && arr[i] === el)
            return i;
        }
        return -1;
      }
      var trunc = Math.trunc || function(n) {
        if (n === 0 || !isFinite(n))
          return n;
        return n < 0 ? ceil(n) : floor(n);
      };
      function isRealNaN(obj) {
        return obj != null && obj !== obj;
      }
      function withPrecision(val, precision, fn) {
        var multiplier = pow(10, abs(precision || 0));
        fn = fn || round;
        if (precision < 0)
          multiplier = 1 / multiplier;
        return fn(val * multiplier) / multiplier;
      }
      function padNumber(num, place, sign, base, replacement) {
        var str = abs(num).toString(base || 10);
        str = repeatString(replacement || "0", place - str.replace(/\.\d+/, "").length) + str;
        if (sign || num < 0) {
          str = (num < 0 ? "-" : "+") + str;
        }
        return str;
      }
      function getOrdinalSuffix(num) {
        if (num >= 11 && num <= 13) {
          return "th";
        } else {
          switch (num % 10) {
            case 1:
              return "st";
            case 2:
              return "nd";
            case 3:
              return "rd";
            default:
              return "th";
          }
        }
      }
      var fullWidthNumberReg, fullWidthNumberMap, fullWidthNumbers;
      function buildFullWidthNumber() {
        var fwp = FULL_WIDTH_PERIOD, hwp = HALF_WIDTH_PERIOD, hwc = HALF_WIDTH_COMMA, fwn = "";
        fullWidthNumberMap = {};
        for (var i = 0, digit; i <= 9; i++) {
          digit = chr(i + FULL_WIDTH_ZERO);
          fwn += digit;
          fullWidthNumberMap[digit] = chr(i + HALF_WIDTH_ZERO);
        }
        fullWidthNumberMap[hwc] = "";
        fullWidthNumberMap[fwp] = hwp;
        fullWidthNumberMap[hwp] = hwp;
        fullWidthNumberReg = allCharsReg(fwn + fwp + hwc + hwp);
        fullWidthNumbers = fwn;
      }
      function stringToNumber(str, base) {
        var sanitized, isDecimal;
        sanitized = str.replace(fullWidthNumberReg, function(chr2) {
          var replacement = getOwn(fullWidthNumberMap, chr2);
          if (replacement === HALF_WIDTH_PERIOD) {
            isDecimal = true;
          }
          return replacement;
        });
        return isDecimal ? parseFloat(sanitized) : parseInt(sanitized, base || 10);
      }
      var abs = Math.abs, pow = Math.pow, min = Math.min, max = Math.max, ceil = Math.ceil, floor = Math.floor, round = Math.round;
      var chr = String.fromCharCode;
      function trim(str) {
        return str.trim();
      }
      function repeatString(str, num) {
        var result = "";
        str = str.toString();
        while (num > 0) {
          if (num & 1) {
            result += str;
          }
          if (num >>= 1) {
            str += str;
          }
        }
        return result;
      }
      function simpleCapitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      }
      function createFormatMatcher(bracketMatcher, percentMatcher, precheck) {
        var reg = STRING_FORMAT_REG;
        var compileMemoized = memoizeFunction(compile);
        function getToken(format, match) {
          var get, token, literal, fn;
          var bKey = match[2];
          var pLit = match[3];
          var pKey = match[5];
          if (match[4] && percentMatcher) {
            token = pKey;
            get = percentMatcher;
          } else if (bKey) {
            token = bKey;
            get = bracketMatcher;
          } else if (pLit && percentMatcher) {
            literal = pLit;
          } else {
            literal = match[1] || match[0];
          }
          if (get) {
            assertPassesPrecheck(precheck, bKey, pKey);
            fn = function(obj, opt) {
              return get(obj, token, opt);
            };
          }
          format.push(fn || getLiteral(literal));
        }
        function getSubstring(format, str, start, end) {
          if (end > start) {
            var sub = str.slice(start, end);
            assertNoUnmatched(sub, OPEN_BRACE);
            assertNoUnmatched(sub, CLOSE_BRACE);
            format.push(function() {
              return sub;
            });
          }
        }
        function getLiteral(str) {
          return function() {
            return str;
          };
        }
        function assertPassesPrecheck(precheck2, bt, pt) {
          if (precheck2 && !precheck2(bt, pt)) {
            throw new TypeError("Invalid token " + (bt || pt) + " in format string");
          }
        }
        function assertNoUnmatched(str, chr2) {
          if (str.indexOf(chr2) !== -1) {
            throw new TypeError("Unmatched " + chr2 + " in format string");
          }
        }
        function compile(str) {
          var format = [], lastIndex = 0, match;
          reg.lastIndex = 0;
          while (match = reg.exec(str)) {
            getSubstring(format, str, lastIndex, match.index);
            getToken(format, match);
            lastIndex = reg.lastIndex;
          }
          getSubstring(format, str, lastIndex, str.length);
          return format;
        }
        return function(str, obj, opt) {
          var format = compileMemoized(str), result = "";
          for (var i = 0; i < format.length; i++) {
            result += format[i](obj, opt);
          }
          return result;
        };
      }
      var Inflections = {};
      function getAcronym(str) {
        return Inflections.acronyms && Inflections.acronyms.find(str);
      }
      function getHumanWord(str) {
        return Inflections.human && Inflections.human.find(str);
      }
      function runHumanRules(str) {
        return Inflections.human && Inflections.human.runRules(str) || str;
      }
      function allCharsReg(src) {
        return RegExp("[" + src + "]", "g");
      }
      function getRegExpFlags(reg, add) {
        var flags = "";
        add = add || "";
        function checkFlag(prop, flag) {
          if (prop || add.indexOf(flag) > -1) {
            flags += flag;
          }
        }
        checkFlag(reg.global, "g");
        checkFlag(reg.ignoreCase, "i");
        checkFlag(reg.multiline, "m");
        checkFlag(reg.sticky, "y");
        return flags;
      }
      function escapeRegExp(str) {
        if (!isString(str))
          str = String(str);
        return str.replace(/([\\/'*+?|()[\]{}.^$-])/g, "\\$1");
      }
      var _utc = privatePropertyAccessor("utc");
      function callDateGet(d, method) {
        return d["get" + (_utc(d) ? "UTC" : "") + method]();
      }
      function callDateSet(d, method, value, safe) {
        if (safe && value === callDateGet(d, method, value)) {
          return;
        }
        d["set" + (_utc(d) ? "UTC" : "") + method](value);
      }
      var INTERNAL_MEMOIZE_LIMIT = 1e3;
      function memoizeFunction(fn) {
        var memo = {}, counter = 0;
        return function(key) {
          if (hasOwn(memo, key)) {
            return memo[key];
          }
          if (counter === INTERNAL_MEMOIZE_LIMIT) {
            memo = {};
            counter = 0;
          }
          counter++;
          return memo[key] = fn(key);
        };
      }
      function setToArray(set) {
        var arr = new Array(set.size), i = 0;
        set.forEach(function(val) {
          arr[i++] = val;
        });
        return arr;
      }
      function mapToArray(map2) {
        var arr = new Array(map2.size), i = 0;
        map2.forEach(function(val, key) {
          arr[i++] = [key, val];
        });
        return arr;
      }
      buildClassChecks();
      buildFullWidthNumber();
      var DONT_ENUM_PROPS = [
        "valueOf",
        "toString",
        "constructor",
        "isPrototypeOf",
        "hasOwnProperty",
        "toLocaleString",
        "propertyIsEnumerable"
      ];
      function buildDontEnumFix() {
        if (!{ toString: 1 }.propertyIsEnumerable("toString")) {
          var forEachEnumerableProperty = forEachProperty;
          forEachProperty = function(obj, fn) {
            forEachEnumerableProperty(obj, fn);
            for (var i = 0, key; key = DONT_ENUM_PROPS[i]; i++) {
              if (hasOwn(obj, key)) {
                if (fn.call(obj, obj[key], key, obj) === false)
                  break;
              }
            }
          };
        }
      }
      function buildChainableNativeMethodsFix() {
        if (!Object.getOwnPropertyNames) {
          defineNativeMethodsOnChainable();
        }
      }
      function defineNativeMethodsOnChainable() {
        var nativeTokens = {
          "Function": "apply,call",
          "RegExp": "compile,exec,test",
          "Number": "toExponential,toFixed,toLocaleString,toPrecision",
          "Object": "hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString",
          "Array": "concat,join,pop,push,reverse,shift,slice,sort,splice,toLocaleString,unshift",
          "Date": "getTime,getTimezoneOffset,setTime,toDateString,toGMTString,toLocaleDateString,toLocaleString,toLocaleTimeString,toTimeString,toUTCString",
          "String": "anchor,big,blink,bold,charAt,charCodeAt,concat,fixed,fontcolor,fontsize,indexOf,italics,lastIndexOf,link,localeCompare,match,replace,search,slice,small,split,strike,sub,substr,substring,sup,toLocaleLowerCase,toLocaleUpperCase,toLowerCase,toUpperCase"
        };
        var dateTokens = "FullYear,Month,Date,Hours,Minutes,Seconds,Milliseconds".split(",");
        function addDateTokens(prefix, arr) {
          for (var i = 0; i < dateTokens.length; i++) {
            arr.push(prefix + dateTokens[i]);
          }
        }
        forEachProperty(nativeTokens, function(str, name) {
          var tokens = str.split(",");
          if (name === "Date") {
            addDateTokens("get", tokens);
            addDateTokens("set", tokens);
            addDateTokens("getUTC", tokens);
            addDateTokens("setUTC", tokens);
          }
          tokens.push("toString");
          mapNativeToChainable(name, tokens);
        });
      }
      buildDontEnumFix();
      buildChainableNativeMethodsFix();
      function assertNonNull(obj) {
        if (obj == null) {
          throw new TypeError("Object required");
        }
      }
      defineStaticPolyfill(sugarObject, {
        "keys": function(obj) {
          var keys = [];
          assertNonNull(obj);
          forEachProperty(coercePrimitiveToObject(obj), function(val, key) {
            keys.push(key);
          });
          return keys;
        }
      });
      function arrayIndexOf(arr, search, fromIndex, fromRight) {
        var length = arr.length, defaultFromIndex, index, increment;
        increment = fromRight ? -1 : 1;
        defaultFromIndex = fromRight ? length - 1 : 0;
        fromIndex = trunc(fromIndex);
        if (!fromIndex && fromIndex !== 0) {
          fromIndex = defaultFromIndex;
        }
        if (fromIndex < 0) {
          fromIndex = length + fromIndex;
        }
        if (!fromRight && fromIndex < 0 || fromRight && fromIndex >= length) {
          fromIndex = defaultFromIndex;
        }
        index = fromIndex;
        while (fromRight && index >= 0 || !fromRight && index < length) {
          if (!(index in arr)) {
            return sparseIndexOf(arr, search, fromIndex, fromRight);
          }
          if (isArrayIndex(index) && arr[index] === search) {
            return index;
          }
          index += increment;
        }
        return -1;
      }
      function sparseIndexOf(arr, search, fromIndex, fromRight) {
        var indexes = getSparseArrayIndexes(arr, fromIndex, false, fromRight), index;
        indexes.sort(function(a, b) {
          return fromRight ? b - a : a - b;
        });
        while ((index = indexes.shift()) !== void 0) {
          if (arr[index] === search) {
            return +index;
          }
        }
        return -1;
      }
      function arrayReduce(arr, fn, initialValue, fromRight) {
        var length = arr.length, count = 0, defined = isDefined(initialValue), result, index;
        assertCallable(fn);
        if (length == 0 && !defined) {
          throw new TypeError("Reduce called on empty array with no initial value");
        } else if (defined) {
          result = initialValue;
        } else {
          result = arr[fromRight ? length - 1 : count];
          count++;
        }
        while (count < length) {
          index = fromRight ? length - count - 1 : count;
          if (index in arr) {
            result = fn(result, arr[index], index, arr);
          }
          count++;
        }
        return result;
      }
      defineStaticPolyfill(sugarArray, {
        /***
         *
         * @method isArray(obj)
         * @returns Boolean
         * @polyfill ES5
         * @static
         * @short Returns true if `obj` is an Array.
         *
         * @example
         *
         *   Array.isArray(3)        -> false
         *   Array.isArray(true)     -> false
         *   Array.isArray('wasabi') -> false
         *   Array.isArray([1,2,3])  -> true
         *
         ***/
        "isArray": function(obj) {
          return isArray(obj);
        }
      });
      defineInstancePolyfill(sugarArray, {
        "every": function(fn) {
          var argLen = arguments.length, context = arguments[1];
          var length = this.length, index = 0;
          assertCallable(fn);
          while (index < length) {
            if (index in this && !fn.call(context, this[index], index, this)) {
              return false;
            }
            index++;
          }
          return true;
        },
        "some": function(fn) {
          var argLen = arguments.length, context = arguments[1];
          var length = this.length, index = 0;
          assertCallable(fn);
          while (index < length) {
            if (index in this && fn.call(context, this[index], index, this)) {
              return true;
            }
            index++;
          }
          return false;
        },
        "map": function(fn) {
          var argLen = arguments.length, context = arguments[1];
          var length = this.length, index = 0, result = new Array(length);
          assertCallable(fn);
          while (index < length) {
            if (index in this) {
              result[index] = fn.call(context, this[index], index, this);
            }
            index++;
          }
          return result;
        },
        "filter": function(fn) {
          var argLen = arguments.length, context = arguments[1];
          var length = this.length, index = 0, result = [];
          assertCallable(fn);
          while (index < length) {
            if (index in this && fn.call(context, this[index], index, this)) {
              result.push(this[index]);
            }
            index++;
          }
          return result;
        },
        /***
         * @method indexOf(search, [fromIndex] = 0)
         * @returns Number
         * @polyfill ES5
         * @short Searches the array and returns the first index where `search` occurs,
         *        or `-1` if the element is not found.
         * @extra [fromIndex] is the index from which to begin the search. This
         *        method performs a simple strict equality comparison on `search`.
         *        Sugar does not enhance this method to support `enhanced matching`.
         *        For such functionality, use the `findIndex` method instead.
         *
         * @example
         *
         *   [1,2,3].indexOf(3) -> 1
         *   [1,2,3].indexOf(7) -> -1
         *
         ***/
        "indexOf": function(search) {
          var argLen = arguments.length, fromIndex = arguments[1];
          if (isString(this))
            return this.indexOf(search, fromIndex);
          return arrayIndexOf(this, search, fromIndex);
        },
        /***
         * @method lastIndexOf(search, [fromIndex] = array.length - 1)
         * @returns Number
         * @polyfill ES5
         * @short Searches the array from the end and returns the first index where
         *        `search` occurs, or `-1` if the element is not found.
         * @extra [fromIndex] is the index from which to begin the search. This method
         *        performs a simple strict equality comparison on `search`.
         *        Sugar does not enhance this method to support `enhanced matching`.
         *
         * @example
         *
         *   [1,2,1].lastIndexOf(1) -> 2
         *   [1,2,1].lastIndexOf(7) -> -1
         *
         ***/
        "lastIndexOf": function(search) {
          var argLen = arguments.length, fromIndex = arguments[1];
          if (isString(this))
            return this.lastIndexOf(search, fromIndex);
          return arrayIndexOf(this, search, fromIndex, true);
        },
        /***
         * @method forEach([eachFn], [context])
         * @polyfill ES5
         * @short Iterates over the array, calling [eachFn] on each loop.
         * @extra [context] becomes the `this` object.
         *
         * @callback eachFn
         *
         *   el   The element of the current iteration.
         *   i    The index of the current iteration.
         *   arr  A reference to the array.
         *
         * @example
         *
         *   ['a','b','c'].forEach(function(a) {
         *     // Called 3 times: 'a','b','c'
         *   });
         *
         ***/
        "forEach": function(eachFn) {
          var argLen = arguments.length, context = arguments[1];
          var length = this.length, index = 0;
          assertCallable(eachFn);
          while (index < length) {
            if (index in this) {
              eachFn.call(context, this[index], index, this);
            }
            index++;
          }
        },
        /***
         * @method reduce(reduceFn, [init])
         * @returns Mixed
         * @polyfill ES5
         * @short Reduces the array to a single result.
         * @extra This operation is sometimes called "accumulation", as it takes the
         *        result of the last iteration of `reduceFn` and passes it as the first
         *        argument to the next iteration, "accumulating" that value as it goes.
         *        The return value of this method will be the return value of the final
         *        iteration of `reduceFn`. If [init] is passed, it will be the initial
         *        "accumulator" (the first argument). If [init] is not passed, then it
         *        will take the first element in the array, and `reduceFn` will not be
         *        called for that element.
         *
         * @callback reduceFn
         *
         *   acc  The "accumulator". Either [init], the result of the last iteration
         *        of `reduceFn`, or the first element of the array.
         *   el   The current element for this iteration.
         *   idx  The current index for this iteration.
         *   arr  A reference to the array.
         *
         * @example
         *
         *   [1,2,3].reduce(function(a, b) {
         *     return a - b; // 1 - 2 - 3
         *   });
         *
         *   [1,2,3].reduce(function(a, b) {
         *     return a - b; // 100 - 1 - 2 - 3
         *   }, 100);
         *
         ***/
        "reduce": function(reduceFn) {
          var argLen = arguments.length, context = arguments[1];
          return arrayReduce(this, reduceFn, context);
        },
        /***
         * @method reduceRight([reduceFn], [init])
         * @returns Mixed
         * @polyfill ES5
         * @short Similar to `Array#reduce`, but operates on the elements in reverse.
         *
         * @callback reduceFn
         *
         *   acc  The "accumulator", either [init], the result of the last iteration
         *        of `reduceFn`, or the last element of the array.
         *   el   The current element for this iteration.
         *   idx  The current index for this iteration.
         *   arr  A reference to the array.
         *
         * @example
         *
         *   [1,2,3].reduceRight(function(a, b) {
         *     return a - b; // 3 - 2 - 1
         *   });
         *
         *   [1,2,3].reduceRight(function(a, b) {
         *     return a - b; // 100 - 3 - 2 - 1
         *   }, 100);
         *
         *
         ***/
        "reduceRight": function(reduceFn) {
          var argLen = arguments.length, context = arguments[1];
          return arrayReduce(this, reduceFn, context, true);
        }
      });
      var TRIM_REG = RegExp("^[" + TRIM_CHARS + "]+|[" + TRIM_CHARS + "]+$", "g");
      defineInstancePolyfill(sugarString, {
        /***
         * @method trim()
         * @returns String
         * @polyfill ES5
         * @short Removes leading and trailing whitespace from the string.
         * @extra Whitespace is defined as line breaks, tabs, and any character in the
         *        "Space, Separator" Unicode category, conforming to the the ES5 spec.
         *
         * @example
         *
         *   '   wasabi   '.trim()      -> 'wasabi'
         *   '   wasabi   '.trimLeft()  -> 'wasabi   '
         *   '   wasabi   '.trimRight() -> '   wasabi'
         *
         ***/
        "trim": function() {
          return this.toString().replace(TRIM_REG, "");
        }
      });
      defineInstancePolyfill(sugarFunction, {
        /***
        * @method bind(context, [arg1], ...)
        * @returns Function
        * @polyfill ES5
        * @short Binds `context` as the `this` object for the function when it is
        *        called. Also allows currying an unlimited number of parameters.
        * @extra "currying" means setting parameters ([arg1], [arg2], etc.) ahead of
        *        time so that they are passed when the function is called later. If
        *        you pass additional parameters when the function is actually called,
        *        they will be added to the end of the curried parameters.
        *
        * @example
        *
        *   logThis.bind('woof')()   -> logs 'woof' as its this object
        *   addArgs.bind(1, 2, 3)()  -> returns 5 with 1 as the this object
        *   addArgs.bind(1)(2, 3, 4) -> returns 9
        *
        ***/
        "bind": function(context) {
          var boundArgs = [];
          for (var $i = 1, $len = arguments.length; $i < $len; $i++)
            boundArgs.push(arguments[$i]);
          var fn = this, bound;
          assertCallable(this);
          bound = function() {
            var args = [];
            for (var $i2 = 0, $len2 = arguments.length; $i2 < $len2; $i2++)
              args.push(arguments[$i2]);
            return fn.apply(fn.prototype && this instanceof fn ? this : context, boundArgs.concat(args));
          };
          bound.prototype = this.prototype;
          return bound;
        }
      });
      defineStaticPolyfill(sugarDate, {
        /***
        * @method now()
        * @returns String
        * @polyfill ES5
        * @static
        * @short Returns the current time as a Unix timestamp.
        * @extra The number of milliseconds since January 1st, 1970 00:00:00 (UTC).
        *
        * @example
        *
        *   Date.now() -> ex. 1311938296231
        *
        ***/
        "now": function() {
          return (/* @__PURE__ */ new Date()).getTime();
        }
      });
      function hasISOSupport() {
        var d = new Date(Date.UTC(2e3, 0));
        return !!d.toISOString && d.toISOString() === "2000-01-01T00:00:00.000Z";
      }
      defineInstancePolyfill(sugarDate, {
        /***
        * @method toISOString()
        * @returns String
        * @polyfill ES5
        * @short Formats the string to ISO8601 format.
        * @extra This will always format as UTC time.
        *
        * @example
        *
        *   Date.create().toISOString() -> ex. 2011-07-05 12:24:55.528Z
        *
        ***/
        "toISOString": function() {
          return padNumber(this.getUTCFullYear(), 4) + "-" + padNumber(this.getUTCMonth() + 1, 2) + "-" + padNumber(this.getUTCDate(), 2) + "T" + padNumber(this.getUTCHours(), 2) + ":" + padNumber(this.getUTCMinutes(), 2) + ":" + padNumber(this.getUTCSeconds(), 2) + "." + padNumber(this.getUTCMilliseconds(), 3) + "Z";
        },
        /***
        * @method toJSON([key])
        * @returns String
        * @polyfill ES5
        * @short Returns a JSON representation of the date.
        * @extra This is effectively an alias for `toISOString`. Will always return
        *        the date in UTC time. [key] is ignored.
        *
        * @example
        *
        *   Date.create().toJSON() -> ex. 2011-07-05 12:24:55.528Z
        *
        ***/
        "toJSON": function(key) {
          var argLen = arguments.length;
          return this.toISOString(key);
        }
      }, !hasISOSupport());
    }).call(exports);
  }
});

// node_modules/sugar/common/internal/isArrayIndex.js
var require_isArrayIndex = __commonJS({
  "node_modules/sugar/common/internal/isArrayIndex.js"(exports, module) {
    "use strict";
    function isArrayIndex(n) {
      return n >>> 0 == n && n != 4294967295;
    }
    module.exports = isArrayIndex;
  }
});

// node_modules/sugar/common/internal/getSparseArrayIndexes.js
var require_getSparseArrayIndexes = __commonJS({
  "node_modules/sugar/common/internal/getSparseArrayIndexes.js"(exports, module) {
    "use strict";
    var isArrayIndex = require_isArrayIndex();
    function getSparseArrayIndexes(arr, fromIndex, loop, fromRight) {
      var indexes = [], i;
      for (i in arr) {
        if (isArrayIndex(i) && (loop || (fromRight ? i <= fromIndex : i >= fromIndex))) {
          indexes.push(+i);
        }
      }
      indexes.sort(function(a, b) {
        var aLoop = a > fromIndex;
        var bLoop = b > fromIndex;
        if (aLoop !== bLoop) {
          return aLoop ? -1 : 1;
        }
        return a - b;
      });
      return indexes;
    }
    module.exports = getSparseArrayIndexes;
  }
});

// node_modules/sugar/common/internal/iterateOverSparseArray.js
var require_iterateOverSparseArray = __commonJS({
  "node_modules/sugar/common/internal/iterateOverSparseArray.js"(exports, module) {
    "use strict";
    var getSparseArrayIndexes = require_getSparseArrayIndexes();
    function iterateOverSparseArray(arr, fn, fromIndex, loop) {
      var indexes = getSparseArrayIndexes(arr, fromIndex, loop), index;
      for (var i = 0, len = indexes.length; i < len; i++) {
        index = indexes[i];
        fn.call(arr, arr[index], index, arr);
      }
      return arr;
    }
    module.exports = iterateOverSparseArray;
  }
});

// node_modules/sugar/common/internal/forEach.js
var require_forEach = __commonJS({
  "node_modules/sugar/common/internal/forEach.js"(exports, module) {
    "use strict";
    var iterateOverSparseArray = require_iterateOverSparseArray();
    function forEach(arr, fn) {
      for (var i = 0, len = arr.length; i < len; i++) {
        if (!(i in arr)) {
          return iterateOverSparseArray(arr, fn, i);
        }
        fn(arr[i], i);
      }
    }
    module.exports = forEach;
  }
});

// node_modules/sugar/common/var/NATIVE_TYPES.js
var require_NATIVE_TYPES = __commonJS({
  "node_modules/sugar/common/var/NATIVE_TYPES.js"(exports, module) {
    "use strict";
    module.exports = "Boolean Number String Date RegExp Function Array Error Set Map";
  }
});

// node_modules/sugar/common/var/coreUtilityAliases.js
var require_coreUtilityAliases = __commonJS({
  "node_modules/sugar/common/var/coreUtilityAliases.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    module.exports = {
      hasOwn: Sugar.util.hasOwn,
      getOwn: Sugar.util.getOwn,
      setProperty: Sugar.util.setProperty,
      classToString: Sugar.util.classToString,
      defineProperty: Sugar.util.defineProperty,
      forEachProperty: Sugar.util.forEachProperty,
      mapNativeToChainable: Sugar.util.mapNativeToChainable
    };
  }
});

// node_modules/sugar/common/internal/isClass.js
var require_isClass = __commonJS({
  "node_modules/sugar/common/internal/isClass.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var classToString = coreUtilityAliases.classToString;
    function isClass(obj, className, str) {
      if (!str) {
        str = classToString(obj);
      }
      return str === "[object " + className + "]";
    }
    module.exports = isClass;
  }
});

// node_modules/sugar/common/internal/spaceSplit.js
var require_spaceSplit = __commonJS({
  "node_modules/sugar/common/internal/spaceSplit.js"(exports, module) {
    "use strict";
    function spaceSplit(str) {
      return str.split(" ");
    }
    module.exports = spaceSplit;
  }
});

// node_modules/sugar/common/internal/isObjectType.js
var require_isObjectType = __commonJS({
  "node_modules/sugar/common/internal/isObjectType.js"(exports, module) {
    "use strict";
    function isObjectType(obj, type) {
      return !!obj && (type || typeof obj) === "object";
    }
    module.exports = isObjectType;
  }
});

// node_modules/sugar/common/internal/hasOwnEnumeratedProperties.js
var require_hasOwnEnumeratedProperties = __commonJS({
  "node_modules/sugar/common/internal/hasOwnEnumeratedProperties.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    function hasOwnEnumeratedProperties(obj) {
      var objectProto = Object.prototype;
      for (var key in obj) {
        var val = obj[key];
        if (!hasOwn(obj, key) && val !== objectProto[key]) {
          return false;
        }
      }
      return true;
    }
    module.exports = hasOwnEnumeratedProperties;
  }
});

// node_modules/sugar/common/internal/hasValidPlainObjectPrototype.js
var require_hasValidPlainObjectPrototype = __commonJS({
  "node_modules/sugar/common/internal/hasValidPlainObjectPrototype.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    function hasValidPlainObjectPrototype(obj) {
      var hasToString = "toString" in obj;
      var hasConstructor = "constructor" in obj;
      return !hasConstructor && !hasToString || hasConstructor && !hasOwn(obj, "constructor") && hasOwn(obj.constructor.prototype, "isPrototypeOf");
    }
    module.exports = hasValidPlainObjectPrototype;
  }
});

// node_modules/sugar/common/internal/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/sugar/common/internal/isPlainObject.js"(exports, module) {
    "use strict";
    var isClass = require_isClass();
    var isObjectType = require_isObjectType();
    var hasOwnEnumeratedProperties = require_hasOwnEnumeratedProperties();
    var hasValidPlainObjectPrototype = require_hasValidPlainObjectPrototype();
    function isPlainObject(obj, className) {
      return isObjectType(obj) && isClass(obj, "Object", className) && hasValidPlainObjectPrototype(obj) && hasOwnEnumeratedProperties(obj);
    }
    module.exports = isPlainObject;
  }
});

// node_modules/sugar/common/var/classChecks.js
var require_classChecks = __commonJS({
  "node_modules/sugar/common/var/classChecks.js"(exports, module) {
    "use strict";
    var NATIVE_TYPES = require_NATIVE_TYPES();
    var forEach = require_forEach();
    var isClass = require_isClass();
    var spaceSplit = require_spaceSplit();
    var isPlainObject = require_isPlainObject();
    var isSerializable;
    var isBoolean;
    var isNumber;
    var isString;
    var isDate;
    var isRegExp;
    var isFunction;
    var isArray;
    var isSet;
    var isMap;
    var isError;
    function buildClassChecks() {
      var knownTypes = {};
      function addCoreTypes() {
        var names = spaceSplit(NATIVE_TYPES);
        isBoolean = buildPrimitiveClassCheck(names[0]);
        isNumber = buildPrimitiveClassCheck(names[1]);
        isString = buildPrimitiveClassCheck(names[2]);
        isDate = buildClassCheck(names[3]);
        isRegExp = buildClassCheck(names[4]);
        isFunction = buildClassCheck(names[5]);
        isArray = Array.isArray || buildClassCheck(names[6]);
        isError = buildClassCheck(names[7]);
        isSet = buildClassCheck(names[8], typeof Set !== "undefined" && Set);
        isMap = buildClassCheck(names[9], typeof Map !== "undefined" && Map);
        addKnownType("Arguments");
        addKnownType(names[0]);
        addKnownType(names[1]);
        addKnownType(names[2]);
        addKnownType(names[3]);
        addKnownType(names[4]);
        addKnownType(names[6]);
      }
      function addArrayTypes() {
        var types = "Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64";
        forEach(spaceSplit(types), function(str) {
          addKnownType(str + "Array");
        });
      }
      function addKnownType(className) {
        var str = "[object " + className + "]";
        knownTypes[str] = true;
      }
      function isKnownType(className) {
        return knownTypes[className];
      }
      function buildClassCheck(className, globalObject) {
        if (globalObject && isClass(new globalObject(), "Object")) {
          return getConstructorClassCheck(globalObject);
        } else {
          return getToStringClassCheck(className);
        }
      }
      function getConstructorClassCheck(obj) {
        var ctorStr = String(obj);
        return function(obj2) {
          return String(obj2.constructor) === ctorStr;
        };
      }
      function getToStringClassCheck(className) {
        return function(obj, str) {
          return isClass(obj, className, str);
        };
      }
      function buildPrimitiveClassCheck(className) {
        var type = className.toLowerCase();
        return function(obj) {
          var t = typeof obj;
          return t === type || t === "object" && isClass(obj, className);
        };
      }
      addCoreTypes();
      addArrayTypes();
      isSerializable = function(obj, className) {
        return isKnownType(className) || isPlainObject(obj, className);
      };
    }
    buildClassChecks();
    module.exports = {
      isSerializable,
      isBoolean,
      isNumber,
      isString,
      isDate,
      isRegExp,
      isFunction,
      isArray,
      isSet,
      isMap,
      isError
    };
  }
});

// node_modules/sugar/common/internal/getNormalizedIndex.js
var require_getNormalizedIndex = __commonJS({
  "node_modules/sugar/common/internal/getNormalizedIndex.js"(exports, module) {
    "use strict";
    function getNormalizedIndex(index, length, loop) {
      if (index && loop) {
        index = index % length;
      }
      if (index < 0)
        index = length + index;
      return index;
    }
    module.exports = getNormalizedIndex;
  }
});

// node_modules/sugar/common/internal/entryAtIndex.js
var require_entryAtIndex = __commonJS({
  "node_modules/sugar/common/internal/entryAtIndex.js"(exports, module) {
    "use strict";
    var getNormalizedIndex = require_getNormalizedIndex();
    function entryAtIndex(obj, index, length, loop, isString) {
      index = getNormalizedIndex(index, length, loop);
      return isString ? obj.charAt(index) : obj[index];
    }
    module.exports = entryAtIndex;
  }
});

// node_modules/sugar/common/internal/getEntriesForIndexes.js
var require_getEntriesForIndexes = __commonJS({
  "node_modules/sugar/common/internal/getEntriesForIndexes.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var classChecks = require_classChecks();
    var entryAtIndex = require_entryAtIndex();
    var isArray = classChecks.isArray;
    function getEntriesForIndexes(obj, find, loop, isString) {
      var result, length = obj.length;
      if (!isArray(find)) {
        return entryAtIndex(obj, find, length, loop, isString);
      }
      result = new Array(find.length);
      forEach(find, function(index, i) {
        result[i] = entryAtIndex(obj, index, length, loop, isString);
      });
      return result;
    }
    module.exports = getEntriesForIndexes;
  }
});

// node_modules/sugar/string/at.js
var require_at = __commonJS({
  "node_modules/sugar/string/at.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getEntriesForIndexes = require_getEntriesForIndexes();
    Sugar.String.defineInstance({
      "at": function(str, index, loop) {
        return getEntriesForIndexes(str, index, loop, true);
      }
    });
    module.exports = Sugar.String.at;
  }
});

// node_modules/sugar/string/var/CAMELIZE_REG.js
var require_CAMELIZE_REG = __commonJS({
  "node_modules/sugar/string/var/CAMELIZE_REG.js"(exports, module) {
    "use strict";
    module.exports = /(^|_)([^_]+)/g;
  }
});

// node_modules/sugar/common/var/Inflections.js
var require_Inflections = __commonJS({
  "node_modules/sugar/common/var/Inflections.js"(exports, module) {
    "use strict";
    module.exports = {};
  }
});

// node_modules/sugar/common/internal/getAcronym.js
var require_getAcronym = __commonJS({
  "node_modules/sugar/common/internal/getAcronym.js"(exports, module) {
    "use strict";
    var Inflections = require_Inflections();
    function getAcronym(str) {
      return Inflections.acronyms && Inflections.acronyms.find(str);
    }
    module.exports = getAcronym;
  }
});

// node_modules/sugar/string/internal/stringUnderscore.js
var require_stringUnderscore = __commonJS({
  "node_modules/sugar/string/internal/stringUnderscore.js"(exports, module) {
    "use strict";
    var Inflections = require_Inflections();
    function stringUnderscore(str) {
      var areg = Inflections.acronyms && Inflections.acronyms.reg;
      if (areg) {
        str = str.replace(areg, function(acronym, index) {
          return (index > 0 ? "_" : "") + acronym.toLowerCase();
        });
      }
      return str.replace(/[-\s]+/g, "_").replace(/([A-Z\d]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").toLowerCase();
    }
    module.exports = stringUnderscore;
  }
});

// node_modules/sugar/string/var/CAPITALIZE_REG.js
var require_CAPITALIZE_REG = __commonJS({
  "node_modules/sugar/string/var/CAPITALIZE_REG.js"(exports, module) {
    "use strict";
    module.exports = /[^\u0000-\u0040\u005B-\u0060\u007B-\u007F]+('s)?/g;
  }
});

// node_modules/sugar/common/internal/simpleCapitalize.js
var require_simpleCapitalize = __commonJS({
  "node_modules/sugar/common/internal/simpleCapitalize.js"(exports, module) {
    "use strict";
    function simpleCapitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    module.exports = simpleCapitalize;
  }
});

// node_modules/sugar/string/internal/stringCapitalize.js
var require_stringCapitalize = __commonJS({
  "node_modules/sugar/string/internal/stringCapitalize.js"(exports, module) {
    "use strict";
    var CAPITALIZE_REG = require_CAPITALIZE_REG();
    var simpleCapitalize = require_simpleCapitalize();
    function stringCapitalize(str, downcase, all) {
      if (downcase) {
        str = str.toLowerCase();
      }
      return all ? str.replace(CAPITALIZE_REG, simpleCapitalize) : simpleCapitalize(str);
    }
    module.exports = stringCapitalize;
  }
});

// node_modules/sugar/string/internal/stringCamelize.js
var require_stringCamelize = __commonJS({
  "node_modules/sugar/string/internal/stringCamelize.js"(exports, module) {
    "use strict";
    var CAMELIZE_REG = require_CAMELIZE_REG();
    var getAcronym = require_getAcronym();
    var stringUnderscore = require_stringUnderscore();
    var stringCapitalize = require_stringCapitalize();
    function stringCamelize(str, upper) {
      str = stringUnderscore(str);
      return str.replace(CAMELIZE_REG, function(match, pre, word, index) {
        var cap = upper !== false || index > 0, acronym;
        acronym = getAcronym(word);
        if (acronym && cap) {
          return acronym;
        }
        return cap ? stringCapitalize(word, true) : word;
      });
    }
    module.exports = stringCamelize;
  }
});

// node_modules/sugar/string/camelize.js
var require_camelize = __commonJS({
  "node_modules/sugar/string/camelize.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringCamelize = require_stringCamelize();
    Sugar.String.defineInstance({
      "camelize": function(str, upper) {
        return stringCamelize(str, upper);
      }
    });
    module.exports = Sugar.String.camelize;
  }
});

// node_modules/sugar/string/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/sugar/string/capitalize.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringCapitalize = require_stringCapitalize();
    Sugar.String.defineInstance({
      "capitalize": function(str, lower, all) {
        return stringCapitalize(str, lower, all);
      }
    });
    module.exports = Sugar.String.capitalize;
  }
});

// node_modules/sugar/common/internal/isDefined.js
var require_isDefined = __commonJS({
  "node_modules/sugar/common/internal/isDefined.js"(exports, module) {
    "use strict";
    function isDefined(o) {
      return o !== void 0;
    }
    module.exports = isDefined;
  }
});

// node_modules/sugar/common/internal/escapeRegExp.js
var require_escapeRegExp = __commonJS({
  "node_modules/sugar/common/internal/escapeRegExp.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isString = classChecks.isString;
    function escapeRegExp(str) {
      if (!isString(str))
        str = String(str);
      return str.replace(/([\\/'*+?|()[\]{}.^$-])/g, "\\$1");
    }
    module.exports = escapeRegExp;
  }
});

// node_modules/sugar/common/internal/getRegExpFlags.js
var require_getRegExpFlags = __commonJS({
  "node_modules/sugar/common/internal/getRegExpFlags.js"(exports, module) {
    "use strict";
    function getRegExpFlags(reg, add) {
      var flags = "";
      add = add || "";
      function checkFlag(prop, flag) {
        if (prop || add.indexOf(flag) > -1) {
          flags += flag;
        }
      }
      checkFlag(reg.global, "g");
      checkFlag(reg.ignoreCase, "i");
      checkFlag(reg.multiline, "m");
      checkFlag(reg.sticky, "y");
      return flags;
    }
    module.exports = getRegExpFlags;
  }
});

// node_modules/sugar/string/internal/runGlobalMatch.js
var require_runGlobalMatch = __commonJS({
  "node_modules/sugar/string/internal/runGlobalMatch.js"(exports, module) {
    "use strict";
    function runGlobalMatch(str, reg) {
      var result = [], match, lastLastIndex;
      while ((match = reg.exec(str)) != null) {
        if (reg.lastIndex === lastLastIndex) {
          reg.lastIndex += 1;
        } else {
          result.push(match[0]);
        }
        lastLastIndex = reg.lastIndex;
      }
      return result;
    }
    module.exports = runGlobalMatch;
  }
});

// node_modules/sugar/string/internal/stringEach.js
var require_stringEach = __commonJS({
  "node_modules/sugar/string/internal/stringEach.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    var classChecks = require_classChecks();
    var escapeRegExp = require_escapeRegExp();
    var getRegExpFlags = require_getRegExpFlags();
    var runGlobalMatch = require_runGlobalMatch();
    var isString = classChecks.isString;
    var isRegExp = classChecks.isRegExp;
    var isFunction = classChecks.isFunction;
    function stringEach(str, search, fn) {
      var chunks, chunk, reg, result = [];
      if (isFunction(search)) {
        fn = search;
        reg = /[\s\S]/g;
      } else if (!search) {
        reg = /[\s\S]/g;
      } else if (isString(search)) {
        reg = RegExp(escapeRegExp(search), "gi");
      } else if (isRegExp(search)) {
        reg = RegExp(search.source, getRegExpFlags(search, "g"));
      }
      chunks = runGlobalMatch(str, reg);
      if (chunks) {
        for (var i = 0, len = chunks.length, r; i < len; i++) {
          chunk = chunks[i];
          result[i] = chunk;
          if (fn) {
            r = fn.call(str, chunk, i, chunks);
            if (r === false) {
              break;
            } else if (isDefined(r)) {
              result[i] = r;
            }
          }
        }
      }
      return result;
    }
    module.exports = stringEach;
  }
});

// node_modules/sugar/string/chars.js
var require_chars = __commonJS({
  "node_modules/sugar/string/chars.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringEach = require_stringEach();
    Sugar.String.defineInstance({
      "chars": function(str, search, eachCharFn) {
        return stringEach(str, search, eachCharFn);
      }
    });
    module.exports = Sugar.String.chars;
  }
});

// node_modules/sugar/string/internal/stringCodes.js
var require_stringCodes = __commonJS({
  "node_modules/sugar/string/internal/stringCodes.js"(exports, module) {
    "use strict";
    function stringCodes(str, fn) {
      var codes = new Array(str.length), i, len;
      for (i = 0, len = str.length; i < len; i++) {
        var code = str.charCodeAt(i);
        codes[i] = code;
        if (fn) {
          fn.call(str, code, i, str);
        }
      }
      return codes;
    }
    module.exports = stringCodes;
  }
});

// node_modules/sugar/string/codes.js
var require_codes = __commonJS({
  "node_modules/sugar/string/codes.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringCodes = require_stringCodes();
    Sugar.String.defineInstance({
      "codes": function(str, eachCodeFn) {
        return stringCodes(str, eachCodeFn);
      }
    });
    module.exports = Sugar.String.codes;
  }
});

// node_modules/sugar/common/internal/trim.js
var require_trim = __commonJS({
  "node_modules/sugar/common/internal/trim.js"(exports, module) {
    "use strict";
    function trim(str) {
      return str.trim();
    }
    module.exports = trim;
  }
});

// node_modules/sugar/string/compact.js
var require_compact = __commonJS({
  "node_modules/sugar/string/compact.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var trim = require_trim();
    Sugar.String.defineInstance({
      "compact": function(str) {
        return trim(str).replace(/([\r\n\s　])+/g, function(match, whitespace) {
          return whitespace === "　" ? whitespace : " ";
        });
      }
    });
    module.exports = Sugar.String.compact;
  }
});

// node_modules/sugar/string/dasherize.js
var require_dasherize = __commonJS({
  "node_modules/sugar/string/dasherize.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringUnderscore = require_stringUnderscore();
    Sugar.String.defineInstance({
      "dasherize": function(str) {
        return stringUnderscore(str).replace(/_/g, "-");
      }
    });
    module.exports = Sugar.String.dasherize;
  }
});

// node_modules/sugar/common/var/chr.js
var require_chr = __commonJS({
  "node_modules/sugar/common/var/chr.js"(exports, module) {
    "use strict";
    module.exports = String.fromCharCode;
  }
});

// node_modules/sugar/string/var/base64.js
var require_base64 = __commonJS({
  "node_modules/sugar/string/var/base64.js"(exports, module) {
    "use strict";
    var chr = require_chr();
    var encodeBase64;
    var decodeBase64;
    function buildBase64() {
      var encodeAscii, decodeAscii;
      function catchEncodingError(fn) {
        return function(str) {
          try {
            return fn(str);
          } catch (e) {
            return "";
          }
        };
      }
      if (typeof Buffer !== "undefined") {
        encodeBase64 = function(str) {
          return Buffer.from(str).toString("base64");
        };
        decodeBase64 = function(str) {
          return Buffer.from(str, "base64").toString("utf8");
        };
        return;
      }
      if (typeof btoa !== "undefined") {
        encodeAscii = catchEncodingError(btoa);
        decodeAscii = catchEncodingError(atob);
      } else {
        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var base64reg = /[^A-Za-z0-9\+\/\=]/g;
        encodeAscii = function(str) {
          var output = "";
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          do {
            chr1 = str.charCodeAt(i++);
            chr2 = str.charCodeAt(i++);
            chr3 = str.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = (chr1 & 3) << 4 | chr2 >> 4;
            enc3 = (chr2 & 15) << 2 | chr3 >> 6;
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
              enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
              enc4 = 64;
            }
            output += key.charAt(enc1);
            output += key.charAt(enc2);
            output += key.charAt(enc3);
            output += key.charAt(enc4);
            chr1 = chr2 = chr3 = "";
            enc1 = enc2 = enc3 = enc4 = "";
          } while (i < str.length);
          return output;
        };
        decodeAscii = function(input) {
          var output = "";
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          if (input.match(base64reg)) {
            return "";
          }
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
          do {
            enc1 = key.indexOf(input.charAt(i++));
            enc2 = key.indexOf(input.charAt(i++));
            enc3 = key.indexOf(input.charAt(i++));
            enc4 = key.indexOf(input.charAt(i++));
            chr1 = enc1 << 2 | enc2 >> 4;
            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
            chr3 = (enc3 & 3) << 6 | enc4;
            output = output + chr(chr1);
            if (enc3 != 64) {
              output = output + chr(chr2);
            }
            if (enc4 != 64) {
              output = output + chr(chr3);
            }
            chr1 = chr2 = chr3 = "";
            enc1 = enc2 = enc3 = enc4 = "";
          } while (i < input.length);
          return output;
        };
      }
      encodeBase64 = function(str) {
        return encodeAscii(unescape(encodeURIComponent(str)));
      };
      decodeBase64 = function(str) {
        return decodeURIComponent(escape(decodeAscii(str)));
      };
    }
    buildBase64();
    module.exports = {
      encodeBase64,
      decodeBase64
    };
  }
});

// node_modules/sugar/string/decodeBase64.js
var require_decodeBase64 = __commonJS({
  "node_modules/sugar/string/decodeBase64.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var base64 = require_base64();
    var decodeBase64 = base64.decodeBase64;
    Sugar.String.defineInstance({
      "decodeBase64": function(str) {
        return decodeBase64(str);
      }
    });
    module.exports = Sugar.String.decodeBase64;
  }
});

// node_modules/sugar/string/encodeBase64.js
var require_encodeBase64 = __commonJS({
  "node_modules/sugar/string/encodeBase64.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var base64 = require_base64();
    var encodeBase64 = base64.encodeBase64;
    Sugar.String.defineInstance({
      "encodeBase64": function(str) {
        return encodeBase64(str);
      }
    });
    module.exports = Sugar.String.encodeBase64;
  }
});

// node_modules/sugar/string/var/HTML_ESCAPE_REG.js
var require_HTML_ESCAPE_REG = __commonJS({
  "node_modules/sugar/string/var/HTML_ESCAPE_REG.js"(exports, module) {
    "use strict";
    module.exports = /[&<>]/g;
  }
});

// node_modules/sugar/string/var/HTMLFromEntityMap.js
var require_HTMLFromEntityMap = __commonJS({
  "node_modules/sugar/string/var/HTMLFromEntityMap.js"(exports, module) {
    "use strict";
    var HTMLFromEntityMap = {
      "lt": "<",
      "gt": ">",
      "amp": "&",
      "nbsp": " ",
      "quot": '"',
      "apos": "'"
    };
    module.exports = HTMLFromEntityMap;
  }
});

// node_modules/sugar/string/var/HTMLToEntityMap.js
var require_HTMLToEntityMap = __commonJS({
  "node_modules/sugar/string/var/HTMLToEntityMap.js"(exports, module) {
    "use strict";
    var HTMLFromEntityMap = require_HTMLFromEntityMap();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    var HTMLToEntityMap;
    function buildEntities() {
      HTMLToEntityMap = {};
      forEachProperty(HTMLFromEntityMap, function(val, key) {
        HTMLToEntityMap[val] = "&" + key + ";";
      });
    }
    buildEntities();
    module.exports = HTMLToEntityMap;
  }
});

// node_modules/sugar/string/escapeHTML.js
var require_escapeHTML = __commonJS({
  "node_modules/sugar/string/escapeHTML.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var HTML_ESCAPE_REG = require_HTML_ESCAPE_REG();
    var HTMLToEntityMap = require_HTMLToEntityMap();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwn = coreUtilityAliases.getOwn;
    Sugar.String.defineInstance({
      "escapeHTML": function(str) {
        return str.replace(HTML_ESCAPE_REG, function(chr) {
          return getOwn(HTMLToEntityMap, chr);
        });
      }
    });
    module.exports = Sugar.String.escapeHTML;
  }
});

// node_modules/sugar/string/escapeURL.js
var require_escapeURL = __commonJS({
  "node_modules/sugar/string/escapeURL.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.String.defineInstance({
      "escapeURL": function(str, param) {
        return param ? encodeURIComponent(str) : encodeURI(str);
      }
    });
    module.exports = Sugar.String.escapeURL;
  }
});

// node_modules/sugar/common/internal/isUndefined.js
var require_isUndefined = __commonJS({
  "node_modules/sugar/common/internal/isUndefined.js"(exports, module) {
    "use strict";
    function isUndefined(o) {
      return o === void 0;
    }
    module.exports = isUndefined;
  }
});

// node_modules/sugar/string/first.js
var require_first = __commonJS({
  "node_modules/sugar/string/first.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    Sugar.String.defineInstance({
      "first": function(str, num) {
        if (isUndefined(num))
          num = 1;
        return str.substr(0, num);
      }
    });
    module.exports = Sugar.String.first;
  }
});

// node_modules/sugar/string/forEach.js
var require_forEach2 = __commonJS({
  "node_modules/sugar/string/forEach.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringEach = require_stringEach();
    Sugar.String.defineInstance({
      "forEach": function(str, search, eachFn) {
        return stringEach(str, search, eachFn);
      }
    });
    module.exports = Sugar.String.forEach;
  }
});

// node_modules/sugar/common/var/PROPERTY_RANGE_REG.js
var require_PROPERTY_RANGE_REG = __commonJS({
  "node_modules/sugar/common/var/PROPERTY_RANGE_REG.js"(exports, module) {
    "use strict";
    module.exports = /^(.*?)\[([-\d]*)\.\.([-\d]*)\](.*)$/;
  }
});

// node_modules/sugar/common/var/CommonChars.js
var require_CommonChars = __commonJS({
  "node_modules/sugar/common/var/CommonChars.js"(exports, module) {
    "use strict";
    module.exports = {
      HALF_WIDTH_ZERO: 48,
      FULL_WIDTH_ZERO: 65296,
      HALF_WIDTH_PERIOD: ".",
      FULL_WIDTH_PERIOD: "．",
      HALF_WIDTH_COMMA: ",",
      OPEN_BRACE: "{",
      CLOSE_BRACE: "}"
    };
  }
});

// node_modules/sugar/common/internal/map.js
var require_map = __commonJS({
  "node_modules/sugar/common/internal/map.js"(exports, module) {
    "use strict";
    function map(arr, fn) {
      var result = [];
      for (var i = 0, len = arr.length; i < len; i++) {
        if (i in arr) {
          result.push(fn(arr[i], i));
        }
      }
      return result;
    }
    module.exports = map;
  }
});

// node_modules/sugar/common/internal/periodSplit.js
var require_periodSplit = __commonJS({
  "node_modules/sugar/common/internal/periodSplit.js"(exports, module) {
    "use strict";
    var CommonChars = require_CommonChars();
    var HALF_WIDTH_PERIOD = CommonChars.HALF_WIDTH_PERIOD;
    function periodSplit(str) {
      return str.split(HALF_WIDTH_PERIOD);
    }
    module.exports = periodSplit;
  }
});

// node_modules/sugar/common/internal/assertArray.js
var require_assertArray = __commonJS({
  "node_modules/sugar/common/internal/assertArray.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isArray = classChecks.isArray;
    function assertArray(obj) {
      if (!isArray(obj)) {
        throw new TypeError("Array required");
      }
    }
    module.exports = assertArray;
  }
});

// node_modules/sugar/common/internal/isPrimitive.js
var require_isPrimitive = __commonJS({
  "node_modules/sugar/common/internal/isPrimitive.js"(exports, module) {
    "use strict";
    function isPrimitive(obj, type) {
      type = type || typeof obj;
      return obj == null || type === "string" || type === "number" || type === "boolean";
    }
    module.exports = isPrimitive;
  }
});

// node_modules/sugar/common/internal/assertWritable.js
var require_assertWritable = __commonJS({
  "node_modules/sugar/common/internal/assertWritable.js"(exports, module) {
    "use strict";
    var isPrimitive = require_isPrimitive();
    function assertWritable(obj) {
      if (isPrimitive(obj)) {
        throw new TypeError("Property cannot be written");
      }
    }
    module.exports = assertWritable;
  }
});

// node_modules/sugar/common/internal/handleDeepProperty.js
var require_handleDeepProperty = __commonJS({
  "node_modules/sugar/common/internal/handleDeepProperty.js"(exports, module) {
    "use strict";
    var PROPERTY_RANGE_REG = require_PROPERTY_RANGE_REG();
    var CommonChars = require_CommonChars();
    var map = require_map();
    var isDefined = require_isDefined();
    var classChecks = require_classChecks();
    var periodSplit = require_periodSplit();
    var assertArray = require_assertArray();
    var isObjectType = require_isObjectType();
    var assertWritable = require_assertWritable();
    var coreUtilityAliases = require_coreUtilityAliases();
    var isString = classChecks.isString;
    var hasOwn = coreUtilityAliases.hasOwn;
    var HALF_WIDTH_PERIOD = CommonChars.HALF_WIDTH_PERIOD;
    function handleDeepProperty(obj, key, any, has, fill, fillLast, val) {
      var ns, bs, ps, cbi, set, isLast, isPush, isIndex, nextIsIndex, exists;
      ns = obj;
      if (key == null)
        return;
      if (isObjectType(key)) {
        bs = [key];
      } else {
        key = String(key);
        if (key.indexOf("..") !== -1) {
          return handleArrayIndexRange(obj, key, any, val);
        }
        bs = key.split("[");
      }
      set = isDefined(val);
      for (var i = 0, blen = bs.length; i < blen; i++) {
        ps = bs[i];
        if (isString(ps)) {
          ps = periodSplit(ps);
        }
        for (var j = 0, plen = ps.length; j < plen; j++) {
          key = ps[j];
          isLast = i === blen - 1 && j === plen - 1;
          cbi = key.indexOf("]");
          isIndex = cbi !== -1;
          isPush = set && cbi === 0;
          nextIsIndex = blen > 1 && j === plen - 1;
          if (isPush) {
            key = ns.length;
          } else if (isIndex) {
            key = key.slice(0, -1);
          }
          if (isIndex && key < 0) {
            key = +key + ns.length;
          }
          if (i || key || blen === 1) {
            exists = any ? key in Object(ns) : hasOwn(ns, key);
            if (fill && (!isLast || fillLast) && !exists) {
              ns = ns[key] = nextIsIndex || fillLast && isLast ? [] : {};
              continue;
            }
            if (has) {
              if (isLast || !exists) {
                return exists;
              }
            } else if (set && isLast) {
              assertWritable(ns);
              ns[key] = val;
            }
            ns = exists ? ns[key] : void 0;
          }
        }
      }
      return ns;
    }
    function handleArrayIndexRange(obj, key, any, val) {
      var match, start, end, leading, trailing, arr, set;
      match = key.match(PROPERTY_RANGE_REG);
      if (!match) {
        return;
      }
      set = isDefined(val);
      leading = match[1];
      if (leading) {
        arr = handleDeepProperty(obj, leading, any, false, set ? true : false, true);
      } else {
        arr = obj;
      }
      assertArray(arr);
      trailing = match[4];
      start = match[2] ? +match[2] : 0;
      end = match[3] ? +match[3] : arr.length;
      end = end === -1 ? arr.length : end + 1;
      if (set) {
        for (var i = start; i < end; i++) {
          handleDeepProperty(arr, i + trailing, any, false, true, false, val);
        }
      } else {
        arr = arr.slice(start, end);
        if (trailing) {
          if (trailing.charAt(0) === HALF_WIDTH_PERIOD) {
            trailing = trailing.slice(1);
          }
          return map(arr, function(el) {
            return handleDeepProperty(el, trailing);
          });
        }
      }
      return arr;
    }
    module.exports = handleDeepProperty;
  }
});

// node_modules/sugar/common/internal/deepGetProperty.js
var require_deepGetProperty = __commonJS({
  "node_modules/sugar/common/internal/deepGetProperty.js"(exports, module) {
    "use strict";
    var handleDeepProperty = require_handleDeepProperty();
    function deepGetProperty(obj, key, any) {
      return handleDeepProperty(obj, key, any, false);
    }
    module.exports = deepGetProperty;
  }
});

// node_modules/sugar/common/var/STRING_FORMAT_REG.js
var require_STRING_FORMAT_REG = __commonJS({
  "node_modules/sugar/common/var/STRING_FORMAT_REG.js"(exports, module) {
    "use strict";
    module.exports = /([{}])\1|{([^}]*)}|(%)%|(%(\w*))/g;
  }
});

// node_modules/sugar/common/var/INTERNAL_MEMOIZE_LIMIT.js
var require_INTERNAL_MEMOIZE_LIMIT = __commonJS({
  "node_modules/sugar/common/var/INTERNAL_MEMOIZE_LIMIT.js"(exports, module) {
    "use strict";
    module.exports = 1e3;
  }
});

// node_modules/sugar/common/internal/memoizeFunction.js
var require_memoizeFunction = __commonJS({
  "node_modules/sugar/common/internal/memoizeFunction.js"(exports, module) {
    "use strict";
    var INTERNAL_MEMOIZE_LIMIT = require_INTERNAL_MEMOIZE_LIMIT();
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    function memoizeFunction(fn) {
      var memo = {}, counter = 0;
      return function(key) {
        if (hasOwn(memo, key)) {
          return memo[key];
        }
        if (counter === INTERNAL_MEMOIZE_LIMIT) {
          memo = {};
          counter = 0;
        }
        counter++;
        return memo[key] = fn(key);
      };
    }
    module.exports = memoizeFunction;
  }
});

// node_modules/sugar/common/internal/createFormatMatcher.js
var require_createFormatMatcher = __commonJS({
  "node_modules/sugar/common/internal/createFormatMatcher.js"(exports, module) {
    "use strict";
    var STRING_FORMAT_REG = require_STRING_FORMAT_REG();
    var CommonChars = require_CommonChars();
    var memoizeFunction = require_memoizeFunction();
    var OPEN_BRACE = CommonChars.OPEN_BRACE;
    var CLOSE_BRACE = CommonChars.CLOSE_BRACE;
    function createFormatMatcher(bracketMatcher, percentMatcher, precheck) {
      var reg = STRING_FORMAT_REG;
      var compileMemoized = memoizeFunction(compile);
      function getToken(format, match) {
        var get, token, literal, fn;
        var bKey = match[2];
        var pLit = match[3];
        var pKey = match[5];
        if (match[4] && percentMatcher) {
          token = pKey;
          get = percentMatcher;
        } else if (bKey) {
          token = bKey;
          get = bracketMatcher;
        } else if (pLit && percentMatcher) {
          literal = pLit;
        } else {
          literal = match[1] || match[0];
        }
        if (get) {
          assertPassesPrecheck(precheck, bKey, pKey);
          fn = function(obj, opt) {
            return get(obj, token, opt);
          };
        }
        format.push(fn || getLiteral(literal));
      }
      function getSubstring(format, str, start, end) {
        if (end > start) {
          var sub = str.slice(start, end);
          assertNoUnmatched(sub, OPEN_BRACE);
          assertNoUnmatched(sub, CLOSE_BRACE);
          format.push(function() {
            return sub;
          });
        }
      }
      function getLiteral(str) {
        return function() {
          return str;
        };
      }
      function assertPassesPrecheck(precheck2, bt, pt) {
        if (precheck2 && !precheck2(bt, pt)) {
          throw new TypeError("Invalid token " + (bt || pt) + " in format string");
        }
      }
      function assertNoUnmatched(str, chr) {
        if (str.indexOf(chr) !== -1) {
          throw new TypeError("Unmatched " + chr + " in format string");
        }
      }
      function compile(str) {
        var format = [], lastIndex = 0, match;
        reg.lastIndex = 0;
        while (match = reg.exec(str)) {
          getSubstring(format, str, lastIndex, match.index);
          getToken(format, match);
          lastIndex = reg.lastIndex;
        }
        getSubstring(format, str, lastIndex, str.length);
        return format;
      }
      return function(str, obj, opt) {
        var format = compileMemoized(str), result = "";
        for (var i = 0; i < format.length; i++) {
          result += format[i](obj, opt);
        }
        return result;
      };
    }
    module.exports = createFormatMatcher;
  }
});

// node_modules/sugar/string/var/stringFormatMatcher.js
var require_stringFormatMatcher = __commonJS({
  "node_modules/sugar/string/var/stringFormatMatcher.js"(exports, module) {
    "use strict";
    var deepGetProperty = require_deepGetProperty();
    var createFormatMatcher = require_createFormatMatcher();
    module.exports = createFormatMatcher(deepGetProperty);
  }
});

// node_modules/sugar/string/format.js
var require_format = __commonJS({
  "node_modules/sugar/string/format.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isObjectType = require_isObjectType();
    var stringFormatMatcher = require_stringFormatMatcher();
    Sugar.String.defineInstanceWithArguments({
      "format": function(str, args) {
        var arg1 = args[0] && args[0].valueOf();
        if (args.length === 1 && isObjectType(arg1)) {
          args = arg1;
        }
        return stringFormatMatcher(str, args);
      }
    });
    module.exports = Sugar.String.format;
  }
});

// node_modules/sugar/string/internal/numberOrIndex.js
var require_numberOrIndex = __commonJS({
  "node_modules/sugar/string/internal/numberOrIndex.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isString = classChecks.isString;
    function numberOrIndex(str, n, from) {
      if (isString(n)) {
        n = str.indexOf(n);
        if (n === -1) {
          n = from ? str.length : 0;
        }
      }
      return n;
    }
    module.exports = numberOrIndex;
  }
});

// node_modules/sugar/string/from.js
var require_from = __commonJS({
  "node_modules/sugar/string/from.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var numberOrIndex = require_numberOrIndex();
    Sugar.String.defineInstance({
      "from": function(str, from) {
        return str.slice(numberOrIndex(str, from, true));
      }
    });
    module.exports = Sugar.String.from;
  }
});

// node_modules/sugar/common/var/ENHANCEMENTS_FLAG.js
var require_ENHANCEMENTS_FLAG = __commonJS({
  "node_modules/sugar/common/var/ENHANCEMENTS_FLAG.js"(exports, module) {
    "use strict";
    module.exports = "enhance";
  }
});

// node_modules/sugar/string/var/STRING_ENHANCEMENTS_FLAG.js
var require_STRING_ENHANCEMENTS_FLAG = __commonJS({
  "node_modules/sugar/string/var/STRING_ENHANCEMENTS_FLAG.js"(exports, module) {
    "use strict";
    module.exports = "enhanceString";
  }
});

// node_modules/sugar/common/internal/fixArgumentLength.js
var require_fixArgumentLength = __commonJS({
  "node_modules/sugar/common/internal/fixArgumentLength.js"(exports, module) {
    "use strict";
    function fixArgumentLength(fn) {
      var staticFn = function(a) {
        var args = arguments;
        return fn(a, args[1], args[2], args.length - 1);
      };
      staticFn.instance = function(b) {
        var args = arguments;
        return fn(this, b, args[1], args.length);
      };
      return staticFn;
    }
    module.exports = fixArgumentLength;
  }
});

// node_modules/sugar/string/var/nativeIncludes.js
var require_nativeIncludes = __commonJS({
  "node_modules/sugar/string/var/nativeIncludes.js"(exports, module) {
    "use strict";
    module.exports = String.prototype.includes;
  }
});

// node_modules/sugar/string/internal/callIncludesWithRegexSupport.js
var require_callIncludesWithRegexSupport = __commonJS({
  "node_modules/sugar/string/internal/callIncludesWithRegexSupport.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var nativeIncludes = require_nativeIncludes();
    var isRegExp = classChecks.isRegExp;
    function callIncludesWithRegexSupport(str, search, position) {
      if (!isRegExp(search)) {
        return nativeIncludes.call(str, search, position);
      }
      if (position) {
        str = str.slice(position);
      }
      return search.test(str);
    }
    module.exports = callIncludesWithRegexSupport;
  }
});

// node_modules/sugar/string/includes.js
var require_includes = __commonJS({
  "node_modules/sugar/string/includes.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ENHANCEMENTS_FLAG = require_ENHANCEMENTS_FLAG();
    var STRING_ENHANCEMENTS_FLAG = require_STRING_ENHANCEMENTS_FLAG();
    var fixArgumentLength = require_fixArgumentLength();
    var callIncludesWithRegexSupport = require_callIncludesWithRegexSupport();
    Sugar.String.defineInstance({
      "includes": fixArgumentLength(callIncludesWithRegexSupport)
    }, [ENHANCEMENTS_FLAG, STRING_ENHANCEMENTS_FLAG]);
    module.exports = Sugar.String.includes;
  }
});

// node_modules/sugar/string/insert.js
var require_insert = __commonJS({
  "node_modules/sugar/string/insert.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    Sugar.String.defineInstance({
      "insert": function(str, substr, index) {
        index = isUndefined(index) ? str.length : index;
        return str.slice(0, index) + substr + str.slice(index);
      }
    });
    module.exports = Sugar.String.insert;
  }
});

// node_modules/sugar/string/isBlank.js
var require_isBlank = __commonJS({
  "node_modules/sugar/string/isBlank.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var trim = require_trim();
    Sugar.String.defineInstance({
      "isBlank": function(str) {
        return trim(str).length === 0;
      }
    });
    module.exports = Sugar.String.isBlank;
  }
});

// node_modules/sugar/string/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/sugar/string/isEmpty.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.String.defineInstance({
      "isEmpty": function(str) {
        return str.length === 0;
      }
    });
    module.exports = Sugar.String.isEmpty;
  }
});

// node_modules/sugar/string/last.js
var require_last = __commonJS({
  "node_modules/sugar/string/last.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    Sugar.String.defineInstance({
      "last": function(str, num) {
        if (isUndefined(num))
          num = 1;
        var start = str.length - num < 0 ? 0 : str.length - num;
        return str.substr(start);
      }
    });
    module.exports = Sugar.String.last;
  }
});

// node_modules/sugar/string/lines.js
var require_lines = __commonJS({
  "node_modules/sugar/string/lines.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var trim = require_trim();
    var stringEach = require_stringEach();
    Sugar.String.defineInstance({
      "lines": function(str, eachLineFn) {
        return stringEach(trim(str), /^.*$/gm, eachLineFn);
      }
    });
    module.exports = Sugar.String.lines;
  }
});

// node_modules/sugar/common/internal/repeatString.js
var require_repeatString = __commonJS({
  "node_modules/sugar/common/internal/repeatString.js"(exports, module) {
    "use strict";
    function repeatString(str, num) {
      var result = "";
      str = str.toString();
      while (num > 0) {
        if (num & 1) {
          result += str;
        }
        if (num >>= 1) {
          str += str;
        }
      }
      return result;
    }
    module.exports = repeatString;
  }
});

// node_modules/sugar/string/internal/padString.js
var require_padString = __commonJS({
  "node_modules/sugar/string/internal/padString.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    var repeatString = require_repeatString();
    function padString(num, padding) {
      return repeatString(isDefined(padding) ? padding : " ", num);
    }
    module.exports = padString;
  }
});

// node_modules/sugar/common/var/mathAliases.js
var require_mathAliases = __commonJS({
  "node_modules/sugar/common/var/mathAliases.js"(exports, module) {
    "use strict";
    module.exports = {
      abs: Math.abs,
      pow: Math.pow,
      min: Math.min,
      max: Math.max,
      ceil: Math.ceil,
      floor: Math.floor,
      round: Math.round
    };
  }
});

// node_modules/sugar/common/var/trunc.js
var require_trunc = __commonJS({
  "node_modules/sugar/common/var/trunc.js"(exports, module) {
    "use strict";
    var mathAliases = require_mathAliases();
    var ceil = mathAliases.ceil;
    var floor = mathAliases.floor;
    var trunc = Math.trunc || function(n) {
      if (n === 0 || !isFinite(n))
        return n;
      return n < 0 ? ceil(n) : floor(n);
    };
    module.exports = trunc;
  }
});

// node_modules/sugar/common/internal/coercePositiveInteger.js
var require_coercePositiveInteger = __commonJS({
  "node_modules/sugar/common/internal/coercePositiveInteger.js"(exports, module) {
    "use strict";
    var trunc = require_trunc();
    var classChecks = require_classChecks();
    var isNumber = classChecks.isNumber;
    function coercePositiveInteger(n) {
      n = +n || 0;
      if (n < 0 || !isNumber(n) || !isFinite(n)) {
        throw new RangeError("Invalid number");
      }
      return trunc(n);
    }
    module.exports = coercePositiveInteger;
  }
});

// node_modules/sugar/string/pad.js
var require_pad = __commonJS({
  "node_modules/sugar/string/pad.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var padString = require_padString();
    var mathAliases = require_mathAliases();
    var coercePositiveInteger = require_coercePositiveInteger();
    var max = mathAliases.max;
    var ceil = mathAliases.ceil;
    var floor = mathAliases.floor;
    Sugar.String.defineInstance({
      "pad": function(str, num, padding) {
        var half, front, back;
        num = coercePositiveInteger(num);
        half = max(0, num - str.length) / 2;
        front = floor(half);
        back = ceil(half);
        return padString(front, padding) + str + padString(back, padding);
      }
    });
    module.exports = Sugar.String.pad;
  }
});

// node_modules/sugar/string/padLeft.js
var require_padLeft = __commonJS({
  "node_modules/sugar/string/padLeft.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var padString = require_padString();
    var mathAliases = require_mathAliases();
    var coercePositiveInteger = require_coercePositiveInteger();
    var max = mathAliases.max;
    Sugar.String.defineInstance({
      "padLeft": function(str, num, padding) {
        num = coercePositiveInteger(num);
        return padString(max(0, num - str.length), padding) + str;
      }
    });
    module.exports = Sugar.String.padLeft;
  }
});

// node_modules/sugar/string/padRight.js
var require_padRight = __commonJS({
  "node_modules/sugar/string/padRight.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var padString = require_padString();
    var mathAliases = require_mathAliases();
    var coercePositiveInteger = require_coercePositiveInteger();
    var max = mathAliases.max;
    Sugar.String.defineInstance({
      "padRight": function(str, num, padding) {
        num = coercePositiveInteger(num);
        return str + padString(max(0, num - str.length), padding);
      }
    });
    module.exports = Sugar.String.padRight;
  }
});

// node_modules/sugar/string/internal/stringParameterize.js
var require_stringParameterize = __commonJS({
  "node_modules/sugar/string/internal/stringParameterize.js"(exports, module) {
    "use strict";
    var escapeRegExp = require_escapeRegExp();
    function stringParameterize(str, separator) {
      if (separator === void 0)
        separator = "-";
      str = str.replace(/[^a-z0-9\-_]+/gi, separator);
      if (separator) {
        var reg = RegExp("^{s}+|{s}+$|({s}){s}+".split("{s}").join(escapeRegExp(separator)), "g");
        str = str.replace(reg, "$1");
      }
      return encodeURI(str.toLowerCase());
    }
    module.exports = stringParameterize;
  }
});

// node_modules/sugar/string/parameterize.js
var require_parameterize = __commonJS({
  "node_modules/sugar/string/parameterize.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringParameterize = require_stringParameterize();
    Sugar.String.defineInstance({
      "parameterize": function(str, separator) {
        return stringParameterize(str, separator);
      }
    });
    module.exports = Sugar.String.parameterize;
  }
});

// node_modules/sugar/string/remove.js
var require_remove = __commonJS({
  "node_modules/sugar/string/remove.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.String.defineInstance({
      "remove": function(str, f) {
        return str.replace(f, "");
      }
    });
    module.exports = Sugar.String.remove;
  }
});

// node_modules/sugar/string/internal/stringReplaceAll.js
var require_stringReplaceAll = __commonJS({
  "node_modules/sugar/string/internal/stringReplaceAll.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var escapeRegExp = require_escapeRegExp();
    var getRegExpFlags = require_getRegExpFlags();
    var isString = classChecks.isString;
    function stringReplaceAll(str, f, replace) {
      var i = 0, tokens;
      if (isString(f)) {
        f = RegExp(escapeRegExp(f), "g");
      } else if (f && !f.global) {
        f = RegExp(f.source, getRegExpFlags(f, "g"));
      }
      if (!replace) {
        replace = "";
      } else {
        tokens = replace;
        replace = function() {
          var t = tokens[i++];
          return t != null ? t : "";
        };
      }
      return str.replace(f, replace);
    }
    module.exports = stringReplaceAll;
  }
});

// node_modules/sugar/string/removeAll.js
var require_removeAll = __commonJS({
  "node_modules/sugar/string/removeAll.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringReplaceAll = require_stringReplaceAll();
    Sugar.String.defineInstance({
      "removeAll": function(str, f) {
        return stringReplaceAll(str, f);
      }
    });
    module.exports = Sugar.String.removeAll;
  }
});

// node_modules/sugar/string/var/HTML_VOID_ELEMENTS.js
var require_HTML_VOID_ELEMENTS = __commonJS({
  "node_modules/sugar/string/var/HTML_VOID_ELEMENTS.js"(exports, module) {
    "use strict";
    var HTML_VOID_ELEMENTS = [
      "area",
      "base",
      "br",
      "col",
      "command",
      "embed",
      "hr",
      "img",
      "input",
      "keygen",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ];
    module.exports = HTML_VOID_ELEMENTS;
  }
});

// node_modules/sugar/common/internal/indexOf.js
var require_indexOf = __commonJS({
  "node_modules/sugar/common/internal/indexOf.js"(exports, module) {
    "use strict";
    function indexOf(arr, el) {
      for (var i = 0, len = arr.length; i < len; i++) {
        if (i in arr && arr[i] === el)
          return i;
      }
      return -1;
    }
    module.exports = indexOf;
  }
});

// node_modules/sugar/string/internal/tagIsVoid.js
var require_tagIsVoid = __commonJS({
  "node_modules/sugar/string/internal/tagIsVoid.js"(exports, module) {
    "use strict";
    var HTML_VOID_ELEMENTS = require_HTML_VOID_ELEMENTS();
    var indexOf = require_indexOf();
    function tagIsVoid(tag) {
      return indexOf(HTML_VOID_ELEMENTS, tag.toLowerCase()) !== -1;
    }
    module.exports = tagIsVoid;
  }
});

// node_modules/sugar/string/internal/runTagReplacements.js
var require_runTagReplacements = __commonJS({
  "node_modules/sugar/string/internal/runTagReplacements.js"(exports, module) {
    "use strict";
    var tagIsVoid = require_tagIsVoid();
    var classChecks = require_classChecks();
    var isString = classChecks.isString;
    function runTagReplacements(str, reg, strip, replacement, fullString) {
      var match;
      var result = "";
      var currentIndex = 0;
      var openTagName;
      var openTagAttributes;
      var openTagCount = 0;
      function processTag(index, tagName2, attributes2, tagLength2, isVoid2) {
        var content = str.slice(currentIndex, index), s = "", r = "";
        if (isString(replacement)) {
          r = replacement;
        } else if (replacement) {
          r = replacement.call(fullString, tagName2, content, attributes2, fullString) || "";
        }
        if (strip) {
          s = r;
        } else {
          content = r;
        }
        if (content) {
          content = runTagReplacements(content, reg, strip, replacement, fullString);
        }
        result += s + content + (isVoid2 ? "" : s);
        currentIndex = index + (tagLength2 || 0);
      }
      fullString = fullString || str;
      reg = RegExp(reg.source, "gi");
      while (match = reg.exec(str)) {
        var tagName = match[2];
        var attributes = (match[3] || "").slice(1);
        var isClosingTag = !!match[1];
        var isSelfClosing = !!match[4];
        var tagLength = match[0].length;
        var isVoid = tagIsVoid(tagName);
        var isOpeningTag = !isClosingTag && !isSelfClosing && !isVoid;
        var isSameAsCurrent = tagName === openTagName;
        if (!openTagName) {
          result += str.slice(currentIndex, match.index);
          currentIndex = match.index;
        }
        if (isOpeningTag) {
          if (!openTagName) {
            openTagName = tagName;
            openTagAttributes = attributes;
            openTagCount++;
            currentIndex += tagLength;
          } else if (isSameAsCurrent) {
            openTagCount++;
          }
        } else if (isClosingTag && isSameAsCurrent) {
          openTagCount--;
          if (openTagCount === 0) {
            processTag(match.index, openTagName, openTagAttributes, tagLength, isVoid);
            openTagName = null;
            openTagAttributes = null;
          }
        } else if (!openTagName) {
          processTag(match.index, tagName, attributes, tagLength, isVoid);
        }
      }
      if (openTagName) {
        processTag(str.length, openTagName, openTagAttributes);
      }
      result += str.slice(currentIndex);
      return result;
    }
    module.exports = runTagReplacements;
  }
});

// node_modules/sugar/string/internal/replaceTags.js
var require_replaceTags = __commonJS({
  "node_modules/sugar/string/internal/replaceTags.js"(exports, module) {
    "use strict";
    var map = require_map();
    var classChecks = require_classChecks();
    var escapeRegExp = require_escapeRegExp();
    var runTagReplacements = require_runTagReplacements();
    var isString = classChecks.isString;
    function replaceTags(str, find, replacement, strip) {
      var tags = isString(find) ? [find] : find, reg, src;
      tags = map(tags || [], function(t) {
        return escapeRegExp(t);
      }).join("|");
      src = tags.replace("all", "") || "[^\\s>]+";
      src = "<(\\/)?(" + src + ")(\\s+[^<>]*?)?\\s*(\\/)?>";
      reg = RegExp(src, "gi");
      return runTagReplacements(str.toString(), reg, strip, replacement);
    }
    module.exports = replaceTags;
  }
});

// node_modules/sugar/string/removeTags.js
var require_removeTags = __commonJS({
  "node_modules/sugar/string/removeTags.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var replaceTags = require_replaceTags();
    Sugar.String.defineInstance({
      "removeTags": function(str, tag, replace) {
        return replaceTags(str, tag, replace, false);
      }
    });
    module.exports = Sugar.String.removeTags;
  }
});

// node_modules/sugar/string/replaceAll.js
var require_replaceAll = __commonJS({
  "node_modules/sugar/string/replaceAll.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringReplaceAll = require_stringReplaceAll();
    Sugar.String.defineInstanceWithArguments({
      "replaceAll": function(str, f, args) {
        return stringReplaceAll(str, f, args);
      }
    });
    module.exports = Sugar.String.replaceAll;
  }
});

// node_modules/sugar/string/internal/reverseString.js
var require_reverseString = __commonJS({
  "node_modules/sugar/string/internal/reverseString.js"(exports, module) {
    "use strict";
    function reverseString(str) {
      return str.split("").reverse().join("");
    }
    module.exports = reverseString;
  }
});

// node_modules/sugar/string/reverse.js
var require_reverse = __commonJS({
  "node_modules/sugar/string/reverse.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var reverseString = require_reverseString();
    Sugar.String.defineInstance({
      "reverse": function(str) {
        return reverseString(str);
      }
    });
    module.exports = Sugar.String.reverse;
  }
});

// node_modules/sugar/string/shift.js
var require_shift = __commonJS({
  "node_modules/sugar/string/shift.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var chr = require_chr();
    var stringCodes = require_stringCodes();
    Sugar.String.defineInstance({
      "shift": function(str, n) {
        var result = "";
        n = n || 0;
        stringCodes(str, function(c) {
          result += chr(c + n);
        });
        return result;
      }
    });
    module.exports = Sugar.String.shift;
  }
});

// node_modules/sugar/string/internal/stringSpacify.js
var require_stringSpacify = __commonJS({
  "node_modules/sugar/string/internal/stringSpacify.js"(exports, module) {
    "use strict";
    var stringUnderscore = require_stringUnderscore();
    function stringSpacify(str) {
      return stringUnderscore(str).replace(/_/g, " ");
    }
    module.exports = stringSpacify;
  }
});

// node_modules/sugar/string/spacify.js
var require_spacify = __commonJS({
  "node_modules/sugar/string/spacify.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringSpacify = require_stringSpacify();
    Sugar.String.defineInstance({
      "spacify": function(str) {
        return stringSpacify(str);
      }
    });
    module.exports = Sugar.String.spacify;
  }
});

// node_modules/sugar/string/stripTags.js
var require_stripTags = __commonJS({
  "node_modules/sugar/string/stripTags.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var replaceTags = require_replaceTags();
    Sugar.String.defineInstance({
      "stripTags": function(str, tag, replace) {
        return replaceTags(str, tag, replace, true);
      }
    });
    module.exports = Sugar.String.stripTags;
  }
});

// node_modules/sugar/string/var/DOWNCASED_WORDS.js
var require_DOWNCASED_WORDS = __commonJS({
  "node_modules/sugar/string/var/DOWNCASED_WORDS.js"(exports, module) {
    "use strict";
    var DOWNCASED_WORDS = [
      "and",
      "or",
      "nor",
      "a",
      "an",
      "the",
      "so",
      "but",
      "to",
      "of",
      "at",
      "by",
      "from",
      "into",
      "on",
      "onto",
      "off",
      "out",
      "in",
      "over",
      "with",
      "for"
    ];
    module.exports = DOWNCASED_WORDS;
  }
});

// node_modules/sugar/string/internal/eachWord.js
var require_eachWord = __commonJS({
  "node_modules/sugar/string/internal/eachWord.js"(exports, module) {
    "use strict";
    var trim = require_trim();
    var stringEach = require_stringEach();
    function eachWord(str, fn) {
      return stringEach(trim(str), /\S+/g, fn);
    }
    module.exports = eachWord;
  }
});

// node_modules/sugar/common/internal/getHumanWord.js
var require_getHumanWord = __commonJS({
  "node_modules/sugar/common/internal/getHumanWord.js"(exports, module) {
    "use strict";
    var Inflections = require_Inflections();
    function getHumanWord(str) {
      return Inflections.human && Inflections.human.find(str);
    }
    module.exports = getHumanWord;
  }
});

// node_modules/sugar/common/internal/runHumanRules.js
var require_runHumanRules = __commonJS({
  "node_modules/sugar/common/internal/runHumanRules.js"(exports, module) {
    "use strict";
    var Inflections = require_Inflections();
    function runHumanRules(str) {
      return Inflections.human && Inflections.human.runRules(str) || str;
    }
    module.exports = runHumanRules;
  }
});

// node_modules/sugar/string/internal/stringTitleize.js
var require_stringTitleize = __commonJS({
  "node_modules/sugar/string/internal/stringTitleize.js"(exports, module) {
    "use strict";
    var DOWNCASED_WORDS = require_DOWNCASED_WORDS();
    var indexOf = require_indexOf();
    var eachWord = require_eachWord();
    var getAcronym = require_getAcronym();
    var getHumanWord = require_getHumanWord();
    var runHumanRules = require_runHumanRules();
    var stringSpacify = require_stringSpacify();
    var stringCapitalize = require_stringCapitalize();
    function stringTitleize(str) {
      var fullStopPunctuation = /[.:;!]$/, lastHadPunctuation;
      str = runHumanRules(str);
      str = stringSpacify(str);
      return eachWord(str, function(word, index, words) {
        word = getHumanWord(word) || word;
        word = getAcronym(word) || word;
        var hasPunctuation, isFirstOrLast;
        var first = index == 0, last = index == words.length - 1;
        hasPunctuation = fullStopPunctuation.test(word);
        isFirstOrLast = first || last || hasPunctuation || lastHadPunctuation;
        lastHadPunctuation = hasPunctuation;
        if (isFirstOrLast || indexOf(DOWNCASED_WORDS, word) === -1) {
          return stringCapitalize(word, false, true);
        } else {
          return word;
        }
      }).join(" ");
    }
    module.exports = stringTitleize;
  }
});

// node_modules/sugar/string/titleize.js
var require_titleize = __commonJS({
  "node_modules/sugar/string/titleize.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringTitleize = require_stringTitleize();
    Sugar.String.defineInstance({
      "titleize": function(str) {
        return stringTitleize(str);
      }
    });
    module.exports = Sugar.String.titleize;
  }
});

// node_modules/sugar/string/to.js
var require_to = __commonJS({
  "node_modules/sugar/string/to.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    var numberOrIndex = require_numberOrIndex();
    Sugar.String.defineInstance({
      "to": function(str, to) {
        if (isUndefined(to))
          to = str.length;
        return str.slice(0, numberOrIndex(str, to));
      }
    });
    module.exports = Sugar.String.to;
  }
});

// node_modules/sugar/common/internal/allCharsReg.js
var require_allCharsReg = __commonJS({
  "node_modules/sugar/common/internal/allCharsReg.js"(exports, module) {
    "use strict";
    function allCharsReg(src) {
      return RegExp("[" + src + "]", "g");
    }
    module.exports = allCharsReg;
  }
});

// node_modules/sugar/common/var/fullwidthNumberHelpers.js
var require_fullwidthNumberHelpers = __commonJS({
  "node_modules/sugar/common/var/fullwidthNumberHelpers.js"(exports, module) {
    "use strict";
    var CommonChars = require_CommonChars();
    var chr = require_chr();
    var allCharsReg = require_allCharsReg();
    var HALF_WIDTH_ZERO = CommonChars.HALF_WIDTH_ZERO;
    var FULL_WIDTH_ZERO = CommonChars.FULL_WIDTH_ZERO;
    var HALF_WIDTH_PERIOD = CommonChars.HALF_WIDTH_PERIOD;
    var FULL_WIDTH_PERIOD = CommonChars.FULL_WIDTH_PERIOD;
    var HALF_WIDTH_COMMA = CommonChars.HALF_WIDTH_COMMA;
    var fullWidthNumberReg;
    var fullWidthNumberMap;
    var fullWidthNumbers;
    function buildFullWidthNumber() {
      var fwp = FULL_WIDTH_PERIOD, hwp = HALF_WIDTH_PERIOD, hwc = HALF_WIDTH_COMMA, fwn = "";
      fullWidthNumberMap = {};
      for (var i = 0, digit; i <= 9; i++) {
        digit = chr(i + FULL_WIDTH_ZERO);
        fwn += digit;
        fullWidthNumberMap[digit] = chr(i + HALF_WIDTH_ZERO);
      }
      fullWidthNumberMap[hwc] = "";
      fullWidthNumberMap[fwp] = hwp;
      fullWidthNumberMap[hwp] = hwp;
      fullWidthNumberReg = allCharsReg(fwn + fwp + hwc + hwp);
      fullWidthNumbers = fwn;
    }
    buildFullWidthNumber();
    module.exports = {
      fullWidthNumberReg,
      fullWidthNumberMap,
      fullWidthNumbers
    };
  }
});

// node_modules/sugar/common/internal/stringToNumber.js
var require_stringToNumber = __commonJS({
  "node_modules/sugar/common/internal/stringToNumber.js"(exports, module) {
    "use strict";
    var CommonChars = require_CommonChars();
    var coreUtilityAliases = require_coreUtilityAliases();
    var fullwidthNumberHelpers = require_fullwidthNumberHelpers();
    var fullWidthNumberReg = fullwidthNumberHelpers.fullWidthNumberReg;
    var fullWidthNumberMap = fullwidthNumberHelpers.fullWidthNumberMap;
    var getOwn = coreUtilityAliases.getOwn;
    var HALF_WIDTH_PERIOD = CommonChars.HALF_WIDTH_PERIOD;
    function stringToNumber(str, base) {
      var sanitized, isDecimal;
      sanitized = str.replace(fullWidthNumberReg, function(chr) {
        var replacement = getOwn(fullWidthNumberMap, chr);
        if (replacement === HALF_WIDTH_PERIOD) {
          isDecimal = true;
        }
        return replacement;
      });
      return isDecimal ? parseFloat(sanitized) : parseInt(sanitized, base || 10);
    }
    module.exports = stringToNumber;
  }
});

// node_modules/sugar/string/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/sugar/string/toNumber.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringToNumber = require_stringToNumber();
    Sugar.String.defineInstance({
      "toNumber": function(str, base) {
        return stringToNumber(str, base);
      }
    });
    module.exports = Sugar.String.toNumber;
  }
});

// node_modules/sugar/common/var/TRIM_CHARS.js
var require_TRIM_CHARS = __commonJS({
  "node_modules/sugar/common/var/TRIM_CHARS.js"(exports, module) {
    "use strict";
    module.exports = "	\n\v\f\r   ᠎             \u2028\u2029　\uFEFF";
  }
});

// node_modules/sugar/string/var/LEFT_TRIM_REG.js
var require_LEFT_TRIM_REG = __commonJS({
  "node_modules/sugar/string/var/LEFT_TRIM_REG.js"(exports, module) {
    "use strict";
    var TRIM_CHARS = require_TRIM_CHARS();
    module.exports = RegExp("^[" + TRIM_CHARS + "]+");
  }
});

// node_modules/sugar/string/trimLeft.js
var require_trimLeft = __commonJS({
  "node_modules/sugar/string/trimLeft.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LEFT_TRIM_REG = require_LEFT_TRIM_REG();
    Sugar.String.defineInstance({
      "trimLeft": function(str) {
        return str.replace(LEFT_TRIM_REG, "");
      }
    });
    module.exports = Sugar.String.trimLeft;
  }
});

// node_modules/sugar/string/var/RIGHT_TRIM_REG.js
var require_RIGHT_TRIM_REG = __commonJS({
  "node_modules/sugar/string/var/RIGHT_TRIM_REG.js"(exports, module) {
    "use strict";
    var TRIM_CHARS = require_TRIM_CHARS();
    module.exports = RegExp("[" + TRIM_CHARS + "]+$");
  }
});

// node_modules/sugar/string/trimRight.js
var require_trimRight = __commonJS({
  "node_modules/sugar/string/trimRight.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var RIGHT_TRIM_REG = require_RIGHT_TRIM_REG();
    Sugar.String.defineInstance({
      "trimRight": function(str) {
        return str.replace(RIGHT_TRIM_REG, "");
      }
    });
    module.exports = Sugar.String.trimRight;
  }
});

// node_modules/sugar/string/var/TRUNC_REG.js
var require_TRUNC_REG = __commonJS({
  "node_modules/sugar/string/var/TRUNC_REG.js"(exports, module) {
    "use strict";
    var TRIM_CHARS = require_TRIM_CHARS();
    module.exports = RegExp("(?=[" + TRIM_CHARS + "])");
  }
});

// node_modules/sugar/common/internal/filter.js
var require_filter = __commonJS({
  "node_modules/sugar/common/internal/filter.js"(exports, module) {
    "use strict";
    function filter(arr, fn) {
      var result = [];
      for (var i = 0, len = arr.length; i < len; i++) {
        var el = arr[i];
        if (i in arr && fn(el, i)) {
          result.push(el);
        }
      }
      return result;
    }
    module.exports = filter;
  }
});

// node_modules/sugar/string/internal/truncateOnWord.js
var require_truncateOnWord = __commonJS({
  "node_modules/sugar/string/internal/truncateOnWord.js"(exports, module) {
    "use strict";
    var TRUNC_REG = require_TRUNC_REG();
    var filter = require_filter();
    var reverseString = require_reverseString();
    function truncateOnWord(str, limit, fromLeft) {
      if (fromLeft) {
        return reverseString(truncateOnWord(reverseString(str), limit));
      }
      var words = str.split(TRUNC_REG);
      var count = 0;
      return filter(words, function(word) {
        count += word.length;
        return count <= limit;
      }).join("");
    }
    module.exports = truncateOnWord;
  }
});

// node_modules/sugar/string/internal/truncateString.js
var require_truncateString = __commonJS({
  "node_modules/sugar/string/internal/truncateString.js"(exports, module) {
    "use strict";
    var isUndefined = require_isUndefined();
    var mathAliases = require_mathAliases();
    var truncateOnWord = require_truncateOnWord();
    var ceil = mathAliases.ceil;
    var floor = mathAliases.floor;
    function truncateString(str, length, from, ellipsis, split) {
      var str1, str2, len1, len2;
      if (str.length <= length) {
        return str.toString();
      }
      ellipsis = isUndefined(ellipsis) ? "..." : ellipsis;
      switch (from) {
        case "left":
          str2 = split ? truncateOnWord(str, length, true) : str.slice(str.length - length);
          return ellipsis + str2;
        case "middle":
          len1 = ceil(length / 2);
          len2 = floor(length / 2);
          str1 = split ? truncateOnWord(str, len1) : str.slice(0, len1);
          str2 = split ? truncateOnWord(str, len2, true) : str.slice(str.length - len2);
          return str1 + ellipsis + str2;
        default:
          str1 = split ? truncateOnWord(str, length) : str.slice(0, length);
          return str1 + ellipsis;
      }
    }
    module.exports = truncateString;
  }
});

// node_modules/sugar/string/truncate.js
var require_truncate = __commonJS({
  "node_modules/sugar/string/truncate.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var truncateString = require_truncateString();
    Sugar.String.defineInstance({
      "truncate": function(str, length, from, ellipsis) {
        return truncateString(str, length, from, ellipsis);
      }
    });
    module.exports = Sugar.String.truncate;
  }
});

// node_modules/sugar/string/truncateOnWord.js
var require_truncateOnWord2 = __commonJS({
  "node_modules/sugar/string/truncateOnWord.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var truncateString = require_truncateString();
    Sugar.String.defineInstance({
      "truncateOnWord": function(str, length, from, ellipsis) {
        return truncateString(str, length, from, ellipsis, true);
      }
    });
    module.exports = Sugar.String.truncateOnWord;
  }
});

// node_modules/sugar/string/underscore.js
var require_underscore = __commonJS({
  "node_modules/sugar/string/underscore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var stringUnderscore = require_stringUnderscore();
    Sugar.String.defineInstance({
      "underscore": function(str) {
        return stringUnderscore(str);
      }
    });
    module.exports = Sugar.String.underscore;
  }
});

// node_modules/sugar/string/var/HTML_ENTITY_REG.js
var require_HTML_ENTITY_REG = __commonJS({
  "node_modules/sugar/string/var/HTML_ENTITY_REG.js"(exports, module) {
    "use strict";
    module.exports = /&#?(x)?([\w\d]{0,5});/gi;
  }
});

// node_modules/sugar/string/internal/unescapeHTML.js
var require_unescapeHTML = __commonJS({
  "node_modules/sugar/string/internal/unescapeHTML.js"(exports, module) {
    "use strict";
    var HTML_ENTITY_REG = require_HTML_ENTITY_REG();
    var HTMLFromEntityMap = require_HTMLFromEntityMap();
    var chr = require_chr();
    function unescapeHTML(str) {
      return str.replace(HTML_ENTITY_REG, function(full, hex, code) {
        var special = HTMLFromEntityMap[code];
        return special || chr(hex ? parseInt(code, 16) : +code);
      });
    }
    module.exports = unescapeHTML;
  }
});

// node_modules/sugar/string/unescapeHTML.js
var require_unescapeHTML2 = __commonJS({
  "node_modules/sugar/string/unescapeHTML.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var unescapeHTML = require_unescapeHTML();
    Sugar.String.defineInstance({
      "unescapeHTML": function(str) {
        return unescapeHTML(str);
      }
    });
    module.exports = Sugar.String.unescapeHTML;
  }
});

// node_modules/sugar/string/unescapeURL.js
var require_unescapeURL = __commonJS({
  "node_modules/sugar/string/unescapeURL.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.String.defineInstance({
      "unescapeURL": function(str, param) {
        return param ? decodeURI(str) : decodeURIComponent(str);
      }
    });
    module.exports = Sugar.String.unescapeURL;
  }
});

// node_modules/sugar/string/words.js
var require_words = __commonJS({
  "node_modules/sugar/string/words.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var trim = require_trim();
    var stringEach = require_stringEach();
    Sugar.String.defineInstance({
      "words": function(str, eachWordFn) {
        return stringEach(trim(str), /\S+/g, eachWordFn);
      }
    });
    module.exports = Sugar.String.words;
  }
});

// node_modules/sugar/string/index.js
var require_string = __commonJS({
  "node_modules/sugar/string/index.js"(exports, module) {
    "use strict";
    require_at();
    require_camelize();
    require_capitalize();
    require_chars();
    require_codes();
    require_compact();
    require_dasherize();
    require_decodeBase64();
    require_encodeBase64();
    require_escapeHTML();
    require_escapeURL();
    require_first();
    require_forEach2();
    require_format();
    require_from();
    require_includes();
    require_insert();
    require_isBlank();
    require_isEmpty();
    require_last();
    require_lines();
    require_pad();
    require_padLeft();
    require_padRight();
    require_parameterize();
    require_remove();
    require_removeAll();
    require_removeTags();
    require_replaceAll();
    require_reverse();
    require_shift();
    require_spacify();
    require_stripTags();
    require_titleize();
    require_to();
    require_toNumber();
    require_trimLeft();
    require_trimRight();
    require_truncate();
    require_truncateOnWord2();
    require_underscore();
    require_unescapeHTML2();
    require_unescapeURL();
    require_words();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/number/random.js
var require_random = __commonJS({
  "node_modules/sugar/number/random.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var trunc = require_trunc();
    var mathAliases = require_mathAliases();
    var isUndefined = require_isUndefined();
    var min = mathAliases.min;
    var max = mathAliases.max;
    Sugar.Number.defineStatic({
      "random": function(n1, n2) {
        var minNum, maxNum;
        if (arguments.length == 1)
          n2 = n1, n1 = 0;
        minNum = min(n1 || 0, isUndefined(n2) ? 1 : n2);
        maxNum = max(n1 || 0, isUndefined(n2) ? 1 : n2) + 1;
        return trunc(Math.random() * (maxNum - minNum) + minNum);
      }
    });
    module.exports = Sugar.Number.random;
  }
});

// node_modules/sugar/number/var/AbbreviationUnits.js
var require_AbbreviationUnits = __commonJS({
  "node_modules/sugar/number/var/AbbreviationUnits.js"(exports, module) {
    "use strict";
    module.exports = {
      BASIC_UNITS: "|kmbt",
      MEMORY_UNITS: "|KMGTPE",
      MEMORY_BINARY_UNITS: "|,Ki,Mi,Gi,Ti,Pi,Ei",
      METRIC_UNITS_SHORT: "nμm|k",
      METRIC_UNITS_FULL: "yzafpnμm|KMGTPEZY"
    };
  }
});

// node_modules/sugar/common/internal/commaSplit.js
var require_commaSplit = __commonJS({
  "node_modules/sugar/common/internal/commaSplit.js"(exports, module) {
    "use strict";
    var CommonChars = require_CommonChars();
    var HALF_WIDTH_COMMA = CommonChars.HALF_WIDTH_COMMA;
    function commaSplit(str) {
      return str.split(HALF_WIDTH_COMMA);
    }
    module.exports = commaSplit;
  }
});

// node_modules/sugar/common/internal/withPrecision.js
var require_withPrecision = __commonJS({
  "node_modules/sugar/common/internal/withPrecision.js"(exports, module) {
    "use strict";
    var mathAliases = require_mathAliases();
    var abs = mathAliases.abs;
    var pow = mathAliases.pow;
    var round = mathAliases.round;
    function withPrecision(val, precision, fn) {
      var multiplier = pow(10, abs(precision || 0));
      fn = fn || round;
      if (precision < 0)
        multiplier = 1 / multiplier;
      return fn(val * multiplier) / multiplier;
    }
    module.exports = withPrecision;
  }
});

// node_modules/sugar/number/var/NUMBER_OPTIONS.js
var require_NUMBER_OPTIONS = __commonJS({
  "node_modules/sugar/number/var/NUMBER_OPTIONS.js"(exports, module) {
    "use strict";
    var CommonChars = require_CommonChars();
    var HALF_WIDTH_PERIOD = CommonChars.HALF_WIDTH_PERIOD;
    var HALF_WIDTH_COMMA = CommonChars.HALF_WIDTH_COMMA;
    var NUMBER_OPTIONS = {
      "decimal": HALF_WIDTH_PERIOD,
      "thousands": HALF_WIDTH_COMMA
    };
    module.exports = NUMBER_OPTIONS;
  }
});

// node_modules/sugar/common/var/namespaceAliases.js
var require_namespaceAliases = __commonJS({
  "node_modules/sugar/common/var/namespaceAliases.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    module.exports = {
      sugarObject: Sugar.Object,
      sugarArray: Sugar.Array,
      sugarDate: Sugar.Date,
      sugarString: Sugar.String,
      sugarNumber: Sugar.Number,
      sugarFunction: Sugar.Function,
      sugarRegExp: Sugar.RegExp
    };
  }
});

// node_modules/sugar/common/internal/simpleMerge.js
var require_simpleMerge = __commonJS({
  "node_modules/sugar/common/internal/simpleMerge.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function simpleMerge(target, source) {
      forEachProperty(source, function(val, key) {
        target[key] = val;
      });
      return target;
    }
    module.exports = simpleMerge;
  }
});

// node_modules/sugar/common/internal/simpleClone.js
var require_simpleClone = __commonJS({
  "node_modules/sugar/common/internal/simpleClone.js"(exports, module) {
    "use strict";
    var simpleMerge = require_simpleMerge();
    function simpleClone(obj) {
      return simpleMerge({}, obj);
    }
    module.exports = simpleClone;
  }
});

// node_modules/sugar/common/internal/defineAccessor.js
var require_defineAccessor = __commonJS({
  "node_modules/sugar/common/internal/defineAccessor.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var setProperty = coreUtilityAliases.setProperty;
    function defineAccessor(namespace, name, fn) {
      setProperty(namespace, name, fn);
    }
    module.exports = defineAccessor;
  }
});

// node_modules/sugar/common/internal/defineOptionsAccessor.js
var require_defineOptionsAccessor = __commonJS({
  "node_modules/sugar/common/internal/defineOptionsAccessor.js"(exports, module) {
    "use strict";
    var simpleClone = require_simpleClone();
    var defineAccessor = require_defineAccessor();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function defineOptionsAccessor(namespace, defaults) {
      var obj = simpleClone(defaults);
      function getOption(name) {
        return obj[name];
      }
      function setOption(arg1, arg2) {
        var options;
        if (arguments.length === 1) {
          options = arg1;
        } else {
          options = {};
          options[arg1] = arg2;
        }
        forEachProperty(options, function(val, name) {
          if (val === null) {
            val = defaults[name];
          }
          obj[name] = val;
        });
      }
      defineAccessor(namespace, "getOption", getOption);
      defineAccessor(namespace, "setOption", setOption);
      return getOption;
    }
    module.exports = defineOptionsAccessor;
  }
});

// node_modules/sugar/number/var/_numberOptions.js
var require_numberOptions = __commonJS({
  "node_modules/sugar/number/var/_numberOptions.js"(exports, module) {
    "use strict";
    var NUMBER_OPTIONS = require_NUMBER_OPTIONS();
    var namespaceAliases = require_namespaceAliases();
    var defineOptionsAccessor = require_defineOptionsAccessor();
    var sugarNumber = namespaceAliases.sugarNumber;
    module.exports = defineOptionsAccessor(sugarNumber, NUMBER_OPTIONS);
  }
});

// node_modules/sugar/number/internal/numberFormat.js
var require_numberFormat = __commonJS({
  "node_modules/sugar/number/internal/numberFormat.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var mathAliases = require_mathAliases();
    var periodSplit = require_periodSplit();
    var repeatString = require_repeatString();
    var withPrecision = require_withPrecision();
    var _numberOptions = require_numberOptions();
    var isNumber = classChecks.isNumber;
    var max = mathAliases.max;
    function numberFormat(num, place) {
      var result = "", thousands, decimal, fraction, integer, split, str;
      decimal = _numberOptions("decimal");
      thousands = _numberOptions("thousands");
      if (isNumber(place)) {
        str = withPrecision(num, place || 0).toFixed(max(place, 0));
      } else {
        str = num.toString();
      }
      str = str.replace(/^-/, "");
      split = periodSplit(str);
      integer = split[0];
      fraction = split[1];
      if (/e/.test(str)) {
        result = str;
      } else {
        for (var i = integer.length; i > 0; i -= 3) {
          if (i < integer.length) {
            result = thousands + result;
          }
          result = integer.slice(max(0, i - 3), i) + result;
        }
      }
      if (fraction) {
        result += decimal + repeatString("0", (place || 0) - fraction.length) + fraction;
      }
      return (num < 0 ? "-" : "") + result;
    }
    module.exports = numberFormat;
  }
});

// node_modules/sugar/number/internal/abbreviateNumber.js
var require_abbreviateNumber = __commonJS({
  "node_modules/sugar/number/internal/abbreviateNumber.js"(exports, module) {
    "use strict";
    var commaSplit = require_commaSplit();
    var mathAliases = require_mathAliases();
    var numberFormat = require_numberFormat();
    var withPrecision = require_withPrecision();
    var abs = mathAliases.abs;
    var pow = mathAliases.pow;
    var min = mathAliases.min;
    var max = mathAliases.max;
    var floor = mathAliases.floor;
    function abbreviateNumber(num, precision, ustr, bytes) {
      var fixed = num.toFixed(20), decimalPlace = fixed.search(/\./), numeralPlace = fixed.search(/[1-9]/), significant = decimalPlace - numeralPlace, units, unit, mid, i, divisor;
      if (significant > 0) {
        significant -= 1;
      }
      units = commaSplit(ustr);
      if (units.length === 1) {
        units = ustr.split("");
      }
      mid = units.indexOf("|");
      if (mid === -1) {
        mid = units[0] === "_" ? 0 : units.length;
      }
      i = max(min(floor(significant / 3), units.length - mid - 1), -mid);
      unit = units[i + mid];
      while (unit === "_") {
        i += i < 0 ? -1 : 1;
        unit = units[i + mid];
      }
      if (unit === "|") {
        unit = "";
      }
      if (significant < -9) {
        precision = abs(significant) - 9;
      }
      divisor = bytes ? pow(2, 10 * i) : pow(10, i * 3);
      return numberFormat(withPrecision(num / divisor, precision || 0)) + unit;
    }
    module.exports = abbreviateNumber;
  }
});

// node_modules/sugar/number/abbr.js
var require_abbr = __commonJS({
  "node_modules/sugar/number/abbr.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var AbbreviationUnits = require_AbbreviationUnits();
    var abbreviateNumber = require_abbreviateNumber();
    var BASIC_UNITS = AbbreviationUnits.BASIC_UNITS;
    Sugar.Number.defineInstance({
      "abbr": function(n, precision) {
        return abbreviateNumber(n, precision, BASIC_UNITS);
      }
    });
    module.exports = Sugar.Number.abbr;
  }
});

// node_modules/sugar/common/internal/wrapNamespace.js
var require_wrapNamespace = __commonJS({
  "node_modules/sugar/common/internal/wrapNamespace.js"(exports, module) {
    "use strict";
    function wrapNamespace(method) {
      return function(sugarNamespace, arg1, arg2) {
        sugarNamespace[method](arg1, arg2);
      };
    }
    module.exports = wrapNamespace;
  }
});

// node_modules/sugar/common/var/methodDefineAliases.js
var require_methodDefineAliases = __commonJS({
  "node_modules/sugar/common/var/methodDefineAliases.js"(exports, module) {
    "use strict";
    var wrapNamespace = require_wrapNamespace();
    module.exports = {
      alias: wrapNamespace("alias"),
      defineStatic: wrapNamespace("defineStatic"),
      defineInstance: wrapNamespace("defineInstance"),
      defineStaticPolyfill: wrapNamespace("defineStaticPolyfill"),
      defineInstancePolyfill: wrapNamespace("defineInstancePolyfill"),
      defineInstanceAndStatic: wrapNamespace("defineInstanceAndStatic"),
      defineInstanceWithArguments: wrapNamespace("defineInstanceWithArguments")
    };
  }
});

// node_modules/sugar/common/internal/collectSimilarMethods.js
var require_collectSimilarMethods = __commonJS({
  "node_modules/sugar/common/internal/collectSimilarMethods.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var spaceSplit = require_spaceSplit();
    var classChecks = require_classChecks();
    var isString = classChecks.isString;
    function collectSimilarMethods(set, fn) {
      var methods = {};
      if (isString(set)) {
        set = spaceSplit(set);
      }
      forEach(set, function(el, i) {
        fn(methods, el, i);
      });
      return methods;
    }
    module.exports = collectSimilarMethods;
  }
});

// node_modules/sugar/common/internal/defineInstanceSimilar.js
var require_defineInstanceSimilar = __commonJS({
  "node_modules/sugar/common/internal/defineInstanceSimilar.js"(exports, module) {
    "use strict";
    var methodDefineAliases = require_methodDefineAliases();
    var collectSimilarMethods = require_collectSimilarMethods();
    var defineInstance = methodDefineAliases.defineInstance;
    function defineInstanceSimilar(sugarNamespace, set, fn, flags) {
      defineInstance(sugarNamespace, collectSimilarMethods(set, fn), flags);
    }
    module.exports = defineInstanceSimilar;
  }
});

// node_modules/sugar/number/internal/buildMathAliases.js
var require_buildMathAliases = __commonJS({
  "node_modules/sugar/number/internal/buildMathAliases.js"(exports, module) {
    "use strict";
    var namespaceAliases = require_namespaceAliases();
    var defineInstanceSimilar = require_defineInstanceSimilar();
    var sugarNumber = namespaceAliases.sugarNumber;
    function buildMathAliases() {
      defineInstanceSimilar(sugarNumber, "abs pow sin asin cos acos tan atan exp pow sqrt", function(methods, name) {
        methods[name] = function(n, arg) {
          return Math[name](n.valueOf(), arg);
        };
      });
    }
    module.exports = buildMathAliases;
  }
});

// node_modules/sugar/number/build/buildMathAliasesCall.js
var require_buildMathAliasesCall = __commonJS({
  "node_modules/sugar/number/build/buildMathAliasesCall.js"() {
    "use strict";
    var buildMathAliases = require_buildMathAliases();
    buildMathAliases();
  }
});

// node_modules/sugar/number/abs.js
var require_abs = __commonJS({
  "node_modules/sugar/number/abs.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.abs;
  }
});

// node_modules/sugar/number/acos.js
var require_acos = __commonJS({
  "node_modules/sugar/number/acos.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.acos;
  }
});

// node_modules/sugar/number/asin.js
var require_asin = __commonJS({
  "node_modules/sugar/number/asin.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.asin;
  }
});

// node_modules/sugar/number/atan.js
var require_atan = __commonJS({
  "node_modules/sugar/number/atan.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.atan;
  }
});

// node_modules/sugar/number/bytes.js
var require_bytes = __commonJS({
  "node_modules/sugar/number/bytes.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var AbbreviationUnits = require_AbbreviationUnits();
    var abbreviateNumber = require_abbreviateNumber();
    var MEMORY_UNITS = AbbreviationUnits.MEMORY_UNITS;
    var MEMORY_BINARY_UNITS = AbbreviationUnits.MEMORY_BINARY_UNITS;
    Sugar.Number.defineInstance({
      "bytes": function(n, precision, binary, units) {
        if (units === "binary" || !units && binary) {
          units = MEMORY_BINARY_UNITS;
        } else if (units === "si" || !units) {
          units = MEMORY_UNITS;
        }
        return abbreviateNumber(n, precision, units, binary) + "B";
      }
    });
    module.exports = Sugar.Number.bytes;
  }
});

// node_modules/sugar/number/internal/createRoundingFunction.js
var require_createRoundingFunction = __commonJS({
  "node_modules/sugar/number/internal/createRoundingFunction.js"(exports, module) {
    "use strict";
    var withPrecision = require_withPrecision();
    function createRoundingFunction(fn) {
      return function(n, precision) {
        return precision ? withPrecision(n, precision, fn) : fn(n);
      };
    }
    module.exports = createRoundingFunction;
  }
});

// node_modules/sugar/number/ceil.js
var require_ceil = __commonJS({
  "node_modules/sugar/number/ceil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var mathAliases = require_mathAliases();
    var createRoundingFunction = require_createRoundingFunction();
    var ceil = mathAliases.ceil;
    Sugar.Number.defineInstance({
      "ceil": createRoundingFunction(ceil)
    });
    module.exports = Sugar.Number.ceil;
  }
});

// node_modules/sugar/number/chr.js
var require_chr2 = __commonJS({
  "node_modules/sugar/number/chr.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var chr = require_chr();
    Sugar.Number.defineInstance({
      "chr": function(n) {
        return chr(n);
      }
    });
    module.exports = Sugar.Number.chr;
  }
});

// node_modules/sugar/number/cos.js
var require_cos = __commonJS({
  "node_modules/sugar/number/cos.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.cos;
  }
});

// node_modules/sugar/number/exp.js
var require_exp = __commonJS({
  "node_modules/sugar/number/exp.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.exp;
  }
});

// node_modules/sugar/number/floor.js
var require_floor = __commonJS({
  "node_modules/sugar/number/floor.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var mathAliases = require_mathAliases();
    var createRoundingFunction = require_createRoundingFunction();
    var floor = mathAliases.floor;
    Sugar.Number.defineInstance({
      "floor": createRoundingFunction(floor)
    });
    module.exports = Sugar.Number.floor;
  }
});

// node_modules/sugar/number/format.js
var require_format2 = __commonJS({
  "node_modules/sugar/number/format.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var numberFormat = require_numberFormat();
    Sugar.Number.defineInstance({
      "format": function(n, place) {
        return numberFormat(n, place);
      }
    });
    module.exports = Sugar.Number.format;
  }
});

// node_modules/sugar/common/internal/padNumber.js
var require_padNumber = __commonJS({
  "node_modules/sugar/common/internal/padNumber.js"(exports, module) {
    "use strict";
    var mathAliases = require_mathAliases();
    var repeatString = require_repeatString();
    var abs = mathAliases.abs;
    function padNumber(num, place, sign, base, replacement) {
      var str = abs(num).toString(base || 10);
      str = repeatString(replacement || "0", place - str.replace(/\.\d+/, "").length) + str;
      if (sign || num < 0) {
        str = (num < 0 ? "-" : "+") + str;
      }
      return str;
    }
    module.exports = padNumber;
  }
});

// node_modules/sugar/number/hex.js
var require_hex = __commonJS({
  "node_modules/sugar/number/hex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var padNumber = require_padNumber();
    Sugar.Number.defineInstance({
      "hex": function(n, pad) {
        return padNumber(n, pad || 1, false, 16);
      }
    });
    module.exports = Sugar.Number.hex;
  }
});

// node_modules/sugar/number/internal/isMultipleOf.js
var require_isMultipleOf = __commonJS({
  "node_modules/sugar/number/internal/isMultipleOf.js"(exports, module) {
    "use strict";
    function isMultipleOf(n1, n2) {
      return n1 % n2 === 0;
    }
    module.exports = isMultipleOf;
  }
});

// node_modules/sugar/number/isEven.js
var require_isEven = __commonJS({
  "node_modules/sugar/number/isEven.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isMultipleOf = require_isMultipleOf();
    Sugar.Number.defineInstance({
      "isEven": function(n) {
        return isMultipleOf(n, 2);
      }
    });
    module.exports = Sugar.Number.isEven;
  }
});

// node_modules/sugar/number/internal/isInteger.js
var require_isInteger = __commonJS({
  "node_modules/sugar/number/internal/isInteger.js"(exports, module) {
    "use strict";
    function isInteger(n) {
      return n % 1 === 0;
    }
    module.exports = isInteger;
  }
});

// node_modules/sugar/number/isInteger.js
var require_isInteger2 = __commonJS({
  "node_modules/sugar/number/isInteger.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isInteger = require_isInteger();
    Sugar.Number.defineInstance({
      "isInteger": function(n) {
        return isInteger(n);
      }
    });
    module.exports = Sugar.Number.isInteger;
  }
});

// node_modules/sugar/number/isMultipleOf.js
var require_isMultipleOf2 = __commonJS({
  "node_modules/sugar/number/isMultipleOf.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isMultipleOf = require_isMultipleOf();
    Sugar.Number.defineInstance({
      "isMultipleOf": function(n, num) {
        return isMultipleOf(n, num);
      }
    });
    module.exports = Sugar.Number.isMultipleOf;
  }
});

// node_modules/sugar/number/isOdd.js
var require_isOdd = __commonJS({
  "node_modules/sugar/number/isOdd.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isInteger = require_isInteger();
    var isMultipleOf = require_isMultipleOf();
    Sugar.Number.defineInstance({
      "isOdd": function(n) {
        return isInteger(n) && !isMultipleOf(n, 2);
      }
    });
    module.exports = Sugar.Number.isOdd;
  }
});

// node_modules/sugar/number/log.js
var require_log = __commonJS({
  "node_modules/sugar/number/log.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.Number.defineInstance({
      "log": function(n, base) {
        return Math.log(n) / (base ? Math.log(base) : 1);
      }
    });
    module.exports = Sugar.Number.log;
  }
});

// node_modules/sugar/number/metric.js
var require_metric = __commonJS({
  "node_modules/sugar/number/metric.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var AbbreviationUnits = require_AbbreviationUnits();
    var abbreviateNumber = require_abbreviateNumber();
    var METRIC_UNITS_SHORT = AbbreviationUnits.METRIC_UNITS_SHORT;
    var METRIC_UNITS_FULL = AbbreviationUnits.METRIC_UNITS_FULL;
    Sugar.Number.defineInstance({
      "metric": function(n, precision, units) {
        if (units === "all") {
          units = METRIC_UNITS_FULL;
        } else if (!units) {
          units = METRIC_UNITS_SHORT;
        }
        return abbreviateNumber(n, precision, units);
      }
    });
    module.exports = Sugar.Number.metric;
  }
});

// node_modules/sugar/common/internal/getOrdinalSuffix.js
var require_getOrdinalSuffix = __commonJS({
  "node_modules/sugar/common/internal/getOrdinalSuffix.js"(exports, module) {
    "use strict";
    function getOrdinalSuffix(num) {
      if (num >= 11 && num <= 13) {
        return "th";
      } else {
        switch (num % 10) {
          case 1:
            return "st";
          case 2:
            return "nd";
          case 3:
            return "rd";
          default:
            return "th";
        }
      }
    }
    module.exports = getOrdinalSuffix;
  }
});

// node_modules/sugar/number/ordinalize.js
var require_ordinalize = __commonJS({
  "node_modules/sugar/number/ordinalize.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var mathAliases = require_mathAliases();
    var getOrdinalSuffix = require_getOrdinalSuffix();
    var abs = mathAliases.abs;
    Sugar.Number.defineInstance({
      "ordinalize": function(n) {
        var num = abs(n), last = +num.toString().slice(-2);
        return n + getOrdinalSuffix(last);
      }
    });
    module.exports = Sugar.Number.ordinalize;
  }
});

// node_modules/sugar/number/pad.js
var require_pad2 = __commonJS({
  "node_modules/sugar/number/pad.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var padNumber = require_padNumber();
    Sugar.Number.defineInstance({
      "pad": function(n, place, sign, base) {
        return padNumber(n, place, sign, base);
      }
    });
    module.exports = Sugar.Number.pad;
  }
});

// node_modules/sugar/number/pow.js
var require_pow = __commonJS({
  "node_modules/sugar/number/pow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.pow;
  }
});

// node_modules/sugar/number/round.js
var require_round = __commonJS({
  "node_modules/sugar/number/round.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var mathAliases = require_mathAliases();
    var createRoundingFunction = require_createRoundingFunction();
    var round = mathAliases.round;
    Sugar.Number.defineInstance({
      "round": createRoundingFunction(round)
    });
    module.exports = Sugar.Number.round;
  }
});

// node_modules/sugar/number/sin.js
var require_sin = __commonJS({
  "node_modules/sugar/number/sin.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.sin;
  }
});

// node_modules/sugar/number/sqrt.js
var require_sqrt = __commonJS({
  "node_modules/sugar/number/sqrt.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.sqrt;
  }
});

// node_modules/sugar/number/tan.js
var require_tan = __commonJS({
  "node_modules/sugar/number/tan.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildMathAliasesCall();
    module.exports = Sugar.Number.tan;
  }
});

// node_modules/sugar/number/times.js
var require_times = __commonJS({
  "node_modules/sugar/number/times.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isDefined = require_isDefined();
    Sugar.Number.defineInstance({
      "times": function(n, indexMapFn) {
        var arr, result;
        for (var i = 0; i < n; i++) {
          result = indexMapFn.call(n, i);
          if (isDefined(result)) {
            if (!arr) {
              arr = [];
            }
            arr.push(result);
          }
        }
        return arr;
      }
    });
    module.exports = Sugar.Number.times;
  }
});

// node_modules/sugar/number/toNumber.js
var require_toNumber2 = __commonJS({
  "node_modules/sugar/number/toNumber.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.Number.defineInstance({
      "toNumber": function(n) {
        return n.valueOf();
      }
    });
    module.exports = Sugar.Number.toNumber;
  }
});

// node_modules/sugar/number/getOption.js
var require_getOption = __commonJS({
  "node_modules/sugar/number/getOption.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var _numberOptions = require_numberOptions();
    module.exports = Sugar.Number.getOption;
  }
});

// node_modules/sugar/number/setOption.js
var require_setOption = __commonJS({
  "node_modules/sugar/number/setOption.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var _numberOptions = require_numberOptions();
    module.exports = Sugar.Number.setOption;
  }
});

// node_modules/sugar/number/index.js
var require_number = __commonJS({
  "node_modules/sugar/number/index.js"(exports, module) {
    "use strict";
    require_random();
    require_abbr();
    require_abs();
    require_acos();
    require_asin();
    require_atan();
    require_bytes();
    require_ceil();
    require_chr2();
    require_cos();
    require_exp();
    require_floor();
    require_format2();
    require_hex();
    require_isEven();
    require_isInteger2();
    require_isMultipleOf2();
    require_isOdd();
    require_log();
    require_metric();
    require_ordinalize();
    require_pad2();
    require_pow();
    require_round();
    require_sin();
    require_sqrt();
    require_tan();
    require_times();
    require_toNumber2();
    require_getOption();
    require_setOption();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/array/construct.js
var require_construct = __commonJS({
  "node_modules/sugar/array/construct.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var coercePositiveInteger = require_coercePositiveInteger();
    Sugar.Array.defineStatic({
      "construct": function(n, indexMapFn) {
        n = coercePositiveInteger(n);
        return Array.from(new Array(n), function(el, i) {
          return indexMapFn && indexMapFn(i);
        });
      }
    });
    module.exports = Sugar.Array.construct;
  }
});

// node_modules/sugar/array/internal/arrayClone.js
var require_arrayClone = __commonJS({
  "node_modules/sugar/array/internal/arrayClone.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    function arrayClone(arr) {
      var clone = new Array(arr.length);
      forEach(arr, function(el, i) {
        clone[i] = el;
      });
      return clone;
    }
    module.exports = arrayClone;
  }
});

// node_modules/sugar/array/internal/isArrayOrInherited.js
var require_isArrayOrInherited = __commonJS({
  "node_modules/sugar/array/internal/isArrayOrInherited.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isArray = classChecks.isArray;
    function isArrayOrInherited(obj) {
      return obj && obj.constructor && isArray(obj.constructor.prototype);
    }
    module.exports = isArrayOrInherited;
  }
});

// node_modules/sugar/array/internal/arrayCreate.js
var require_arrayCreate = __commonJS({
  "node_modules/sugar/array/internal/arrayCreate.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    var arrayClone = require_arrayClone();
    var classChecks = require_classChecks();
    var isObjectType = require_isObjectType();
    var isArrayOrInherited = require_isArrayOrInherited();
    var isString = classChecks.isString;
    function arrayCreate(obj, clone) {
      var arr;
      if (isArrayOrInherited(obj)) {
        arr = clone ? arrayClone(obj) : obj;
      } else if (isObjectType(obj) || isString(obj)) {
        arr = Array.from(obj);
      } else if (isDefined(obj)) {
        arr = [obj];
      }
      return arr || [];
    }
    module.exports = arrayCreate;
  }
});

// node_modules/sugar/common/internal/setChainableConstructor.js
var require_setChainableConstructor = __commonJS({
  "node_modules/sugar/common/internal/setChainableConstructor.js"(exports, module) {
    "use strict";
    function setChainableConstructor(sugarNamespace, createFn) {
      sugarNamespace.prototype.constructor = function() {
        return createFn.apply(this, arguments);
      };
    }
    module.exports = setChainableConstructor;
  }
});

// node_modules/sugar/array/internal/setArrayChainableConstructor.js
var require_setArrayChainableConstructor = __commonJS({
  "node_modules/sugar/array/internal/setArrayChainableConstructor.js"(exports, module) {
    "use strict";
    var arrayCreate = require_arrayCreate();
    var namespaceAliases = require_namespaceAliases();
    var setChainableConstructor = require_setChainableConstructor();
    var sugarArray = namespaceAliases.sugarArray;
    function setArrayChainableConstructor() {
      setChainableConstructor(sugarArray, arrayCreate);
    }
    module.exports = setArrayChainableConstructor;
  }
});

// node_modules/sugar/array/build/setArrayChainableConstructorCall.js
var require_setArrayChainableConstructorCall = __commonJS({
  "node_modules/sugar/array/build/setArrayChainableConstructorCall.js"() {
    "use strict";
    var setArrayChainableConstructor = require_setArrayChainableConstructor();
    setArrayChainableConstructor();
  }
});

// node_modules/sugar/array/create.js
var require_create = __commonJS({
  "node_modules/sugar/array/create.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayCreate = require_arrayCreate();
    require_setArrayChainableConstructorCall();
    Sugar.Array.defineStatic({
      "create": function(obj, clone) {
        return arrayCreate(obj, clone);
      }
    });
    module.exports = Sugar.Array.create;
  }
});

// node_modules/sugar/array/internal/arrayAppend.js
var require_arrayAppend = __commonJS({
  "node_modules/sugar/array/internal/arrayAppend.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    function arrayAppend(arr, el, index) {
      var spliceArgs;
      index = +index;
      if (isNaN(index)) {
        index = arr.length;
      }
      spliceArgs = [index, 0];
      if (isDefined(el)) {
        spliceArgs = spliceArgs.concat(el);
      }
      arr.splice.apply(arr, spliceArgs);
      return arr;
    }
    module.exports = arrayAppend;
  }
});

// node_modules/sugar/array/add.js
var require_add = __commonJS({
  "node_modules/sugar/array/add.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayClone = require_arrayClone();
    var arrayAppend = require_arrayAppend();
    Sugar.Array.defineInstance({
      "add": function(arr, item, index) {
        return arrayAppend(arrayClone(arr), item, index);
      }
    });
    module.exports = Sugar.Array.add;
  }
});

// node_modules/sugar/array/append.js
var require_append = __commonJS({
  "node_modules/sugar/array/append.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayAppend = require_arrayAppend();
    Sugar.Array.defineInstance({
      "append": function(arr, item, index) {
        return arrayAppend(arr, item, index);
      }
    });
    module.exports = Sugar.Array.append;
  }
});

// node_modules/sugar/array/at.js
var require_at2 = __commonJS({
  "node_modules/sugar/array/at.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getEntriesForIndexes = require_getEntriesForIndexes();
    Sugar.Array.defineInstance({
      "at": function(arr, index, loop) {
        return getEntriesForIndexes(arr, index, loop);
      }
    });
    module.exports = Sugar.Array.at;
  }
});

// node_modules/sugar/array/clone.js
var require_clone = __commonJS({
  "node_modules/sugar/array/clone.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayClone = require_arrayClone();
    Sugar.Array.defineInstance({
      "clone": function(arr) {
        return arrayClone(arr);
      }
    });
    module.exports = Sugar.Array.clone;
  }
});

// node_modules/sugar/array/internal/arrayCompact.js
var require_arrayCompact = __commonJS({
  "node_modules/sugar/array/internal/arrayCompact.js"(exports, module) {
    "use strict";
    var filter = require_filter();
    function arrayCompact(arr, all) {
      return filter(arr, function(el) {
        return el || !all && el != null && el.valueOf() === el.valueOf();
      });
    }
    module.exports = arrayCompact;
  }
});

// node_modules/sugar/array/compact.js
var require_compact2 = __commonJS({
  "node_modules/sugar/array/compact.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayCompact = require_arrayCompact();
    Sugar.Array.defineInstance({
      "compact": function(arr, all) {
        return arrayCompact(arr, all);
      }
    });
    module.exports = Sugar.Array.compact;
  }
});

// node_modules/sugar/common/internal/dateMatcher.js
var require_dateMatcher = __commonJS({
  "node_modules/sugar/common/internal/dateMatcher.js"(exports, module) {
    "use strict";
    function dateMatcher(d) {
      var ms = d.getTime();
      return function(el) {
        return !!(el && el.getTime) && el.getTime() === ms;
      };
    }
    module.exports = dateMatcher;
  }
});

// node_modules/sugar/common/internal/regexMatcher.js
var require_regexMatcher = __commonJS({
  "node_modules/sugar/common/internal/regexMatcher.js"(exports, module) {
    "use strict";
    function regexMatcher(reg) {
      reg = RegExp(reg);
      return function(el) {
        return reg.test(el);
      };
    }
    module.exports = regexMatcher;
  }
});

// node_modules/sugar/common/internal/getKeys.js
var require_getKeys = __commonJS({
  "node_modules/sugar/common/internal/getKeys.js"(exports, module) {
    "use strict";
    function getKeys(obj) {
      return Object.keys(obj);
    }
    module.exports = getKeys;
  }
});

// node_modules/sugar/common/internal/setToArray.js
var require_setToArray = __commonJS({
  "node_modules/sugar/common/internal/setToArray.js"(exports, module) {
    "use strict";
    function setToArray(set) {
      var arr = new Array(set.size), i = 0;
      set.forEach(function(val) {
        arr[i++] = val;
      });
      return arr;
    }
    module.exports = setToArray;
  }
});

// node_modules/sugar/common/internal/mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/sugar/common/internal/mapToArray.js"(exports, module) {
    "use strict";
    function mapToArray(map) {
      var arr = new Array(map.size), i = 0;
      map.forEach(function(val, key) {
        arr[i++] = [key, val];
      });
      return arr;
    }
    module.exports = mapToArray;
  }
});

// node_modules/sugar/common/internal/iterateWithCyclicCheck.js
var require_iterateWithCyclicCheck = __commonJS({
  "node_modules/sugar/common/internal/iterateWithCyclicCheck.js"(exports, module) {
    "use strict";
    var getKeys = require_getKeys();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function iterateWithCyclicCheck(obj, sortedKeys, stack, fn) {
      function next(val, key) {
        var cyc = false;
        if (stack.length > 1) {
          var i = stack.length;
          while (i--) {
            if (stack[i] === val) {
              cyc = true;
            }
          }
        }
        stack.push(val);
        fn(key, val, cyc, stack);
        stack.pop();
      }
      function iterateWithSortedKeys() {
        var arr = getKeys(obj).sort(), key;
        for (var i = 0; i < arr.length; i++) {
          key = arr[i];
          next(obj[key], arr[i]);
        }
      }
      if (!stack) {
        stack = [];
      }
      if (sortedKeys) {
        iterateWithSortedKeys();
      } else {
        forEachProperty(obj, next);
      }
    }
    module.exports = iterateWithCyclicCheck;
  }
});

// node_modules/sugar/common/internal/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/sugar/common/internal/isEqual.js"(exports, module) {
    "use strict";
    var getKeys = require_getKeys();
    var setToArray = require_setToArray();
    var mapToArray = require_mapToArray();
    var classChecks = require_classChecks();
    var isObjectType = require_isObjectType();
    var coreUtilityAliases = require_coreUtilityAliases();
    var iterateWithCyclicCheck = require_iterateWithCyclicCheck();
    var classToString = coreUtilityAliases.classToString;
    var isSerializable = classChecks.isSerializable;
    var isSet = classChecks.isSet;
    var isMap = classChecks.isMap;
    var isError = classChecks.isError;
    function isEqual(a, b, stack) {
      var aClass, bClass;
      if (a === b) {
        return a !== 0 || 1 / a === 1 / b;
      }
      aClass = classToString(a);
      bClass = classToString(b);
      if (aClass !== bClass) {
        return false;
      }
      if (isSerializable(a, aClass) && isSerializable(b, bClass)) {
        return objectIsEqual(a, b, aClass, stack);
      } else if (isSet(a, aClass) && isSet(b, bClass)) {
        return a.size === b.size && isEqual(setToArray(a), setToArray(b), stack);
      } else if (isMap(a, aClass) && isMap(b, bClass)) {
        return a.size === b.size && isEqual(mapToArray(a), mapToArray(b), stack);
      } else if (isError(a, aClass) && isError(b, bClass)) {
        return a.toString() === b.toString();
      }
      return false;
    }
    function objectIsEqual(a, b, aClass, stack) {
      var aType = typeof a, bType = typeof b, propsEqual, count;
      if (aType !== bType) {
        return false;
      }
      if (isObjectType(a.valueOf())) {
        if (a.length !== b.length) {
          return false;
        }
        count = 0;
        propsEqual = true;
        iterateWithCyclicCheck(a, false, stack, function(key, val, cyc, stack2) {
          if (!cyc && (!(key in b) || !isEqual(val, b[key], stack2))) {
            propsEqual = false;
          }
          count++;
          return propsEqual;
        });
        if (!propsEqual || count !== getKeys(b).length) {
          return false;
        }
      }
      return a.valueOf().toString() === b.valueOf().toString();
    }
    module.exports = isEqual;
  }
});

// node_modules/sugar/common/internal/defaultMatcher.js
var require_defaultMatcher = __commonJS({
  "node_modules/sugar/common/internal/defaultMatcher.js"(exports, module) {
    "use strict";
    var isEqual = require_isEqual();
    function defaultMatcher(f) {
      return function(el) {
        return isEqual(el, f);
      };
    }
    module.exports = defaultMatcher;
  }
});

// node_modules/sugar/common/internal/functionMatcher.js
var require_functionMatcher = __commonJS({
  "node_modules/sugar/common/internal/functionMatcher.js"(exports, module) {
    "use strict";
    function functionMatcher(fn) {
      return function(el, i, arr) {
        return el === fn || fn.call(arr, el, i, arr);
      };
    }
    module.exports = functionMatcher;
  }
});

// node_modules/sugar/common/internal/getMatcher.js
var require_getMatcher = __commonJS({
  "node_modules/sugar/common/internal/getMatcher.js"(exports, module) {
    "use strict";
    var isPrimitive = require_isPrimitive();
    var classChecks = require_classChecks();
    var dateMatcher = require_dateMatcher();
    var regexMatcher = require_regexMatcher();
    var isObjectType = require_isObjectType();
    var isPlainObject = require_isPlainObject();
    var defaultMatcher = require_defaultMatcher();
    var functionMatcher = require_functionMatcher();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwn = coreUtilityAliases.getOwn;
    var classToString = coreUtilityAliases.classToString;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    var isDate = classChecks.isDate;
    var isRegExp = classChecks.isRegExp;
    var isFunction = classChecks.isFunction;
    function getMatcher(f) {
      if (!isPrimitive(f)) {
        var className = classToString(f);
        if (isRegExp(f, className)) {
          return regexMatcher(f);
        } else if (isDate(f, className)) {
          return dateMatcher(f);
        } else if (isFunction(f, className)) {
          return functionMatcher(f);
        } else if (isPlainObject(f, className)) {
          return fuzzyMatcher(f);
        }
      }
      return defaultMatcher(f);
    }
    function fuzzyMatcher(obj) {
      var matchers = {};
      return function(el, i, arr) {
        var matched = true;
        if (!isObjectType(el)) {
          return false;
        }
        forEachProperty(obj, function(val, key) {
          matchers[key] = getOwn(matchers, key) || getMatcher(val);
          if (matchers[key].call(arr, el[key], i, arr) === false) {
            matched = false;
          }
          return matched;
        });
        return matched;
      };
    }
    module.exports = getMatcher;
  }
});

// node_modules/sugar/array/internal/arrayExclude.js
var require_arrayExclude = __commonJS({
  "node_modules/sugar/array/internal/arrayExclude.js"(exports, module) {
    "use strict";
    var getMatcher = require_getMatcher();
    function arrayExclude(arr, f) {
      var result = [], matcher = getMatcher(f);
      for (var i = 0; i < arr.length; i++) {
        if (!matcher(arr[i], i, arr)) {
          result.push(arr[i]);
        }
      }
      return result;
    }
    module.exports = arrayExclude;
  }
});

// node_modules/sugar/array/exclude.js
var require_exclude = __commonJS({
  "node_modules/sugar/array/exclude.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayExclude = require_arrayExclude();
    Sugar.Array.defineInstance({
      "exclude": function(arr, f) {
        return arrayExclude(arr, f);
      }
    });
    module.exports = Sugar.Array.exclude;
  }
});

// node_modules/sugar/array/first.js
var require_first2 = __commonJS({
  "node_modules/sugar/array/first.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    Sugar.Array.defineInstance({
      "first": function(arr, num) {
        if (isUndefined(num))
          return arr[0];
        if (num < 0)
          num = 0;
        return arr.slice(0, num);
      }
    });
    module.exports = Sugar.Array.first;
  }
});

// node_modules/sugar/array/internal/arrayFlatten.js
var require_arrayFlatten = __commonJS({
  "node_modules/sugar/array/internal/arrayFlatten.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var classChecks = require_classChecks();
    var isArray = classChecks.isArray;
    function arrayFlatten(arr, level, current) {
      var result = [];
      level = level || Infinity;
      current = current || 0;
      forEach(arr, function(el) {
        if (isArray(el) && current < level) {
          result = result.concat(arrayFlatten(el, level, current + 1));
        } else {
          result.push(el);
        }
      });
      return result;
    }
    module.exports = arrayFlatten;
  }
});

// node_modules/sugar/array/flatten.js
var require_flatten = __commonJS({
  "node_modules/sugar/array/flatten.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayFlatten = require_arrayFlatten();
    Sugar.Array.defineInstance({
      "flatten": function(arr, limit) {
        return arrayFlatten(arr, limit);
      }
    });
    module.exports = Sugar.Array.flatten;
  }
});

// node_modules/sugar/array/from.js
var require_from2 = __commonJS({
  "node_modules/sugar/array/from.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.Array.defineInstance({
      "from": function(arr, num) {
        return arr.slice(num);
      }
    });
    module.exports = Sugar.Array.from;
  }
});

// node_modules/sugar/common/internal/mapWithShortcuts.js
var require_mapWithShortcuts = __commonJS({
  "node_modules/sugar/common/internal/mapWithShortcuts.js"(exports, module) {
    "use strict";
    var map = require_map();
    var classChecks = require_classChecks();
    var deepGetProperty = require_deepGetProperty();
    var isFunction = classChecks.isFunction;
    var isArray = classChecks.isArray;
    function mapWithShortcuts(el, f, context, mapArgs) {
      if (!f) {
        return el;
      } else if (f.apply) {
        return f.apply(context, mapArgs);
      } else if (isArray(f)) {
        return map(f, function(m) {
          return mapWithShortcuts(el, m, context, mapArgs);
        });
      } else if (isFunction(el[f])) {
        return el[f].call(el);
      } else {
        return deepGetProperty(el, f, true);
      }
    }
    module.exports = mapWithShortcuts;
  }
});

// node_modules/sugar/array/internal/arrayGroupBy.js
var require_arrayGroupBy = __commonJS({
  "node_modules/sugar/array/internal/arrayGroupBy.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var mapWithShortcuts = require_mapWithShortcuts();
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function arrayGroupBy(arr, map, fn) {
      var result = {}, key;
      forEach(arr, function(el, i) {
        key = mapWithShortcuts(el, map, arr, [el, i, arr]);
        if (!hasOwn(result, key)) {
          result[key] = [];
        }
        result[key].push(el);
      });
      if (fn) {
        forEachProperty(result, fn);
      }
      return result;
    }
    module.exports = arrayGroupBy;
  }
});

// node_modules/sugar/array/groupBy.js
var require_groupBy = __commonJS({
  "node_modules/sugar/array/groupBy.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayGroupBy = require_arrayGroupBy();
    Sugar.Array.defineInstance({
      "groupBy": function(arr, map, groupFn) {
        return arrayGroupBy(arr, map, groupFn);
      }
    });
    module.exports = Sugar.Array.groupBy;
  }
});

// node_modules/sugar/common/internal/simpleRepeat.js
var require_simpleRepeat = __commonJS({
  "node_modules/sugar/common/internal/simpleRepeat.js"(exports, module) {
    "use strict";
    function simpleRepeat(n, fn) {
      for (var i = 0; i < n; i++) {
        fn(i);
      }
    }
    module.exports = simpleRepeat;
  }
});

// node_modules/sugar/array/inGroups.js
var require_inGroups = __commonJS({
  "node_modules/sugar/array/inGroups.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isDefined = require_isDefined();
    var mathAliases = require_mathAliases();
    var simpleRepeat = require_simpleRepeat();
    var ceil = mathAliases.ceil;
    Sugar.Array.defineInstance({
      "inGroups": function(arr, num, padding) {
        var pad = isDefined(padding);
        var result = new Array(num);
        var divisor = ceil(arr.length / num);
        simpleRepeat(num, function(i) {
          var index = i * divisor;
          var group = arr.slice(index, index + divisor);
          if (pad && group.length < divisor) {
            simpleRepeat(divisor - group.length, function() {
              group.push(padding);
            });
          }
          result[i] = group;
        });
        return result;
      }
    });
    module.exports = Sugar.Array.inGroups;
  }
});

// node_modules/sugar/array/inGroupsOf.js
var require_inGroupsOf = __commonJS({
  "node_modules/sugar/array/inGroupsOf.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    var mathAliases = require_mathAliases();
    var simpleRepeat = require_simpleRepeat();
    var ceil = mathAliases.ceil;
    Sugar.Array.defineInstance({
      "inGroupsOf": function(arr, num, padding) {
        var result = [], len = arr.length, group;
        if (len === 0 || num === 0)
          return arr;
        if (isUndefined(num))
          num = 1;
        if (isUndefined(padding))
          padding = null;
        simpleRepeat(ceil(len / num), function(i) {
          group = arr.slice(num * i, num * i + num);
          while (group.length < num) {
            group.push(padding);
          }
          result.push(group);
        });
        return result;
      }
    });
    module.exports = Sugar.Array.inGroupsOf;
  }
});

// node_modules/sugar/array/internal/arrayWrap.js
var require_arrayWrap = __commonJS({
  "node_modules/sugar/array/internal/arrayWrap.js"(exports, module) {
    "use strict";
    function arrayWrap(obj) {
      var arr = [];
      arr.push(obj);
      return arr;
    }
    module.exports = arrayWrap;
  }
});

// node_modules/sugar/common/internal/isRealNaN.js
var require_isRealNaN = __commonJS({
  "node_modules/sugar/common/internal/isRealNaN.js"(exports, module) {
    "use strict";
    function isRealNaN(obj) {
      return obj != null && obj !== obj;
    }
    module.exports = isRealNaN;
  }
});

// node_modules/sugar/common/internal/serializeInternal.js
var require_serializeInternal = __commonJS({
  "node_modules/sugar/common/internal/serializeInternal.js"(exports, module) {
    "use strict";
    var indexOf = require_indexOf();
    var isRealNaN = require_isRealNaN();
    var isPrimitive = require_isPrimitive();
    var classChecks = require_classChecks();
    var isObjectType = require_isObjectType();
    var coreUtilityAliases = require_coreUtilityAliases();
    var iterateWithCyclicCheck = require_iterateWithCyclicCheck();
    var classToString = coreUtilityAliases.classToString;
    var isSerializable = classChecks.isSerializable;
    function serializeInternal(obj, refs, stack) {
      var type = typeof obj, sign = "", className, value, ref;
      if (1 / obj === -Infinity) {
        sign = "-";
      }
      if (isPrimitive(obj, type) && !isRealNaN(obj)) {
        return type + sign + obj;
      }
      className = classToString(obj);
      if (!isSerializable(obj, className)) {
        ref = indexOf(refs, obj);
        if (ref === -1) {
          ref = refs.length;
          refs.push(obj);
        }
        return ref;
      } else if (isObjectType(obj)) {
        value = serializeDeep(obj, refs, stack) + obj.toString();
      } else if (obj.valueOf) {
        value = obj.valueOf();
      }
      return type + className + sign + value;
    }
    function serializeDeep(obj, refs, stack) {
      var result = "";
      iterateWithCyclicCheck(obj, true, stack, function(key, val, cyc, stack2) {
        result += cyc ? "CYC" : key + serializeInternal(val, refs, stack2);
      });
      return result;
    }
    module.exports = serializeInternal;
  }
});

// node_modules/sugar/array/internal/arrayIntersectOrSubtract.js
var require_arrayIntersectOrSubtract = __commonJS({
  "node_modules/sugar/array/internal/arrayIntersectOrSubtract.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var arrayWrap = require_arrayWrap();
    var classChecks = require_classChecks();
    var serializeInternal = require_serializeInternal();
    var coreUtilityAliases = require_coreUtilityAliases();
    var isArray = classChecks.isArray;
    var hasOwn = coreUtilityAliases.hasOwn;
    function arrayIntersectOrSubtract(arr1, arr2, subtract) {
      var result = [], obj = {}, refs = [];
      if (!isArray(arr2)) {
        arr2 = arrayWrap(arr2);
      }
      forEach(arr2, function(el) {
        obj[serializeInternal(el, refs)] = true;
      });
      forEach(arr1, function(el) {
        var key = serializeInternal(el, refs);
        if (hasOwn(obj, key) !== subtract) {
          delete obj[key];
          result.push(el);
        }
      });
      return result;
    }
    module.exports = arrayIntersectOrSubtract;
  }
});

// node_modules/sugar/array/intersect.js
var require_intersect = __commonJS({
  "node_modules/sugar/array/intersect.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayIntersectOrSubtract = require_arrayIntersectOrSubtract();
    Sugar.Array.defineInstance({
      "intersect": function(arr1, arr2) {
        return arrayIntersectOrSubtract(arr1, arr2, false);
      }
    });
    module.exports = Sugar.Array.intersect;
  }
});

// node_modules/sugar/array/isEmpty.js
var require_isEmpty2 = __commonJS({
  "node_modules/sugar/array/isEmpty.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.Array.defineInstance({
      "isEmpty": function(arr) {
        return arr.length === 0;
      }
    });
    module.exports = Sugar.Array.isEmpty;
  }
});

// node_modules/sugar/array/isEqual.js
var require_isEqual2 = __commonJS({
  "node_modules/sugar/array/isEqual.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isEqual = require_isEqual();
    Sugar.Array.defineInstance({
      "isEqual": function(a, b) {
        return isEqual(a, b);
      }
    });
    module.exports = Sugar.Array.isEqual;
  }
});

// node_modules/sugar/array/last.js
var require_last2 = __commonJS({
  "node_modules/sugar/array/last.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    Sugar.Array.defineInstance({
      "last": function(arr, num) {
        if (isUndefined(num))
          return arr[arr.length - 1];
        var start = arr.length - num < 0 ? 0 : arr.length - num;
        return arr.slice(start);
      }
    });
    module.exports = Sugar.Array.last;
  }
});

// node_modules/sugar/array/internal/arrayRemove.js
var require_arrayRemove = __commonJS({
  "node_modules/sugar/array/internal/arrayRemove.js"(exports, module) {
    "use strict";
    var getMatcher = require_getMatcher();
    function arrayRemove(arr, f) {
      var matcher = getMatcher(f), i = 0;
      while (i < arr.length) {
        if (matcher(arr[i], i, arr)) {
          arr.splice(i, 1);
        } else {
          i++;
        }
      }
      return arr;
    }
    module.exports = arrayRemove;
  }
});

// node_modules/sugar/array/remove.js
var require_remove2 = __commonJS({
  "node_modules/sugar/array/remove.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayRemove = require_arrayRemove();
    Sugar.Array.defineInstance({
      "remove": function(arr, f) {
        return arrayRemove(arr, f);
      }
    });
    module.exports = Sugar.Array.remove;
  }
});

// node_modules/sugar/array/removeAt.js
var require_removeAt = __commonJS({
  "node_modules/sugar/array/removeAt.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    Sugar.Array.defineInstance({
      "removeAt": function(arr, start, end) {
        if (isUndefined(start))
          return arr;
        if (isUndefined(end))
          end = start;
        arr.splice(start, end - start + 1);
        return arr;
      }
    });
    module.exports = Sugar.Array.removeAt;
  }
});

// node_modules/sugar/array/sample.js
var require_sample = __commonJS({
  "node_modules/sugar/array/sample.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var trunc = require_trunc();
    var arrayClone = require_arrayClone();
    var classChecks = require_classChecks();
    var isUndefined = require_isUndefined();
    var mathAliases = require_mathAliases();
    var isBoolean = classChecks.isBoolean;
    var min = mathAliases.min;
    Sugar.Array.defineInstance({
      "sample": function(arr, arg1, arg2) {
        var result = [], num, remove, single;
        if (isBoolean(arg1)) {
          remove = arg1;
        } else {
          num = arg1;
          remove = arg2;
        }
        if (isUndefined(num)) {
          num = 1;
          single = true;
        }
        if (!remove) {
          arr = arrayClone(arr);
        }
        num = min(num, arr.length);
        for (var i = 0, index; i < num; i++) {
          index = trunc(Math.random() * arr.length);
          result.push(arr[index]);
          arr.splice(index, 1);
        }
        return single ? result[0] : result;
      }
    });
    module.exports = Sugar.Array.sample;
  }
});

// node_modules/sugar/array/internal/arrayShuffle.js
var require_arrayShuffle = __commonJS({
  "node_modules/sugar/array/internal/arrayShuffle.js"(exports, module) {
    "use strict";
    var arrayClone = require_arrayClone();
    function arrayShuffle(arr) {
      arr = arrayClone(arr);
      var i = arr.length, j, x;
      while (i) {
        j = Math.random() * i | 0;
        x = arr[--i];
        arr[i] = arr[j];
        arr[j] = x;
      }
      return arr;
    }
    module.exports = arrayShuffle;
  }
});

// node_modules/sugar/array/shuffle.js
var require_shuffle = __commonJS({
  "node_modules/sugar/array/shuffle.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayShuffle = require_arrayShuffle();
    Sugar.Array.defineInstance({
      "shuffle": function(arr) {
        return arrayShuffle(arr);
      }
    });
    module.exports = Sugar.Array.shuffle;
  }
});

// node_modules/sugar/array/internal/getSortOrder.js
var require_getSortOrder = __commonJS({
  "node_modules/sugar/array/internal/getSortOrder.js"(exports, module) {
    "use strict";
    var map = require_map();
    function getSortOrder() {
      var order = "AÁÀÂÃĄBCĆČÇDĎÐEÉÈĚÊËĘFGĞHıIÍÌİÎÏJKLŁMNŃŇÑOÓÒÔPQRŘSŚŠŞTŤUÚÙŮÛÜVWXYÝZŹŻŽÞÆŒØÕÅÄÖ";
      return map(order.split(""), function(str) {
        return str + str.toLowerCase();
      }).join("");
    }
    module.exports = getSortOrder;
  }
});

// node_modules/sugar/array/var/HALF_WIDTH_NINE.js
var require_HALF_WIDTH_NINE = __commonJS({
  "node_modules/sugar/array/var/HALF_WIDTH_NINE.js"(exports, module) {
    "use strict";
    module.exports = 57;
  }
});

// node_modules/sugar/array/var/FULL_WIDTH_NINE.js
var require_FULL_WIDTH_NINE = __commonJS({
  "node_modules/sugar/array/var/FULL_WIDTH_NINE.js"(exports, module) {
    "use strict";
    module.exports = 65305;
  }
});

// node_modules/sugar/array/internal/codeIsNumeral.js
var require_codeIsNumeral = __commonJS({
  "node_modules/sugar/array/internal/codeIsNumeral.js"(exports, module) {
    "use strict";
    var HALF_WIDTH_NINE = require_HALF_WIDTH_NINE();
    var FULL_WIDTH_NINE = require_FULL_WIDTH_NINE();
    var CommonChars = require_CommonChars();
    var HALF_WIDTH_ZERO = CommonChars.HALF_WIDTH_ZERO;
    var FULL_WIDTH_ZERO = CommonChars.FULL_WIDTH_ZERO;
    function codeIsNumeral(code) {
      return code >= HALF_WIDTH_ZERO && code <= HALF_WIDTH_NINE || code >= FULL_WIDTH_ZERO && code <= FULL_WIDTH_NINE;
    }
    module.exports = codeIsNumeral;
  }
});

// node_modules/sugar/array/internal/getSortOrderIndex.js
var require_getSortOrderIndex = __commonJS({
  "node_modules/sugar/array/internal/getSortOrderIndex.js"(exports, module) {
    "use strict";
    function getSortOrderIndex(chr, sortOrder) {
      if (!chr) {
        return null;
      } else {
        return sortOrder.indexOf(chr);
      }
    }
    module.exports = getSortOrderIndex;
  }
});

// node_modules/sugar/array/internal/getSortEquivalents.js
var require_getSortEquivalents = __commonJS({
  "node_modules/sugar/array/internal/getSortEquivalents.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var spaceSplit = require_spaceSplit();
    function getSortEquivalents() {
      var equivalents = {};
      forEach(spaceSplit("AÁÀÂÃÄ CÇ EÉÈÊË IÍÌİÎÏ OÓÒÔÕÖ Sß UÚÙÛÜ"), function(set) {
        var first = set.charAt(0);
        forEach(set.slice(1).split(""), function(chr) {
          equivalents[chr] = first;
          equivalents[chr.toLowerCase()] = first.toLowerCase();
        });
      });
      return equivalents;
    }
    module.exports = getSortEquivalents;
  }
});

// node_modules/sugar/array/internal/getCollationCharacter.js
var require_getCollationCharacter = __commonJS({
  "node_modules/sugar/array/internal/getCollationCharacter.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwn = coreUtilityAliases.getOwn;
    function getCollationCharacter(str, index, sortEquivalents) {
      var chr = str.charAt(index);
      return getOwn(sortEquivalents, chr) || chr;
    }
    module.exports = getCollationCharacter;
  }
});

// node_modules/sugar/array/internal/getCollationReadyString.js
var require_getCollationReadyString = __commonJS({
  "node_modules/sugar/array/internal/getCollationReadyString.js"(exports, module) {
    "use strict";
    function getCollationReadyString(str, sortIgnore, sortIgnoreCase) {
      if (sortIgnoreCase) {
        str = str.toLowerCase();
      }
      if (sortIgnore) {
        str = str.replace(sortIgnore, "");
      }
      return str;
    }
    module.exports = getCollationReadyString;
  }
});

// node_modules/sugar/array/var/ARRAY_OPTIONS.js
var require_ARRAY_OPTIONS = __commonJS({
  "node_modules/sugar/array/var/ARRAY_OPTIONS.js"(exports, module) {
    "use strict";
    var getSortOrder = require_getSortOrder();
    var codeIsNumeral = require_codeIsNumeral();
    var stringToNumber = require_stringToNumber();
    var namespaceAliases = require_namespaceAliases();
    var getSortOrderIndex = require_getSortOrderIndex();
    var getSortEquivalents = require_getSortEquivalents();
    var defineOptionsAccessor = require_defineOptionsAccessor();
    var getCollationCharacter = require_getCollationCharacter();
    var getCollationReadyString = require_getCollationReadyString();
    var sugarArray = namespaceAliases.sugarArray;
    var ARRAY_OPTIONS = {
      "sortIgnore": null,
      "sortNatural": true,
      "sortIgnoreCase": true,
      "sortOrder": getSortOrder(),
      "sortCollate": collateStrings,
      "sortEquivalents": getSortEquivalents()
    };
    var _arrayOptions = defineOptionsAccessor(sugarArray, ARRAY_OPTIONS);
    function collateStrings(a, b) {
      var aValue, bValue, aChar, bChar, aEquiv, bEquiv, index = 0, tiebreaker = 0;
      var sortOrder = _arrayOptions("sortOrder");
      var sortIgnore = _arrayOptions("sortIgnore");
      var sortNatural = _arrayOptions("sortNatural");
      var sortIgnoreCase = _arrayOptions("sortIgnoreCase");
      var sortEquivalents = _arrayOptions("sortEquivalents");
      a = getCollationReadyString(a, sortIgnore, sortIgnoreCase);
      b = getCollationReadyString(b, sortIgnore, sortIgnoreCase);
      do {
        aChar = getCollationCharacter(a, index, sortEquivalents);
        bChar = getCollationCharacter(b, index, sortEquivalents);
        aValue = getSortOrderIndex(aChar, sortOrder);
        bValue = getSortOrderIndex(bChar, sortOrder);
        if (aValue === -1 || bValue === -1) {
          aValue = a.charCodeAt(index) || null;
          bValue = b.charCodeAt(index) || null;
          if (sortNatural && codeIsNumeral(aValue) && codeIsNumeral(bValue)) {
            aValue = stringToNumber(a.slice(index));
            bValue = stringToNumber(b.slice(index));
          }
        } else {
          aEquiv = aChar !== a.charAt(index);
          bEquiv = bChar !== b.charAt(index);
          if (aEquiv !== bEquiv && tiebreaker === 0) {
            tiebreaker = aEquiv - bEquiv;
          }
        }
        index += 1;
      } while (aValue != null && bValue != null && aValue === bValue);
      if (aValue === bValue)
        return tiebreaker;
      return aValue - bValue;
    }
    module.exports = {
      ARRAY_OPTIONS,
      _arrayOptions
    };
  }
});

// node_modules/sugar/array/internal/compareValue.js
var require_compareValue = __commonJS({
  "node_modules/sugar/array/internal/compareValue.js"(exports, module) {
    "use strict";
    var ARRAY_OPTIONS = require_ARRAY_OPTIONS();
    var classChecks = require_classChecks();
    var isString = classChecks.isString;
    var isArray = classChecks.isArray;
    var _arrayOptions = ARRAY_OPTIONS._arrayOptions;
    function compareValue(aVal, bVal) {
      var cmp, i, collate;
      if (isString(aVal) && isString(bVal)) {
        collate = _arrayOptions("sortCollate");
        return collate(aVal, bVal);
      } else if (isArray(aVal) && isArray(bVal)) {
        if (aVal.length < bVal.length) {
          return -1;
        } else if (aVal.length > bVal.length) {
          return 1;
        } else {
          for (i = 0; i < aVal.length; i++) {
            cmp = compareValue(aVal[i], bVal[i]);
            if (cmp !== 0) {
              return cmp;
            }
          }
          return 0;
        }
      }
      return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
    }
    module.exports = compareValue;
  }
});

// node_modules/sugar/array/sortBy.js
var require_sortBy = __commonJS({
  "node_modules/sugar/array/sortBy.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var compareValue = require_compareValue();
    var mapWithShortcuts = require_mapWithShortcuts();
    Sugar.Array.defineInstance({
      "sortBy": function(arr, map, desc) {
        arr.sort(function(a, b) {
          var aProperty = mapWithShortcuts(a, map, arr, [a]);
          var bProperty = mapWithShortcuts(b, map, arr, [b]);
          return compareValue(aProperty, bProperty) * (desc ? -1 : 1);
        });
        return arr;
      }
    });
    module.exports = Sugar.Array.sortBy;
  }
});

// node_modules/sugar/array/subtract.js
var require_subtract = __commonJS({
  "node_modules/sugar/array/subtract.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayIntersectOrSubtract = require_arrayIntersectOrSubtract();
    Sugar.Array.defineInstance({
      "subtract": function(arr, item) {
        return arrayIntersectOrSubtract(arr, item, true);
      }
    });
    module.exports = Sugar.Array.subtract;
  }
});

// node_modules/sugar/array/to.js
var require_to2 = __commonJS({
  "node_modules/sugar/array/to.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUndefined = require_isUndefined();
    Sugar.Array.defineInstance({
      "to": function(arr, num) {
        if (isUndefined(num))
          num = arr.length;
        return arr.slice(0, num);
      }
    });
    module.exports = Sugar.Array.to;
  }
});

// node_modules/sugar/array/internal/arrayUnique.js
var require_arrayUnique = __commonJS({
  "node_modules/sugar/array/internal/arrayUnique.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var mapWithShortcuts = require_mapWithShortcuts();
    var serializeInternal = require_serializeInternal();
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    function arrayUnique(arr, map) {
      var result = [], obj = {}, refs = [];
      forEach(arr, function(el, i) {
        var transformed = map ? mapWithShortcuts(el, map, arr, [el, i, arr]) : el;
        var key = serializeInternal(transformed, refs);
        if (!hasOwn(obj, key)) {
          result.push(el);
          obj[key] = true;
        }
      });
      return result;
    }
    module.exports = arrayUnique;
  }
});

// node_modules/sugar/array/var/HAS_CONCAT_BUG.js
var require_HAS_CONCAT_BUG = __commonJS({
  "node_modules/sugar/array/var/HAS_CONCAT_BUG.js"(exports, module) {
    "use strict";
    module.exports = !("0" in [].concat(void 0).concat());
  }
});

// node_modules/sugar/array/internal/arraySafeConcat.js
var require_arraySafeConcat = __commonJS({
  "node_modules/sugar/array/internal/arraySafeConcat.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var arrayClone = require_arrayClone();
    var classChecks = require_classChecks();
    var isArray = classChecks.isArray;
    function arraySafeConcat(arr, arg) {
      var result = arrayClone(arr), len = result.length, arr2;
      arr2 = isArray(arg) ? arg : [arg];
      result.length += arr2.length;
      forEach(arr2, function(el, i) {
        result[len + i] = el;
      });
      return result;
    }
    module.exports = arraySafeConcat;
  }
});

// node_modules/sugar/array/internal/arrayConcat.js
var require_arrayConcat = __commonJS({
  "node_modules/sugar/array/internal/arrayConcat.js"(exports, module) {
    "use strict";
    var HAS_CONCAT_BUG = require_HAS_CONCAT_BUG();
    var arraySafeConcat = require_arraySafeConcat();
    function arrayConcat(arr1, arr2) {
      if (HAS_CONCAT_BUG) {
        return arraySafeConcat(arr1, arr2);
      }
      return arr1.concat(arr2);
    }
    module.exports = arrayConcat;
  }
});

// node_modules/sugar/array/union.js
var require_union = __commonJS({
  "node_modules/sugar/array/union.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayUnique = require_arrayUnique();
    var arrayConcat = require_arrayConcat();
    Sugar.Array.defineInstance({
      "union": function(arr1, arr2) {
        return arrayUnique(arrayConcat(arr1, arr2));
      }
    });
    module.exports = Sugar.Array.union;
  }
});

// node_modules/sugar/array/unique.js
var require_unique = __commonJS({
  "node_modules/sugar/array/unique.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayUnique = require_arrayUnique();
    Sugar.Array.defineInstance({
      "unique": function(arr, map) {
        return arrayUnique(arr, map);
      }
    });
    module.exports = Sugar.Array.unique;
  }
});

// node_modules/sugar/array/zip.js
var require_zip = __commonJS({
  "node_modules/sugar/array/zip.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var map = require_map();
    Sugar.Array.defineInstanceWithArguments({
      "zip": function(arr, args) {
        return map(arr, function(el, i) {
          return [el].concat(map(args, function(k) {
            return i in k ? k[i] : null;
          }));
        });
      }
    });
    module.exports = Sugar.Array.zip;
  }
});

// node_modules/sugar/array/insert.js
var require_insert2 = __commonJS({
  "node_modules/sugar/array/insert.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var append = require_append();
    Sugar.Array.alias("insert", "append");
    module.exports = Sugar.Array.insert;
  }
});

// node_modules/sugar/array/getOption.js
var require_getOption2 = __commonJS({
  "node_modules/sugar/array/getOption.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ARRAY_OPTIONS = require_ARRAY_OPTIONS();
    var _arrayOptions = ARRAY_OPTIONS._arrayOptions;
    module.exports = Sugar.Array.getOption;
  }
});

// node_modules/sugar/array/setOption.js
var require_setOption2 = __commonJS({
  "node_modules/sugar/array/setOption.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ARRAY_OPTIONS = require_ARRAY_OPTIONS();
    var _arrayOptions = ARRAY_OPTIONS._arrayOptions;
    module.exports = Sugar.Array.setOption;
  }
});

// node_modules/sugar/array/index.js
var require_array = __commonJS({
  "node_modules/sugar/array/index.js"(exports, module) {
    "use strict";
    require_construct();
    require_create();
    require_add();
    require_append();
    require_at2();
    require_clone();
    require_compact2();
    require_exclude();
    require_first2();
    require_flatten();
    require_from2();
    require_groupBy();
    require_inGroups();
    require_inGroupsOf();
    require_intersect();
    require_isEmpty2();
    require_isEqual2();
    require_last2();
    require_remove2();
    require_removeAt();
    require_sample();
    require_shuffle();
    require_sortBy();
    require_subtract();
    require_to2();
    require_union();
    require_unique();
    require_zip();
    require_insert2();
    require_getOption2();
    require_setOption2();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/enumerable/internal/enumerateWithMapping.js
var require_enumerateWithMapping = __commonJS({
  "node_modules/sugar/enumerable/internal/enumerateWithMapping.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isArrayIndex = require_isArrayIndex();
    var mapWithShortcuts = require_mapWithShortcuts();
    var coreUtilityAliases = require_coreUtilityAliases();
    var isArray = classChecks.isArray;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function enumerateWithMapping(obj, map, fn) {
      var arrayIndexes = isArray(obj);
      forEachProperty(obj, function(val, key) {
        if (arrayIndexes) {
          if (!isArrayIndex(key)) {
            return;
          }
          key = +key;
        }
        var mapped = mapWithShortcuts(val, map, obj, [val, key, obj]);
        fn(mapped, key);
      });
    }
    module.exports = enumerateWithMapping;
  }
});

// node_modules/sugar/enumerable/internal/average.js
var require_average = __commonJS({
  "node_modules/sugar/enumerable/internal/average.js"(exports, module) {
    "use strict";
    var enumerateWithMapping = require_enumerateWithMapping();
    function average(obj, map) {
      var sum = 0, count = 0;
      enumerateWithMapping(obj, map, function(val) {
        sum += val;
        count++;
      });
      return sum / (count || 1);
    }
    module.exports = average;
  }
});

// node_modules/sugar/object/average.js
var require_average2 = __commonJS({
  "node_modules/sugar/object/average.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var average = require_average();
    Sugar.Object.defineInstanceAndStatic({
      "average": function(obj, map) {
        return average(obj, map);
      }
    });
    module.exports = Sugar.Object.average;
  }
});

// node_modules/sugar/enumerable/internal/objectCount.js
var require_objectCount = __commonJS({
  "node_modules/sugar/enumerable/internal/objectCount.js"(exports, module) {
    "use strict";
    var getMatcher = require_getMatcher();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function objectCount(obj, f) {
      var matcher = getMatcher(f), count = 0;
      forEachProperty(obj, function(val, key) {
        if (matcher(val, key, obj)) {
          count++;
        }
      });
      return count;
    }
    module.exports = objectCount;
  }
});

// node_modules/sugar/object/count.js
var require_count = __commonJS({
  "node_modules/sugar/object/count.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectCount = require_objectCount();
    Sugar.Object.defineInstanceAndStatic({
      "count": function(obj, f) {
        return objectCount(obj, f);
      }
    });
    module.exports = Sugar.Object.count;
  }
});

// node_modules/sugar/enumerable/internal/wrapObjectMatcher.js
var require_wrapObjectMatcher = __commonJS({
  "node_modules/sugar/enumerable/internal/wrapObjectMatcher.js"(exports, module) {
    "use strict";
    var getKeys = require_getKeys();
    var getMatcher = require_getMatcher();
    function wrapObjectMatcher(name) {
      var nativeFn = Array.prototype[name];
      return function(obj, f) {
        var matcher = getMatcher(f);
        return nativeFn.call(getKeys(obj), function(key) {
          return matcher(obj[key], key, obj);
        });
      };
    }
    module.exports = wrapObjectMatcher;
  }
});

// node_modules/sugar/enumerable/var/objectMatchers.js
var require_objectMatchers = __commonJS({
  "node_modules/sugar/enumerable/var/objectMatchers.js"(exports, module) {
    "use strict";
    var wrapObjectMatcher = require_wrapObjectMatcher();
    module.exports = {
      objectSome: wrapObjectMatcher("some"),
      objectFind: wrapObjectMatcher("find"),
      objectEvery: wrapObjectMatcher("every")
    };
  }
});

// node_modules/sugar/object/every.js
var require_every = __commonJS({
  "node_modules/sugar/object/every.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectMatchers = require_objectMatchers();
    var objectEvery = objectMatchers.objectEvery;
    Sugar.Object.defineInstanceAndStatic({
      "every": objectEvery
    });
    module.exports = Sugar.Object.every;
  }
});

// node_modules/sugar/enumerable/internal/objectFilter.js
var require_objectFilter = __commonJS({
  "node_modules/sugar/enumerable/internal/objectFilter.js"(exports, module) {
    "use strict";
    var getMatcher = require_getMatcher();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function objectFilter(obj, f) {
      var matcher = getMatcher(f), result = {};
      forEachProperty(obj, function(val, key) {
        if (matcher(val, key, obj)) {
          result[key] = val;
        }
      });
      return result;
    }
    module.exports = objectFilter;
  }
});

// node_modules/sugar/object/filter.js
var require_filter2 = __commonJS({
  "node_modules/sugar/object/filter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectFilter = require_objectFilter();
    Sugar.Object.defineInstanceAndStatic({
      "filter": function(obj, f) {
        return objectFilter(obj, f);
      }
    });
    module.exports = Sugar.Object.filter;
  }
});

// node_modules/sugar/object/find.js
var require_find = __commonJS({
  "node_modules/sugar/object/find.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectMatchers = require_objectMatchers();
    var objectFind = objectMatchers.objectFind;
    Sugar.Object.defineInstanceAndStatic({
      "find": objectFind
    });
    module.exports = Sugar.Object.find;
  }
});

// node_modules/sugar/common/internal/assertCallable.js
var require_assertCallable = __commonJS({
  "node_modules/sugar/common/internal/assertCallable.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isFunction = classChecks.isFunction;
    function assertCallable(obj) {
      if (!isFunction(obj)) {
        throw new TypeError("Function is not callable");
      }
    }
    module.exports = assertCallable;
  }
});

// node_modules/sugar/enumerable/internal/objectForEach.js
var require_objectForEach = __commonJS({
  "node_modules/sugar/enumerable/internal/objectForEach.js"(exports, module) {
    "use strict";
    var assertCallable = require_assertCallable();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function objectForEach(obj, fn) {
      assertCallable(fn);
      forEachProperty(obj, function(val, key) {
        fn(val, key, obj);
      });
      return obj;
    }
    module.exports = objectForEach;
  }
});

// node_modules/sugar/object/forEach.js
var require_forEach3 = __commonJS({
  "node_modules/sugar/object/forEach.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectForEach = require_objectForEach();
    Sugar.Object.defineInstanceAndStatic({
      "forEach": function(obj, eachFn) {
        return objectForEach(obj, eachFn);
      }
    });
    module.exports = Sugar.Object.forEach;
  }
});

// node_modules/sugar/enumerable/internal/getReducedMinMaxResult.js
var require_getReducedMinMaxResult = __commonJS({
  "node_modules/sugar/enumerable/internal/getReducedMinMaxResult.js"(exports, module) {
    "use strict";
    function getReducedMinMaxResult(result, obj, all, asObject) {
      if (asObject && all) {
        return result.reduce(function(o, key) {
          o[key] = obj[key];
          return o;
        }, {});
      } else if (result && !all) {
        result = result[0];
      }
      return result;
    }
    module.exports = getReducedMinMaxResult;
  }
});

// node_modules/sugar/enumerable/internal/getMinOrMax.js
var require_getMinOrMax = __commonJS({
  "node_modules/sugar/enumerable/internal/getMinOrMax.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isUndefined = require_isUndefined();
    var enumerateWithMapping = require_enumerateWithMapping();
    var getReducedMinMaxResult = require_getReducedMinMaxResult();
    var isBoolean = classChecks.isBoolean;
    function getMinOrMax(obj, arg1, arg2, max, asObject) {
      var result = [], pushVal, edge, all, map;
      if (isBoolean(arg1)) {
        all = arg1;
        map = arg2;
      } else {
        map = arg1;
      }
      enumerateWithMapping(obj, map, function(val, key) {
        if (isUndefined(val)) {
          throw new TypeError("Cannot compare with undefined");
        }
        pushVal = asObject ? key : obj[key];
        if (val === edge) {
          result.push(pushVal);
        } else if (isUndefined(edge) || max && val > edge || !max && val < edge) {
          result = [pushVal];
          edge = val;
        }
      });
      return getReducedMinMaxResult(result, obj, all, asObject);
    }
    module.exports = getMinOrMax;
  }
});

// node_modules/sugar/enumerable/internal/getLeastOrMost.js
var require_getLeastOrMost = __commonJS({
  "node_modules/sugar/enumerable/internal/getLeastOrMost.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var getMinOrMax = require_getMinOrMax();
    var serializeInternal = require_serializeInternal();
    var coreUtilityAliases = require_coreUtilityAliases();
    var enumerateWithMapping = require_enumerateWithMapping();
    var getReducedMinMaxResult = require_getReducedMinMaxResult();
    var isBoolean = classChecks.isBoolean;
    var getOwn = coreUtilityAliases.getOwn;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function getLeastOrMost(obj, arg1, arg2, most, asObject) {
      var group = {}, refs = [], minMaxResult, result, all, map;
      if (isBoolean(arg1)) {
        all = arg1;
        map = arg2;
      } else {
        map = arg1;
      }
      enumerateWithMapping(obj, map, function(val, key) {
        var groupKey = serializeInternal(val, refs);
        var arr = getOwn(group, groupKey) || [];
        arr.push(asObject ? key : obj[key]);
        group[groupKey] = arr;
      });
      minMaxResult = getMinOrMax(group, !!all, "length", most, true);
      if (all) {
        result = [];
        forEachProperty(minMaxResult, function(val) {
          result = result.concat(val);
        });
      } else {
        result = getOwn(group, minMaxResult);
      }
      return getReducedMinMaxResult(result, obj, all, asObject);
    }
    module.exports = getLeastOrMost;
  }
});

// node_modules/sugar/object/least.js
var require_least = __commonJS({
  "node_modules/sugar/object/least.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getLeastOrMost = require_getLeastOrMost();
    Sugar.Object.defineInstanceAndStatic({
      "least": function(obj, all, map) {
        return getLeastOrMost(obj, all, map, false, true);
      }
    });
    module.exports = Sugar.Object.least;
  }
});

// node_modules/sugar/enumerable/internal/objectMap.js
var require_objectMap = __commonJS({
  "node_modules/sugar/enumerable/internal/objectMap.js"(exports, module) {
    "use strict";
    var mapWithShortcuts = require_mapWithShortcuts();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function objectMap(obj, map) {
      var result = {};
      forEachProperty(obj, function(val, key) {
        result[key] = mapWithShortcuts(val, map, obj, [val, key, obj]);
      });
      return result;
    }
    module.exports = objectMap;
  }
});

// node_modules/sugar/object/map.js
var require_map2 = __commonJS({
  "node_modules/sugar/object/map.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectMap = require_objectMap();
    Sugar.Object.defineInstanceAndStatic({
      "map": function(obj, map) {
        return objectMap(obj, map);
      }
    });
    module.exports = Sugar.Object.map;
  }
});

// node_modules/sugar/object/max.js
var require_max = __commonJS({
  "node_modules/sugar/object/max.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getMinOrMax = require_getMinOrMax();
    Sugar.Object.defineInstanceAndStatic({
      "max": function(obj, all, map) {
        return getMinOrMax(obj, all, map, true, true);
      }
    });
    module.exports = Sugar.Object.max;
  }
});

// node_modules/sugar/enumerable/internal/median.js
var require_median = __commonJS({
  "node_modules/sugar/enumerable/internal/median.js"(exports, module) {
    "use strict";
    var trunc = require_trunc();
    var enumerateWithMapping = require_enumerateWithMapping();
    function median(obj, map) {
      var result = [], middle, len;
      enumerateWithMapping(obj, map, function(val) {
        result.push(val);
      });
      len = result.length;
      if (!len)
        return 0;
      result.sort(function(a, b) {
        return (a || 0) - (b || 0);
      });
      middle = trunc(len / 2);
      return len % 2 ? result[middle] : (result[middle - 1] + result[middle]) / 2;
    }
    module.exports = median;
  }
});

// node_modules/sugar/object/median.js
var require_median2 = __commonJS({
  "node_modules/sugar/object/median.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var median = require_median();
    Sugar.Object.defineInstanceAndStatic({
      "median": function(obj, map) {
        return median(obj, map);
      }
    });
    module.exports = Sugar.Object.median;
  }
});

// node_modules/sugar/object/min.js
var require_min = __commonJS({
  "node_modules/sugar/object/min.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getMinOrMax = require_getMinOrMax();
    Sugar.Object.defineInstanceAndStatic({
      "min": function(obj, all, map) {
        return getMinOrMax(obj, all, map, false, true);
      }
    });
    module.exports = Sugar.Object.min;
  }
});

// node_modules/sugar/object/most.js
var require_most = __commonJS({
  "node_modules/sugar/object/most.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getLeastOrMost = require_getLeastOrMost();
    Sugar.Object.defineInstanceAndStatic({
      "most": function(obj, all, map) {
        return getLeastOrMost(obj, all, map, true, true);
      }
    });
    module.exports = Sugar.Object.most;
  }
});

// node_modules/sugar/enumerable/internal/objectNone.js
var require_objectNone = __commonJS({
  "node_modules/sugar/enumerable/internal/objectNone.js"(exports, module) {
    "use strict";
    var objectMatchers = require_objectMatchers();
    var objectSome = objectMatchers.objectSome;
    function objectNone(obj, f) {
      return !objectSome(obj, f);
    }
    module.exports = objectNone;
  }
});

// node_modules/sugar/object/none.js
var require_none = __commonJS({
  "node_modules/sugar/object/none.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectNone = require_objectNone();
    Sugar.Object.defineInstanceAndStatic({
      "none": function(obj, f) {
        return objectNone(obj, f);
      }
    });
    module.exports = Sugar.Object.none;
  }
});

// node_modules/sugar/enumerable/internal/objectReduce.js
var require_objectReduce = __commonJS({
  "node_modules/sugar/enumerable/internal/objectReduce.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function objectReduce(obj, fn, acc) {
      var init = isDefined(acc);
      forEachProperty(obj, function(val, key) {
        if (!init) {
          acc = val;
          init = true;
          return;
        }
        acc = fn(acc, val, key, obj);
      });
      return acc;
    }
    module.exports = objectReduce;
  }
});

// node_modules/sugar/object/reduce.js
var require_reduce = __commonJS({
  "node_modules/sugar/object/reduce.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectReduce = require_objectReduce();
    Sugar.Object.defineInstanceAndStatic({
      "reduce": function(obj, fn, init) {
        return objectReduce(obj, fn, init);
      }
    });
    module.exports = Sugar.Object.reduce;
  }
});

// node_modules/sugar/object/some.js
var require_some = __commonJS({
  "node_modules/sugar/object/some.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectMatchers = require_objectMatchers();
    var objectSome = objectMatchers.objectSome;
    Sugar.Object.defineInstanceAndStatic({
      "some": objectSome
    });
    module.exports = Sugar.Object.some;
  }
});

// node_modules/sugar/enumerable/internal/sum.js
var require_sum = __commonJS({
  "node_modules/sugar/enumerable/internal/sum.js"(exports, module) {
    "use strict";
    var enumerateWithMapping = require_enumerateWithMapping();
    function sum(obj, map) {
      var sum2 = 0;
      enumerateWithMapping(obj, map, function(val) {
        sum2 += val;
      });
      return sum2;
    }
    module.exports = sum;
  }
});

// node_modules/sugar/object/sum.js
var require_sum2 = __commonJS({
  "node_modules/sugar/object/sum.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var sum = require_sum();
    Sugar.Object.defineInstanceAndStatic({
      "sum": function(obj, map) {
        return sum(obj, map);
      }
    });
    module.exports = Sugar.Object.sum;
  }
});

// node_modules/sugar/array/average.js
var require_average3 = __commonJS({
  "node_modules/sugar/array/average.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var average = require_average();
    Sugar.Array.defineInstance({
      "average": function(arr, map) {
        return average(arr, map);
      }
    });
    module.exports = Sugar.Array.average;
  }
});

// node_modules/sugar/enumerable/internal/enhancedMatching.js
var require_enhancedMatching = __commonJS({
  "node_modules/sugar/enumerable/internal/enhancedMatching.js"(exports, module) {
    "use strict";
    var getMatcher = require_getMatcher();
    var classChecks = require_classChecks();
    var isFunction = classChecks.isFunction;
    function enhancedMatching(f) {
      var matcher;
      if (isFunction(f)) {
        return f;
      }
      matcher = getMatcher(f);
      return function(el, i, arr) {
        return matcher(el, i, arr);
      };
    }
    module.exports = enhancedMatching;
  }
});

// node_modules/sugar/common/internal/assertArgument.js
var require_assertArgument = __commonJS({
  "node_modules/sugar/common/internal/assertArgument.js"(exports, module) {
    "use strict";
    function assertArgument(exists) {
      if (!exists) {
        throw new TypeError("Argument required");
      }
    }
    module.exports = assertArgument;
  }
});

// node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js
var require_wrapNativeArrayMethod = __commonJS({
  "node_modules/sugar/enumerable/internal/wrapNativeArrayMethod.js"(exports, module) {
    "use strict";
    var assertArgument = require_assertArgument();
    function wrapNativeArrayMethod(methodName, wrapper) {
      var nativeFn = Array.prototype[methodName];
      return function(arr, f, context, argsLen) {
        var args = new Array(2);
        assertArgument(argsLen > 0);
        args[0] = wrapper(f, context);
        args[1] = context;
        return nativeFn.apply(arr, args);
      };
    }
    module.exports = wrapNativeArrayMethod;
  }
});

// node_modules/sugar/enumerable/internal/buildEnhancedMatching.js
var require_buildEnhancedMatching = __commonJS({
  "node_modules/sugar/enumerable/internal/buildEnhancedMatching.js"(exports, module) {
    "use strict";
    var enhancedMatching = require_enhancedMatching();
    var wrapNativeArrayMethod = require_wrapNativeArrayMethod();
    function buildEnhancedMatching(name) {
      return wrapNativeArrayMethod(name, enhancedMatching);
    }
    module.exports = buildEnhancedMatching;
  }
});

// node_modules/sugar/enumerable/var/enhancedMatcherMethods.js
var require_enhancedMatcherMethods = __commonJS({
  "node_modules/sugar/enumerable/var/enhancedMatcherMethods.js"(exports, module) {
    "use strict";
    var buildEnhancedMatching = require_buildEnhancedMatching();
    module.exports = {
      enhancedFind: buildEnhancedMatching("find"),
      enhancedSome: buildEnhancedMatching("some"),
      enhancedEvery: buildEnhancedMatching("every"),
      enhancedFilter: buildEnhancedMatching("filter"),
      enhancedFindIndex: buildEnhancedMatching("findIndex")
    };
  }
});

// node_modules/sugar/enumerable/internal/arrayCount.js
var require_arrayCount = __commonJS({
  "node_modules/sugar/enumerable/internal/arrayCount.js"(exports, module) {
    "use strict";
    var isUndefined = require_isUndefined();
    var enhancedMatcherMethods = require_enhancedMatcherMethods();
    var enhancedFilter = enhancedMatcherMethods.enhancedFilter;
    function arrayCount(arr, f) {
      if (isUndefined(f)) {
        return arr.length;
      }
      return enhancedFilter.apply(this, arguments).length;
    }
    module.exports = arrayCount;
  }
});

// node_modules/sugar/array/count.js
var require_count2 = __commonJS({
  "node_modules/sugar/array/count.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayCount = require_arrayCount();
    var fixArgumentLength = require_fixArgumentLength();
    Sugar.Array.defineInstance({
      "count": fixArgumentLength(arrayCount)
    });
    module.exports = Sugar.Array.count;
  }
});

// node_modules/sugar/enumerable/var/ARRAY_ENHANCEMENTS_FLAG.js
var require_ARRAY_ENHANCEMENTS_FLAG = __commonJS({
  "node_modules/sugar/enumerable/var/ARRAY_ENHANCEMENTS_FLAG.js"(exports, module) {
    "use strict";
    module.exports = "enhanceArray";
  }
});

// node_modules/sugar/array/every.js
var require_every2 = __commonJS({
  "node_modules/sugar/array/every.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ENHANCEMENTS_FLAG = require_ENHANCEMENTS_FLAG();
    var ARRAY_ENHANCEMENTS_FLAG = require_ARRAY_ENHANCEMENTS_FLAG();
    var fixArgumentLength = require_fixArgumentLength();
    var enhancedMatcherMethods = require_enhancedMatcherMethods();
    var enhancedEvery = enhancedMatcherMethods.enhancedEvery;
    Sugar.Array.defineInstance({
      "every": fixArgumentLength(enhancedEvery)
    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);
    module.exports = Sugar.Array.every;
  }
});

// node_modules/sugar/enumerable/internal/enhancedMapping.js
var require_enhancedMapping = __commonJS({
  "node_modules/sugar/enumerable/internal/enhancedMapping.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var mapWithShortcuts = require_mapWithShortcuts();
    var isFunction = classChecks.isFunction;
    function enhancedMapping(map, context) {
      if (isFunction(map)) {
        return map;
      } else if (map) {
        return function(el, i, arr) {
          return mapWithShortcuts(el, map, context, [el, i, arr]);
        };
      }
    }
    module.exports = enhancedMapping;
  }
});

// node_modules/sugar/enumerable/internal/buildFromIndexMethods.js
var require_buildFromIndexMethods = __commonJS({
  "node_modules/sugar/enumerable/internal/buildFromIndexMethods.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var spaceSplit = require_spaceSplit();
    var classChecks = require_classChecks();
    var mathAliases = require_mathAliases();
    var assertArgument = require_assertArgument();
    var enhancedMapping = require_enhancedMapping();
    var namespaceAliases = require_namespaceAliases();
    var enhancedMatching = require_enhancedMatching();
    var getNormalizedIndex = require_getNormalizedIndex();
    var coreUtilityAliases = require_coreUtilityAliases();
    var methodDefineAliases = require_methodDefineAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    var defineInstanceWithArguments = methodDefineAliases.defineInstanceWithArguments;
    var sugarArray = namespaceAliases.sugarArray;
    var min = mathAliases.min;
    var max = mathAliases.max;
    var isBoolean = classChecks.isBoolean;
    function buildFromIndexMethods() {
      var methods = {
        "forEach": {
          base: forEachAsNative
        },
        "map": {
          wrapper: enhancedMapping
        },
        "some every": {
          wrapper: enhancedMatching
        },
        "findIndex": {
          wrapper: enhancedMatching,
          result: indexResult
        },
        "reduce": {
          apply: applyReduce
        },
        "filter find": {
          wrapper: enhancedMatching
        },
        "reduceRight": {
          apply: applyReduce,
          slice: sliceArrayFromRight,
          clamp: clampStartIndexFromRight
        }
      };
      forEachProperty(methods, function(opts, key) {
        forEach(spaceSplit(key), function(baseName) {
          var methodName = baseName + "FromIndex";
          var fn = createFromIndexWithOptions(baseName, opts);
          defineInstanceWithArguments(sugarArray, methodName, fn);
        });
      });
      function forEachAsNative(fn) {
        forEach(this, fn);
      }
      function sliceArrayFromLeft(arr, startIndex, loop) {
        var result = arr;
        if (startIndex) {
          result = arr.slice(startIndex);
          if (loop) {
            result = result.concat(arr.slice(0, startIndex));
          }
        }
        return result;
      }
      function sliceArrayFromRight(arr, startIndex, loop) {
        if (!loop) {
          startIndex += 1;
          arr = arr.slice(0, max(0, startIndex));
        }
        return arr;
      }
      function clampStartIndex(startIndex, len) {
        return min(len, max(0, startIndex));
      }
      function clampStartIndexFromRight(startIndex, len) {
        return min(len, max(-1, startIndex));
      }
      function applyReduce(arr, startIndex, fn, context, len, loop) {
        return function(acc, val, i) {
          i = getNormalizedIndex(i + startIndex, len, loop);
          return fn.call(arr, acc, val, i, arr);
        };
      }
      function applyEach(arr, startIndex, fn, context, len, loop) {
        return function(el, i) {
          i = getNormalizedIndex(i + startIndex, len, loop);
          return fn.call(context, arr[i], i, arr);
        };
      }
      function indexResult(result, startIndex, len) {
        if (result !== -1) {
          result = (result + startIndex) % len;
        }
        return result;
      }
      function createFromIndexWithOptions(methodName, opts) {
        var baseFn = opts.base || Array.prototype[methodName], applyCallback = opts.apply || applyEach, sliceArray = opts.slice || sliceArrayFromLeft, clampIndex = opts.clamp || clampStartIndex, getResult = opts.result, wrapper = opts.wrapper;
        return function(arr, startIndex, args) {
          var callArgs = [], argIndex = 0, lastArg, result, len, loop, fn;
          len = arr.length;
          if (isBoolean(args[0])) {
            loop = args[argIndex++];
          }
          fn = args[argIndex++];
          lastArg = args[argIndex];
          if (startIndex < 0) {
            startIndex += len;
          }
          startIndex = clampIndex(startIndex, len);
          assertArgument(args.length);
          fn = wrapper ? wrapper(fn, lastArg) : fn;
          callArgs.push(applyCallback(arr, startIndex, fn, lastArg, len, loop));
          if (lastArg) {
            callArgs.push(lastArg);
          }
          result = baseFn.apply(sliceArray(arr, startIndex, loop), callArgs);
          if (getResult) {
            result = getResult(result, startIndex, len);
          }
          return result;
        };
      }
    }
    module.exports = buildFromIndexMethods;
  }
});

// node_modules/sugar/enumerable/build/buildFromIndexMethodsCall.js
var require_buildFromIndexMethodsCall = __commonJS({
  "node_modules/sugar/enumerable/build/buildFromIndexMethodsCall.js"() {
    "use strict";
    var buildFromIndexMethods = require_buildFromIndexMethods();
    buildFromIndexMethods();
  }
});

// node_modules/sugar/array/everyFromIndex.js
var require_everyFromIndex = __commonJS({
  "node_modules/sugar/array/everyFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.everyFromIndex;
  }
});

// node_modules/sugar/array/filter.js
var require_filter3 = __commonJS({
  "node_modules/sugar/array/filter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ENHANCEMENTS_FLAG = require_ENHANCEMENTS_FLAG();
    var ARRAY_ENHANCEMENTS_FLAG = require_ARRAY_ENHANCEMENTS_FLAG();
    var fixArgumentLength = require_fixArgumentLength();
    var enhancedMatcherMethods = require_enhancedMatcherMethods();
    var enhancedFilter = enhancedMatcherMethods.enhancedFilter;
    Sugar.Array.defineInstance({
      "filter": fixArgumentLength(enhancedFilter)
    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);
    module.exports = Sugar.Array.filter;
  }
});

// node_modules/sugar/array/filterFromIndex.js
var require_filterFromIndex = __commonJS({
  "node_modules/sugar/array/filterFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.filterFromIndex;
  }
});

// node_modules/sugar/array/find.js
var require_find2 = __commonJS({
  "node_modules/sugar/array/find.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ENHANCEMENTS_FLAG = require_ENHANCEMENTS_FLAG();
    var ARRAY_ENHANCEMENTS_FLAG = require_ARRAY_ENHANCEMENTS_FLAG();
    var fixArgumentLength = require_fixArgumentLength();
    var enhancedMatcherMethods = require_enhancedMatcherMethods();
    var enhancedFind = enhancedMatcherMethods.enhancedFind;
    Sugar.Array.defineInstance({
      "find": fixArgumentLength(enhancedFind)
    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);
    module.exports = Sugar.Array.find;
  }
});

// node_modules/sugar/array/findFromIndex.js
var require_findFromIndex = __commonJS({
  "node_modules/sugar/array/findFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.findFromIndex;
  }
});

// node_modules/sugar/array/findIndex.js
var require_findIndex = __commonJS({
  "node_modules/sugar/array/findIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ENHANCEMENTS_FLAG = require_ENHANCEMENTS_FLAG();
    var ARRAY_ENHANCEMENTS_FLAG = require_ARRAY_ENHANCEMENTS_FLAG();
    var fixArgumentLength = require_fixArgumentLength();
    var enhancedMatcherMethods = require_enhancedMatcherMethods();
    var enhancedFindIndex = enhancedMatcherMethods.enhancedFindIndex;
    Sugar.Array.defineInstance({
      "findIndex": fixArgumentLength(enhancedFindIndex)
    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);
    module.exports = Sugar.Array.findIndex;
  }
});

// node_modules/sugar/array/findIndexFromIndex.js
var require_findIndexFromIndex = __commonJS({
  "node_modules/sugar/array/findIndexFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.findIndexFromIndex;
  }
});

// node_modules/sugar/array/forEachFromIndex.js
var require_forEachFromIndex = __commonJS({
  "node_modules/sugar/array/forEachFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.forEachFromIndex;
  }
});

// node_modules/sugar/array/least.js
var require_least2 = __commonJS({
  "node_modules/sugar/array/least.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getLeastOrMost = require_getLeastOrMost();
    Sugar.Array.defineInstance({
      "least": function(arr, all, map) {
        return getLeastOrMost(arr, all, map);
      }
    });
    module.exports = Sugar.Array.least;
  }
});

// node_modules/sugar/enumerable/internal/buildEnhancedMapping.js
var require_buildEnhancedMapping = __commonJS({
  "node_modules/sugar/enumerable/internal/buildEnhancedMapping.js"(exports, module) {
    "use strict";
    var enhancedMapping = require_enhancedMapping();
    var wrapNativeArrayMethod = require_wrapNativeArrayMethod();
    function buildEnhancedMapping(name) {
      return wrapNativeArrayMethod(name, enhancedMapping);
    }
    module.exports = buildEnhancedMapping;
  }
});

// node_modules/sugar/enumerable/var/enhancedMap.js
var require_enhancedMap = __commonJS({
  "node_modules/sugar/enumerable/var/enhancedMap.js"(exports, module) {
    "use strict";
    var buildEnhancedMapping = require_buildEnhancedMapping();
    module.exports = buildEnhancedMapping("map");
  }
});

// node_modules/sugar/array/map.js
var require_map3 = __commonJS({
  "node_modules/sugar/array/map.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ENHANCEMENTS_FLAG = require_ENHANCEMENTS_FLAG();
    var ARRAY_ENHANCEMENTS_FLAG = require_ARRAY_ENHANCEMENTS_FLAG();
    var enhancedMap = require_enhancedMap();
    var fixArgumentLength = require_fixArgumentLength();
    Sugar.Array.defineInstance({
      "map": fixArgumentLength(enhancedMap)
    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);
    module.exports = Sugar.Array.map;
  }
});

// node_modules/sugar/array/mapFromIndex.js
var require_mapFromIndex = __commonJS({
  "node_modules/sugar/array/mapFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.mapFromIndex;
  }
});

// node_modules/sugar/array/max.js
var require_max2 = __commonJS({
  "node_modules/sugar/array/max.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getMinOrMax = require_getMinOrMax();
    Sugar.Array.defineInstance({
      "max": function(arr, all, map) {
        return getMinOrMax(arr, all, map, true);
      }
    });
    module.exports = Sugar.Array.max;
  }
});

// node_modules/sugar/array/median.js
var require_median3 = __commonJS({
  "node_modules/sugar/array/median.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var median = require_median();
    Sugar.Array.defineInstance({
      "median": function(arr, map) {
        return median(arr, map);
      }
    });
    module.exports = Sugar.Array.median;
  }
});

// node_modules/sugar/array/min.js
var require_min2 = __commonJS({
  "node_modules/sugar/array/min.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getMinOrMax = require_getMinOrMax();
    Sugar.Array.defineInstance({
      "min": function(arr, all, map) {
        return getMinOrMax(arr, all, map);
      }
    });
    module.exports = Sugar.Array.min;
  }
});

// node_modules/sugar/array/most.js
var require_most2 = __commonJS({
  "node_modules/sugar/array/most.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getLeastOrMost = require_getLeastOrMost();
    Sugar.Array.defineInstance({
      "most": function(arr, all, map) {
        return getLeastOrMost(arr, all, map, true);
      }
    });
    module.exports = Sugar.Array.most;
  }
});

// node_modules/sugar/enumerable/internal/arrayNone.js
var require_arrayNone = __commonJS({
  "node_modules/sugar/enumerable/internal/arrayNone.js"(exports, module) {
    "use strict";
    var enhancedMatcherMethods = require_enhancedMatcherMethods();
    var enhancedSome = enhancedMatcherMethods.enhancedSome;
    function arrayNone() {
      return !enhancedSome.apply(this, arguments);
    }
    module.exports = arrayNone;
  }
});

// node_modules/sugar/array/none.js
var require_none2 = __commonJS({
  "node_modules/sugar/array/none.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var arrayNone = require_arrayNone();
    var fixArgumentLength = require_fixArgumentLength();
    Sugar.Array.defineInstance({
      "none": fixArgumentLength(arrayNone)
    });
    module.exports = Sugar.Array.none;
  }
});

// node_modules/sugar/array/reduceFromIndex.js
var require_reduceFromIndex = __commonJS({
  "node_modules/sugar/array/reduceFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.reduceFromIndex;
  }
});

// node_modules/sugar/array/reduceRightFromIndex.js
var require_reduceRightFromIndex = __commonJS({
  "node_modules/sugar/array/reduceRightFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.reduceRightFromIndex;
  }
});

// node_modules/sugar/array/some.js
var require_some2 = __commonJS({
  "node_modules/sugar/array/some.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var ENHANCEMENTS_FLAG = require_ENHANCEMENTS_FLAG();
    var ARRAY_ENHANCEMENTS_FLAG = require_ARRAY_ENHANCEMENTS_FLAG();
    var fixArgumentLength = require_fixArgumentLength();
    var enhancedMatcherMethods = require_enhancedMatcherMethods();
    var enhancedSome = enhancedMatcherMethods.enhancedSome;
    Sugar.Array.defineInstance({
      "some": fixArgumentLength(enhancedSome)
    }, [ENHANCEMENTS_FLAG, ARRAY_ENHANCEMENTS_FLAG]);
    module.exports = Sugar.Array.some;
  }
});

// node_modules/sugar/array/someFromIndex.js
var require_someFromIndex = __commonJS({
  "node_modules/sugar/array/someFromIndex.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildFromIndexMethodsCall();
    module.exports = Sugar.Array.someFromIndex;
  }
});

// node_modules/sugar/array/sum.js
var require_sum3 = __commonJS({
  "node_modules/sugar/array/sum.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var sum = require_sum();
    Sugar.Array.defineInstance({
      "sum": function(arr, map) {
        return sum(arr, map);
      }
    });
    module.exports = Sugar.Array.sum;
  }
});

// node_modules/sugar/enumerable/index.js
var require_enumerable = __commonJS({
  "node_modules/sugar/enumerable/index.js"(exports, module) {
    "use strict";
    require_average2();
    require_count();
    require_every();
    require_filter2();
    require_find();
    require_forEach3();
    require_least();
    require_map2();
    require_max();
    require_median2();
    require_min();
    require_most();
    require_none();
    require_reduce();
    require_some();
    require_sum2();
    require_average3();
    require_count2();
    require_every2();
    require_everyFromIndex();
    require_filter3();
    require_filterFromIndex();
    require_find2();
    require_findFromIndex();
    require_findIndex();
    require_findIndexFromIndex();
    require_forEachFromIndex();
    require_least2();
    require_map3();
    require_mapFromIndex();
    require_max2();
    require_median3();
    require_min2();
    require_most2();
    require_none2();
    require_reduceFromIndex();
    require_reduceRightFromIndex();
    require_some2();
    require_someFromIndex();
    require_sum3();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/object/var/getOwnPropertyNames.js
var require_getOwnPropertyNames = __commonJS({
  "node_modules/sugar/object/var/getOwnPropertyNames.js"(exports, module) {
    "use strict";
    module.exports = Object.getOwnPropertyNames;
  }
});

// node_modules/sugar/object/internal/getNewObjectForMerge.js
var require_getNewObjectForMerge = __commonJS({
  "node_modules/sugar/object/internal/getNewObjectForMerge.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isPrimitive = require_isPrimitive();
    var isPlainObject = require_isPlainObject();
    var getRegExpFlags = require_getRegExpFlags();
    var coreUtilityAliases = require_coreUtilityAliases();
    var classToString = coreUtilityAliases.classToString;
    var isDate = classChecks.isDate;
    var isRegExp = classChecks.isRegExp;
    var isArray = classChecks.isArray;
    function getNewObjectForMerge(source) {
      var klass = classToString(source);
      if (isArray(source, klass)) {
        return [];
      } else if (isPlainObject(source, klass)) {
        return {};
      } else if (isDate(source, klass)) {
        return new Date(source.getTime());
      } else if (isRegExp(source, klass)) {
        return RegExp(source.source, getRegExpFlags(source));
      } else if (isPrimitive(source && source.valueOf())) {
        return source;
      }
      throw new TypeError("Must be a basic data type");
    }
    module.exports = getNewObjectForMerge;
  }
});

// node_modules/sugar/object/var/getOwnPropertyDescriptor.js
var require_getOwnPropertyDescriptor = __commonJS({
  "node_modules/sugar/object/var/getOwnPropertyDescriptor.js"(exports, module) {
    "use strict";
    module.exports = Object.getOwnPropertyDescriptor;
  }
});

// node_modules/sugar/object/internal/iterateOverKeys.js
var require_iterateOverKeys = __commonJS({
  "node_modules/sugar/object/internal/iterateOverKeys.js"(exports, module) {
    "use strict";
    var getOwnPropertyDescriptor = require_getOwnPropertyDescriptor();
    function iterateOverKeys(getFn, obj, fn, hidden) {
      var keys = getFn(obj), desc;
      for (var i = 0, key; key = keys[i]; i++) {
        desc = getOwnPropertyDescriptor(obj, key);
        if (desc.enumerable || hidden) {
          fn(obj[key], key);
        }
      }
    }
    module.exports = iterateOverKeys;
  }
});

// node_modules/sugar/object/var/getOwnPropertySymbols.js
var require_getOwnPropertySymbols = __commonJS({
  "node_modules/sugar/object/var/getOwnPropertySymbols.js"(exports, module) {
    "use strict";
    module.exports = Object.getOwnPropertySymbols;
  }
});

// node_modules/sugar/object/internal/iterateOverProperties.js
var require_iterateOverProperties = __commonJS({
  "node_modules/sugar/object/internal/iterateOverProperties.js"(exports, module) {
    "use strict";
    var iterateOverKeys = require_iterateOverKeys();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwnPropertyNames = require_getOwnPropertyNames();
    var getOwnPropertySymbols = require_getOwnPropertySymbols();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function iterateOverProperties(hidden, obj, fn) {
      if (getOwnPropertyNames && hidden) {
        iterateOverKeys(getOwnPropertyNames, obj, fn, hidden);
      } else {
        forEachProperty(obj, fn);
      }
      if (getOwnPropertySymbols) {
        iterateOverKeys(getOwnPropertySymbols, obj, fn, hidden);
      }
    }
    module.exports = iterateOverProperties;
  }
});

// node_modules/sugar/common/var/NO_KEYS_IN_STRING_OBJECTS.js
var require_NO_KEYS_IN_STRING_OBJECTS = __commonJS({
  "node_modules/sugar/common/var/NO_KEYS_IN_STRING_OBJECTS.js"(exports, module) {
    "use strict";
    module.exports = !("0" in Object("a"));
  }
});

// node_modules/sugar/common/internal/forceStringCoercion.js
var require_forceStringCoercion = __commonJS({
  "node_modules/sugar/common/internal/forceStringCoercion.js"(exports, module) {
    "use strict";
    function forceStringCoercion(obj) {
      var i = 0, chr;
      while (chr = obj.charAt(i)) {
        obj[i++] = chr;
      }
    }
    module.exports = forceStringCoercion;
  }
});

// node_modules/sugar/common/internal/coercePrimitiveToObject.js
var require_coercePrimitiveToObject = __commonJS({
  "node_modules/sugar/common/internal/coercePrimitiveToObject.js"(exports, module) {
    "use strict";
    var NO_KEYS_IN_STRING_OBJECTS = require_NO_KEYS_IN_STRING_OBJECTS();
    var isPrimitive = require_isPrimitive();
    var classChecks = require_classChecks();
    var forceStringCoercion = require_forceStringCoercion();
    var isString = classChecks.isString;
    function coercePrimitiveToObject(obj) {
      if (isPrimitive(obj)) {
        obj = Object(obj);
      }
      if (NO_KEYS_IN_STRING_OBJECTS && isString(obj)) {
        forceStringCoercion(obj);
      }
      return obj;
    }
    module.exports = coercePrimitiveToObject;
  }
});

// node_modules/sugar/object/internal/mergeByPropertyDescriptor.js
var require_mergeByPropertyDescriptor = __commonJS({
  "node_modules/sugar/object/internal/mergeByPropertyDescriptor.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwnPropertyDescriptor = require_getOwnPropertyDescriptor();
    var defineProperty = coreUtilityAliases.defineProperty;
    function mergeByPropertyDescriptor(target, source, prop, sourceVal) {
      var descriptor = getOwnPropertyDescriptor(source, prop);
      if (isDefined(descriptor.value)) {
        descriptor.value = sourceVal;
      }
      defineProperty(target, prop, descriptor);
    }
    module.exports = mergeByPropertyDescriptor;
  }
});

// node_modules/sugar/object/internal/objectMerge.js
var require_objectMerge = __commonJS({
  "node_modules/sugar/object/internal/objectMerge.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isDefined = require_isDefined();
    var classChecks = require_classChecks();
    var isPrimitive = require_isPrimitive();
    var isUndefined = require_isUndefined();
    var isObjectType = require_isObjectType();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwnPropertyNames = require_getOwnPropertyNames();
    var getNewObjectForMerge = require_getNewObjectForMerge();
    var iterateOverProperties = require_iterateOverProperties();
    var coercePrimitiveToObject = require_coercePrimitiveToObject();
    var mergeByPropertyDescriptor = require_mergeByPropertyDescriptor();
    var isDate = classChecks.isDate;
    var isRegExp = classChecks.isRegExp;
    var isFunction = classChecks.isFunction;
    var getOwn = coreUtilityAliases.getOwn;
    function objectMerge(target, source, deep, resolve, hidden, descriptor) {
      var resolveByFunction = isFunction(resolve), resolveConflicts = resolve !== false;
      if (isUndefined(target)) {
        target = getNewObjectForMerge(source);
      } else if (resolveConflicts && isDate(target) && isDate(source)) {
        target.setTime(source.getTime());
      }
      if (isPrimitive(target)) {
        return source;
      }
      if (isPrimitive(source)) {
        source = coercePrimitiveToObject(source);
      }
      iterateOverProperties(hidden, source, function(val, key) {
        var sourceVal, targetVal, resolved, goDeep, result;
        sourceVal = source[key];
        targetVal = getOwn(target, key);
        if (resolveByFunction) {
          result = resolve(key, targetVal, sourceVal, target, source);
          if (isUndefined(result)) {
            return;
          } else if (isDefined(result) && result !== Sugar) {
            sourceVal = result;
            resolved = true;
          }
        } else if (isUndefined(sourceVal)) {
          return;
        }
        goDeep = !resolved && deep && isObjectType(sourceVal) && !isRegExp(sourceVal);
        if (!goDeep && !resolveConflicts && isDefined(targetVal)) {
          return;
        }
        if (goDeep) {
          sourceVal = objectMerge(targetVal, sourceVal, deep, resolve, hidden, descriptor);
        }
        if (getOwnPropertyNames && descriptor) {
          mergeByPropertyDescriptor(target, source, key, sourceVal);
        } else {
          target[key] = sourceVal;
        }
      });
      return target;
    }
    module.exports = objectMerge;
  }
});

// node_modules/sugar/object/internal/clone.js
var require_clone2 = __commonJS({
  "node_modules/sugar/object/internal/clone.js"(exports, module) {
    "use strict";
    var objectMerge = require_objectMerge();
    var getNewObjectForMerge = require_getNewObjectForMerge();
    function clone(source, deep) {
      var target = getNewObjectForMerge(source);
      return objectMerge(target, source, deep, true, true, true);
    }
    module.exports = clone;
  }
});

// node_modules/sugar/object/internal/mergeWithOptions.js
var require_mergeWithOptions = __commonJS({
  "node_modules/sugar/object/internal/mergeWithOptions.js"(exports, module) {
    "use strict";
    var objectMerge = require_objectMerge();
    function mergeWithOptions(target, source, opts) {
      opts = opts || {};
      return objectMerge(target, source, opts.deep, opts.resolve, opts.hidden, opts.descriptor);
    }
    module.exports = mergeWithOptions;
  }
});

// node_modules/sugar/object/add.js
var require_add2 = __commonJS({
  "node_modules/sugar/object/add.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var clone = require_clone2();
    var mergeWithOptions = require_mergeWithOptions();
    Sugar.Object.defineInstanceAndStatic({
      "add": function(obj1, obj2, opts) {
        return mergeWithOptions(clone(obj1), obj2, opts);
      }
    });
    module.exports = Sugar.Object.add;
  }
});

// node_modules/sugar/object/internal/mergeAll.js
var require_mergeAll = __commonJS({
  "node_modules/sugar/object/internal/mergeAll.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var classChecks = require_classChecks();
    var mergeWithOptions = require_mergeWithOptions();
    var isArray = classChecks.isArray;
    function mergeAll(target, sources, opts) {
      if (!isArray(sources)) {
        sources = [sources];
      }
      forEach(sources, function(source) {
        return mergeWithOptions(target, source, opts);
      });
      return target;
    }
    module.exports = mergeAll;
  }
});

// node_modules/sugar/object/addAll.js
var require_addAll = __commonJS({
  "node_modules/sugar/object/addAll.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var clone = require_clone2();
    var mergeAll = require_mergeAll();
    Sugar.Object.defineInstanceAndStatic({
      "addAll": function(obj, sources, opts) {
        return mergeAll(clone(obj), sources, opts);
      }
    });
    module.exports = Sugar.Object.addAll;
  }
});

// node_modules/sugar/object/clone.js
var require_clone3 = __commonJS({
  "node_modules/sugar/object/clone.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var clone = require_clone2();
    Sugar.Object.defineInstanceAndStatic({
      "clone": function(obj, deep) {
        return clone(obj, deep);
      }
    });
    module.exports = Sugar.Object.clone;
  }
});

// node_modules/sugar/object/internal/defaults.js
var require_defaults = __commonJS({
  "node_modules/sugar/object/internal/defaults.js"(exports, module) {
    "use strict";
    var mergeAll = require_mergeAll();
    function defaults(target, sources, opts) {
      opts = opts || {};
      opts.resolve = opts.resolve || false;
      return mergeAll(target, sources, opts);
    }
    module.exports = defaults;
  }
});

// node_modules/sugar/object/defaults.js
var require_defaults2 = __commonJS({
  "node_modules/sugar/object/defaults.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var defaults = require_defaults();
    Sugar.Object.defineInstanceAndStatic({
      "defaults": function(target, sources, opts) {
        return defaults(target, sources, opts);
      }
    });
    module.exports = Sugar.Object.defaults;
  }
});

// node_modules/sugar/object/internal/objectExclude.js
var require_objectExclude = __commonJS({
  "node_modules/sugar/object/internal/objectExclude.js"(exports, module) {
    "use strict";
    var getMatcher = require_getMatcher();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function objectExclude(obj, f) {
      var result = {};
      var matcher = getMatcher(f);
      forEachProperty(obj, function(val, key) {
        if (!matcher(val, key, obj)) {
          result[key] = val;
        }
      });
      return result;
    }
    module.exports = objectExclude;
  }
});

// node_modules/sugar/object/exclude.js
var require_exclude2 = __commonJS({
  "node_modules/sugar/object/exclude.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectExclude = require_objectExclude();
    Sugar.Object.defineInstanceAndStatic({
      "exclude": function(obj, f) {
        return objectExclude(obj, f);
      }
    });
    module.exports = Sugar.Object.exclude;
  }
});

// node_modules/sugar/object/var/DEEP_QUERY_STRING_REG.js
var require_DEEP_QUERY_STRING_REG = __commonJS({
  "node_modules/sugar/object/var/DEEP_QUERY_STRING_REG.js"(exports, module) {
    "use strict";
    module.exports = /^(.+?)(\[.*\])$/;
  }
});

// node_modules/sugar/object/var/NON_DECIMAL_REG.js
var require_NON_DECIMAL_REG = __commonJS({
  "node_modules/sugar/object/var/NON_DECIMAL_REG.js"(exports, module) {
    "use strict";
    module.exports = /[^\d.-]/;
  }
});

// node_modules/sugar/object/internal/stringIsDecimal.js
var require_stringIsDecimal = __commonJS({
  "node_modules/sugar/object/internal/stringIsDecimal.js"(exports, module) {
    "use strict";
    var NON_DECIMAL_REG = require_NON_DECIMAL_REG();
    function stringIsDecimal(str) {
      return str !== "" && !NON_DECIMAL_REG.test(str);
    }
    module.exports = stringIsDecimal;
  }
});

// node_modules/sugar/object/internal/getQueryValueAuto.js
var require_getQueryValueAuto = __commonJS({
  "node_modules/sugar/object/internal/getQueryValueAuto.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var stringIsDecimal = require_stringIsDecimal();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwn = coreUtilityAliases.getOwn;
    var isArray = classChecks.isArray;
    function getQueryValueAuto(obj, key, val) {
      if (!val) {
        return null;
      } else if (val === "true") {
        return true;
      } else if (val === "false") {
        return false;
      }
      var num = +val;
      if (!isNaN(num) && stringIsDecimal(val)) {
        return num;
      }
      var existing = getOwn(obj, key);
      if (val && existing) {
        return isArray(existing) ? existing.concat(val) : [existing, val];
      }
      return val;
    }
    module.exports = getQueryValueAuto;
  }
});

// node_modules/sugar/object/internal/setQueryProperty.js
var require_setQueryProperty = __commonJS({
  "node_modules/sugar/object/internal/setQueryProperty.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    var getQueryValueAuto = require_getQueryValueAuto();
    function setQueryProperty(obj, key, val, auto, transform) {
      var fnValue;
      if (transform) {
        fnValue = transform(val, key, obj);
      }
      if (isDefined(fnValue)) {
        val = fnValue;
      } else if (auto) {
        val = getQueryValueAuto(obj, key, val);
      }
      obj[key] = val;
    }
    module.exports = setQueryProperty;
  }
});

// node_modules/sugar/object/internal/mapQuerySeparatorToKeys.js
var require_mapQuerySeparatorToKeys = __commonJS({
  "node_modules/sugar/object/internal/mapQuerySeparatorToKeys.js"(exports, module) {
    "use strict";
    function mapQuerySeparatorToKeys(key, separator) {
      var split = key.split(separator), result = split[0];
      for (var i = 1, len = split.length; i < len; i++) {
        result += "[" + split[i] + "]";
      }
      return result;
    }
    module.exports = mapQuerySeparatorToKeys;
  }
});

// node_modules/sugar/object/internal/parseDeepQueryComponent.js
var require_parseDeepQueryComponent = __commonJS({
  "node_modules/sugar/object/internal/parseDeepQueryComponent.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var setQueryProperty = require_setQueryProperty();
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    var getOwn = coreUtilityAliases.getOwn;
    function parseDeepQueryComponent(obj, match, val, deep, auto, separator, transform) {
      var key = match[1];
      var inner = match[2].slice(1, -1).split("][");
      forEach(inner, function(k) {
        if (!hasOwn(obj, key)) {
          obj[key] = k ? {} : [];
        }
        obj = getOwn(obj, key);
        key = k ? k : obj.length.toString();
      });
      setQueryProperty(obj, key, val, auto, transform);
    }
    module.exports = parseDeepQueryComponent;
  }
});

// node_modules/sugar/object/internal/parseQueryComponent.js
var require_parseQueryComponent = __commonJS({
  "node_modules/sugar/object/internal/parseQueryComponent.js"(exports, module) {
    "use strict";
    var DEEP_QUERY_STRING_REG = require_DEEP_QUERY_STRING_REG();
    var setQueryProperty = require_setQueryProperty();
    var mapQuerySeparatorToKeys = require_mapQuerySeparatorToKeys();
    var parseDeepQueryComponent = require_parseDeepQueryComponent();
    function parseQueryComponent(obj, key, val, deep, auto, separator, transform) {
      var match;
      if (separator) {
        key = mapQuerySeparatorToKeys(key, separator);
        deep = true;
      }
      if (deep === true && (match = key.match(DEEP_QUERY_STRING_REG))) {
        parseDeepQueryComponent(obj, match, val, deep, auto, separator, transform);
      } else {
        setQueryProperty(obj, key, val, auto, transform);
      }
    }
    module.exports = parseQueryComponent;
  }
});

// node_modules/sugar/object/internal/fromQueryStringWithOptions.js
var require_fromQueryStringWithOptions = __commonJS({
  "node_modules/sugar/object/internal/fromQueryStringWithOptions.js"(exports, module) {
    "use strict";
    var forEach = require_forEach();
    var parseQueryComponent = require_parseQueryComponent();
    function fromQueryStringWithOptions(obj, opts) {
      var str = String(obj || "").replace(/^.*?\?/, ""), result = {}, auto;
      opts = opts || {};
      if (str) {
        forEach(str.split("&"), function(p) {
          var split = p.split("=");
          var key = decodeURIComponent(split[0]);
          var val = split.length === 2 ? decodeURIComponent(split[1]) : "";
          auto = opts.auto !== false;
          parseQueryComponent(result, key, val, opts.deep, auto, opts.separator, opts.transform);
        });
      }
      return result;
    }
    module.exports = fromQueryStringWithOptions;
  }
});

// node_modules/sugar/object/fromQueryString.js
var require_fromQueryString = __commonJS({
  "node_modules/sugar/object/fromQueryString.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var fromQueryStringWithOptions = require_fromQueryStringWithOptions();
    Sugar.Object.defineStatic({
      "fromQueryString": function(obj, options) {
        return fromQueryStringWithOptions(obj, options);
      }
    });
    module.exports = Sugar.Object.fromQueryString;
  }
});

// node_modules/sugar/object/get.js
var require_get = __commonJS({
  "node_modules/sugar/object/get.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var deepGetProperty = require_deepGetProperty();
    Sugar.Object.defineInstanceAndStatic({
      "get": function(obj, key, any) {
        return deepGetProperty(obj, key, any);
      }
    });
    module.exports = Sugar.Object.get;
  }
});

// node_modules/sugar/common/internal/deepHasProperty.js
var require_deepHasProperty = __commonJS({
  "node_modules/sugar/common/internal/deepHasProperty.js"(exports, module) {
    "use strict";
    var handleDeepProperty = require_handleDeepProperty();
    function deepHasProperty(obj, key, any) {
      return handleDeepProperty(obj, key, any, true);
    }
    module.exports = deepHasProperty;
  }
});

// node_modules/sugar/object/has.js
var require_has = __commonJS({
  "node_modules/sugar/object/has.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var deepHasProperty = require_deepHasProperty();
    Sugar.Object.defineInstanceAndStatic({
      "has": function(obj, key, any) {
        return deepHasProperty(obj, key, any);
      }
    });
    module.exports = Sugar.Object.has;
  }
});

// node_modules/sugar/object/internal/objectIntersectOrSubtract.js
var require_objectIntersectOrSubtract = __commonJS({
  "node_modules/sugar/object/internal/objectIntersectOrSubtract.js"(exports, module) {
    "use strict";
    var isEqual = require_isEqual();
    var objectMerge = require_objectMerge();
    var isObjectType = require_isObjectType();
    var coercePrimitiveToObject = require_coercePrimitiveToObject();
    function objectIntersectOrSubtract(obj1, obj2, subtract) {
      if (!isObjectType(obj1)) {
        return subtract ? obj1 : {};
      }
      obj2 = coercePrimitiveToObject(obj2);
      function resolve(key, val, val1) {
        var exists = key in obj2 && isEqual(val1, obj2[key]);
        if (exists !== subtract) {
          return val1;
        }
      }
      return objectMerge({}, obj1, false, resolve);
    }
    module.exports = objectIntersectOrSubtract;
  }
});

// node_modules/sugar/object/intersect.js
var require_intersect2 = __commonJS({
  "node_modules/sugar/object/intersect.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectIntersectOrSubtract = require_objectIntersectOrSubtract();
    Sugar.Object.defineInstanceAndStatic({
      "intersect": function(obj1, obj2) {
        return objectIntersectOrSubtract(obj1, obj2, false);
      }
    });
    module.exports = Sugar.Object.intersect;
  }
});

// node_modules/sugar/object/invert.js
var require_invert = __commonJS({
  "node_modules/sugar/object/invert.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    Sugar.Object.defineInstanceAndStatic({
      "invert": function(obj, multi) {
        var result = {};
        multi = multi === true;
        forEachProperty(obj, function(val, key) {
          if (hasOwn(result, val) && multi) {
            result[val].push(key);
          } else if (multi) {
            result[val] = [key];
          } else {
            result[val] = key;
          }
        });
        return result;
      }
    });
    module.exports = Sugar.Object.invert;
  }
});

// node_modules/sugar/common/internal/hasProperty.js
var require_hasProperty = __commonJS({
  "node_modules/sugar/common/internal/hasProperty.js"(exports, module) {
    "use strict";
    var isPrimitive = require_isPrimitive();
    function hasProperty(obj, prop) {
      return !isPrimitive(obj) && prop in obj;
    }
    module.exports = hasProperty;
  }
});

// node_modules/sugar/object/internal/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/sugar/object/internal/isArguments.js"(exports, module) {
    "use strict";
    var hasProperty = require_hasProperty();
    var coreUtilityAliases = require_coreUtilityAliases();
    var classToString = coreUtilityAliases.classToString;
    function isArguments(obj, className) {
      className = className || classToString(obj);
      return hasProperty(obj, "length") && (className === "[object Arguments]" || !!obj.callee);
    }
    module.exports = isArguments;
  }
});

// node_modules/sugar/object/isArguments.js
var require_isArguments2 = __commonJS({
  "node_modules/sugar/object/isArguments.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isArguments = require_isArguments();
    Sugar.Object.defineInstanceAndStatic({
      "isArguments": function(obj) {
        return isArguments(obj);
      }
    });
    module.exports = Sugar.Object.isArguments;
  }
});

// node_modules/sugar/common/internal/defineInstanceAndStaticSimilar.js
var require_defineInstanceAndStaticSimilar = __commonJS({
  "node_modules/sugar/common/internal/defineInstanceAndStaticSimilar.js"(exports, module) {
    "use strict";
    var methodDefineAliases = require_methodDefineAliases();
    var collectSimilarMethods = require_collectSimilarMethods();
    var defineInstanceAndStatic = methodDefineAliases.defineInstanceAndStatic;
    function defineInstanceAndStaticSimilar(sugarNamespace, set, fn, flags) {
      defineInstanceAndStatic(sugarNamespace, collectSimilarMethods(set, fn), flags);
    }
    module.exports = defineInstanceAndStaticSimilar;
  }
});

// node_modules/sugar/object/internal/buildClassCheckMethods.js
var require_buildClassCheckMethods = __commonJS({
  "node_modules/sugar/object/internal/buildClassCheckMethods.js"(exports, module) {
    "use strict";
    var NATIVE_TYPES = require_NATIVE_TYPES();
    var classChecks = require_classChecks();
    var namespaceAliases = require_namespaceAliases();
    var defineInstanceAndStaticSimilar = require_defineInstanceAndStaticSimilar();
    var isBoolean = classChecks.isBoolean;
    var isNumber = classChecks.isNumber;
    var isString = classChecks.isString;
    var isDate = classChecks.isDate;
    var isRegExp = classChecks.isRegExp;
    var isFunction = classChecks.isFunction;
    var isArray = classChecks.isArray;
    var isSet = classChecks.isSet;
    var isMap = classChecks.isMap;
    var isError = classChecks.isError;
    var sugarObject = namespaceAliases.sugarObject;
    function buildClassCheckMethods() {
      var checks = [isBoolean, isNumber, isString, isDate, isRegExp, isFunction, isArray, isError, isSet, isMap];
      defineInstanceAndStaticSimilar(sugarObject, NATIVE_TYPES, function(methods, name, i) {
        methods["is" + name] = checks[i];
      });
    }
    module.exports = buildClassCheckMethods;
  }
});

// node_modules/sugar/object/build/buildClassCheckMethodsCall.js
var require_buildClassCheckMethodsCall = __commonJS({
  "node_modules/sugar/object/build/buildClassCheckMethodsCall.js"() {
    "use strict";
    var buildClassCheckMethods = require_buildClassCheckMethods();
    buildClassCheckMethods();
  }
});

// node_modules/sugar/object/isArray.js
var require_isArray = __commonJS({
  "node_modules/sugar/object/isArray.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isArray;
  }
});

// node_modules/sugar/object/isBoolean.js
var require_isBoolean = __commonJS({
  "node_modules/sugar/object/isBoolean.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isBoolean;
  }
});

// node_modules/sugar/object/isDate.js
var require_isDate = __commonJS({
  "node_modules/sugar/object/isDate.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isDate;
  }
});

// node_modules/sugar/object/internal/getKeysWithObjectCoercion.js
var require_getKeysWithObjectCoercion = __commonJS({
  "node_modules/sugar/object/internal/getKeysWithObjectCoercion.js"(exports, module) {
    "use strict";
    var getKeys = require_getKeys();
    var coercePrimitiveToObject = require_coercePrimitiveToObject();
    function getKeysWithObjectCoercion(obj) {
      return getKeys(coercePrimitiveToObject(obj));
    }
    module.exports = getKeysWithObjectCoercion;
  }
});

// node_modules/sugar/object/internal/objectSize.js
var require_objectSize = __commonJS({
  "node_modules/sugar/object/internal/objectSize.js"(exports, module) {
    "use strict";
    var getKeysWithObjectCoercion = require_getKeysWithObjectCoercion();
    function objectSize(obj) {
      return getKeysWithObjectCoercion(obj).length;
    }
    module.exports = objectSize;
  }
});

// node_modules/sugar/object/isEmpty.js
var require_isEmpty3 = __commonJS({
  "node_modules/sugar/object/isEmpty.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectSize = require_objectSize();
    Sugar.Object.defineInstanceAndStatic({
      "isEmpty": function(obj) {
        return objectSize(obj) === 0;
      }
    });
    module.exports = Sugar.Object.isEmpty;
  }
});

// node_modules/sugar/object/isEqual.js
var require_isEqual3 = __commonJS({
  "node_modules/sugar/object/isEqual.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isEqual = require_isEqual();
    Sugar.Object.defineInstanceAndStatic({
      "isEqual": function(obj1, obj2) {
        return isEqual(obj1, obj2);
      }
    });
    module.exports = Sugar.Object.isEqual;
  }
});

// node_modules/sugar/object/isError.js
var require_isError = __commonJS({
  "node_modules/sugar/object/isError.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isError;
  }
});

// node_modules/sugar/object/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/sugar/object/isFunction.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isFunction;
  }
});

// node_modules/sugar/object/isMap.js
var require_isMap = __commonJS({
  "node_modules/sugar/object/isMap.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isMap;
  }
});

// node_modules/sugar/object/isNumber.js
var require_isNumber = __commonJS({
  "node_modules/sugar/object/isNumber.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isNumber;
  }
});

// node_modules/sugar/object/isObject.js
var require_isObject = __commonJS({
  "node_modules/sugar/object/isObject.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isPlainObject = require_isPlainObject();
    Sugar.Object.defineInstanceAndStatic({
      "isObject": function(obj) {
        return isPlainObject(obj);
      }
    });
    module.exports = Sugar.Object.isObject;
  }
});

// node_modules/sugar/object/isRegExp.js
var require_isRegExp = __commonJS({
  "node_modules/sugar/object/isRegExp.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isRegExp;
  }
});

// node_modules/sugar/object/isSet.js
var require_isSet = __commonJS({
  "node_modules/sugar/object/isSet.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isSet;
  }
});

// node_modules/sugar/object/isString.js
var require_isString = __commonJS({
  "node_modules/sugar/object/isString.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildClassCheckMethodsCall();
    module.exports = Sugar.Object.isString;
  }
});

// node_modules/sugar/object/merge.js
var require_merge = __commonJS({
  "node_modules/sugar/object/merge.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var mergeWithOptions = require_mergeWithOptions();
    Sugar.Object.defineInstanceAndStatic({
      "merge": function(target, source, opts) {
        return mergeWithOptions(target, source, opts);
      }
    });
    module.exports = Sugar.Object.merge;
  }
});

// node_modules/sugar/object/mergeAll.js
var require_mergeAll2 = __commonJS({
  "node_modules/sugar/object/mergeAll.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var mergeAll = require_mergeAll();
    Sugar.Object.defineInstanceAndStatic({
      "mergeAll": function(target, sources, opts) {
        return mergeAll(target, sources, opts);
      }
    });
    module.exports = Sugar.Object.mergeAll;
  }
});

// node_modules/sugar/object/internal/matchInObject.js
var require_matchInObject = __commonJS({
  "node_modules/sugar/object/internal/matchInObject.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isObjectType = require_isObjectType();
    var isRegExp = classChecks.isRegExp;
    function matchInObject(match, key) {
      if (isRegExp(match)) {
        return match.test(key);
      } else if (isObjectType(match)) {
        return key in match;
      } else {
        return key === String(match);
      }
    }
    module.exports = matchInObject;
  }
});

// node_modules/sugar/object/internal/selectFromObject.js
var require_selectFromObject = __commonJS({
  "node_modules/sugar/object/internal/selectFromObject.js"(exports, module) {
    "use strict";
    var matchInObject = require_matchInObject();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function selectFromObject(obj, f, select) {
      var match, result = {};
      f = [].concat(f);
      forEachProperty(obj, function(val, key) {
        match = false;
        for (var i = 0; i < f.length; i++) {
          if (matchInObject(f[i], key)) {
            match = true;
          }
        }
        if (match === select) {
          result[key] = val;
        }
      });
      return result;
    }
    module.exports = selectFromObject;
  }
});

// node_modules/sugar/object/internal/objectReject.js
var require_objectReject = __commonJS({
  "node_modules/sugar/object/internal/objectReject.js"(exports, module) {
    "use strict";
    var selectFromObject = require_selectFromObject();
    function objectReject(obj, f) {
      return selectFromObject(obj, f, false);
    }
    module.exports = objectReject;
  }
});

// node_modules/sugar/object/reject.js
var require_reject = __commonJS({
  "node_modules/sugar/object/reject.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectReject = require_objectReject();
    Sugar.Object.defineInstanceAndStatic({
      "reject": function(obj, f) {
        return objectReject(obj, f);
      }
    });
    module.exports = Sugar.Object.reject;
  }
});

// node_modules/sugar/object/internal/objectRemove.js
var require_objectRemove = __commonJS({
  "node_modules/sugar/object/internal/objectRemove.js"(exports, module) {
    "use strict";
    var getMatcher = require_getMatcher();
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function objectRemove(obj, f) {
      var matcher = getMatcher(f);
      forEachProperty(obj, function(val, key) {
        if (matcher(val, key, obj)) {
          delete obj[key];
        }
      });
      return obj;
    }
    module.exports = objectRemove;
  }
});

// node_modules/sugar/object/remove.js
var require_remove3 = __commonJS({
  "node_modules/sugar/object/remove.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectRemove = require_objectRemove();
    Sugar.Object.defineInstanceAndStatic({
      "remove": function(obj, f) {
        return objectRemove(obj, f);
      }
    });
    module.exports = Sugar.Object.remove;
  }
});

// node_modules/sugar/object/internal/objectSelect.js
var require_objectSelect = __commonJS({
  "node_modules/sugar/object/internal/objectSelect.js"(exports, module) {
    "use strict";
    var selectFromObject = require_selectFromObject();
    function objectSelect(obj, f) {
      return selectFromObject(obj, f, true);
    }
    module.exports = objectSelect;
  }
});

// node_modules/sugar/object/select.js
var require_select = __commonJS({
  "node_modules/sugar/object/select.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectSelect = require_objectSelect();
    Sugar.Object.defineInstanceAndStatic({
      "select": function(obj, f) {
        return objectSelect(obj, f);
      }
    });
    module.exports = Sugar.Object.select;
  }
});

// node_modules/sugar/common/internal/deepSetProperty.js
var require_deepSetProperty = __commonJS({
  "node_modules/sugar/common/internal/deepSetProperty.js"(exports, module) {
    "use strict";
    var handleDeepProperty = require_handleDeepProperty();
    function deepSetProperty(obj, key, val) {
      handleDeepProperty(obj, key, false, false, true, false, val);
      return obj;
    }
    module.exports = deepSetProperty;
  }
});

// node_modules/sugar/object/set.js
var require_set = __commonJS({
  "node_modules/sugar/object/set.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var deepSetProperty = require_deepSetProperty();
    Sugar.Object.defineInstanceAndStatic({
      "set": function(obj, key, val) {
        return deepSetProperty(obj, key, val);
      }
    });
    module.exports = Sugar.Object.set;
  }
});

// node_modules/sugar/object/size.js
var require_size = __commonJS({
  "node_modules/sugar/object/size.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectSize = require_objectSize();
    Sugar.Object.defineInstanceAndStatic({
      "size": function(obj) {
        return objectSize(obj);
      }
    });
    module.exports = Sugar.Object.size;
  }
});

// node_modules/sugar/object/subtract.js
var require_subtract2 = __commonJS({
  "node_modules/sugar/object/subtract.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var objectIntersectOrSubtract = require_objectIntersectOrSubtract();
    Sugar.Object.defineInstanceAndStatic({
      "subtract": function(obj1, obj2) {
        return objectIntersectOrSubtract(obj1, obj2, true);
      }
    });
    module.exports = Sugar.Object.subtract;
  }
});

// node_modules/sugar/object/internal/tap.js
var require_tap = __commonJS({
  "node_modules/sugar/object/internal/tap.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isFunction = classChecks.isFunction;
    function tap(obj, arg) {
      var fn = arg;
      if (!isFunction(arg)) {
        fn = function() {
          if (arg)
            obj[arg]();
        };
      }
      fn.call(obj, obj);
      return obj;
    }
    module.exports = tap;
  }
});

// node_modules/sugar/object/tap.js
var require_tap2 = __commonJS({
  "node_modules/sugar/object/tap.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var tap = require_tap();
    Sugar.Object.defineInstanceAndStatic({
      "tap": function(obj, arg) {
        return tap(obj, arg);
      }
    });
    module.exports = Sugar.Object.tap;
  }
});

// node_modules/sugar/object/var/internalToString.js
var require_internalToString = __commonJS({
  "node_modules/sugar/object/var/internalToString.js"(exports, module) {
    "use strict";
    module.exports = Object.prototype.toString;
  }
});

// node_modules/sugar/object/internal/sanitizeURIComponent.js
var require_sanitizeURIComponent = __commonJS({
  "node_modules/sugar/object/internal/sanitizeURIComponent.js"(exports, module) {
    "use strict";
    function sanitizeURIComponent(obj) {
      return !obj && obj !== false && obj !== 0 ? "" : encodeURIComponent(obj);
    }
    module.exports = sanitizeURIComponent;
  }
});

// node_modules/sugar/object/internal/getURIComponentValue.js
var require_getURIComponentValue = __commonJS({
  "node_modules/sugar/object/internal/getURIComponentValue.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var sanitizeURIComponent = require_sanitizeURIComponent();
    var isDate = classChecks.isDate;
    function getURIComponentValue(obj, prefix, transform) {
      var value;
      if (transform) {
        value = transform(obj, prefix);
      } else if (isDate(obj)) {
        value = obj.getTime();
      } else {
        value = obj;
      }
      return sanitizeURIComponent(prefix) + "=" + sanitizeURIComponent(value);
    }
    module.exports = getURIComponentValue;
  }
});

// node_modules/sugar/object/internal/toQueryString.js
var require_toQueryString = __commonJS({
  "node_modules/sugar/object/internal/toQueryString.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isObjectType = require_isObjectType();
    var internalToString = require_internalToString();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getURIComponentValue = require_getURIComponentValue();
    var sanitizeURIComponent = require_sanitizeURIComponent();
    var isArray = classChecks.isArray;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function toQueryString(obj, deep, transform, prefix, separator) {
      if (isArray(obj)) {
        return collectArrayAsQueryString(obj, deep, transform, prefix, separator);
      } else if (isObjectType(obj) && obj.toString === internalToString) {
        return collectObjectAsQueryString(obj, deep, transform, prefix, separator);
      } else if (prefix) {
        return getURIComponentValue(obj, prefix, transform);
      }
      return "";
    }
    function collectArrayAsQueryString(arr, deep, transform, prefix, separator) {
      var el, qc, key, result = [];
      for (var i = 0, len = arr.length; i < len; i++) {
        el = arr[i];
        key = prefix + (prefix && deep ? "[]" : "");
        if (!key && !isObjectType(el)) {
          qc = sanitizeURIComponent(el);
        } else {
          qc = toQueryString(el, deep, transform, key, separator);
        }
        result.push(qc);
      }
      return result.join("&");
    }
    function collectObjectAsQueryString(obj, deep, transform, prefix, separator) {
      var result = [];
      forEachProperty(obj, function(val, key) {
        var fullKey;
        if (prefix && deep) {
          fullKey = prefix + "[" + key + "]";
        } else if (prefix) {
          fullKey = prefix + separator + key;
        } else {
          fullKey = key;
        }
        result.push(toQueryString(val, deep, transform, fullKey, separator));
      });
      return result.join("&");
    }
    module.exports = toQueryString;
  }
});

// node_modules/sugar/object/internal/toQueryStringWithOptions.js
var require_toQueryStringWithOptions = __commonJS({
  "node_modules/sugar/object/internal/toQueryStringWithOptions.js"(exports, module) {
    "use strict";
    var isUndefined = require_isUndefined();
    var toQueryString = require_toQueryString();
    function toQueryStringWithOptions(obj, opts) {
      opts = opts || {};
      if (isUndefined(opts.separator)) {
        opts.separator = "_";
      }
      return toQueryString(obj, opts.deep, opts.transform, opts.prefix || "", opts.separator);
    }
    module.exports = toQueryStringWithOptions;
  }
});

// node_modules/sugar/object/toQueryString.js
var require_toQueryString2 = __commonJS({
  "node_modules/sugar/object/toQueryString.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var toQueryStringWithOptions = require_toQueryStringWithOptions();
    Sugar.Object.defineInstanceAndStatic({
      "toQueryString": function(obj, options) {
        return toQueryStringWithOptions(obj, options);
      }
    });
    module.exports = Sugar.Object.toQueryString;
  }
});

// node_modules/sugar/object/internal/getValues.js
var require_getValues = __commonJS({
  "node_modules/sugar/object/internal/getValues.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function getValues(obj) {
      var values = [];
      forEachProperty(obj, function(val) {
        values.push(val);
      });
      return values;
    }
    module.exports = getValues;
  }
});

// node_modules/sugar/object/values.js
var require_values = __commonJS({
  "node_modules/sugar/object/values.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getValues = require_getValues();
    Sugar.Object.defineInstanceAndStatic({
      "values": function(obj) {
        return getValues(obj);
      }
    });
    module.exports = Sugar.Object.values;
  }
});

// node_modules/sugar/object/keys.js
var require_keys = __commonJS({
  "node_modules/sugar/object/keys.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getKeys = require_getKeys();
    Sugar.Object.defineInstance({
      "keys": function(obj) {
        return getKeys(obj);
      }
    });
    module.exports = Sugar.Object.keys;
  }
});

// node_modules/sugar/object/index.js
var require_object = __commonJS({
  "node_modules/sugar/object/index.js"(exports, module) {
    "use strict";
    require_add2();
    require_addAll();
    require_clone3();
    require_defaults2();
    require_exclude2();
    require_fromQueryString();
    require_get();
    require_has();
    require_intersect2();
    require_invert();
    require_isArguments2();
    require_isArray();
    require_isBoolean();
    require_isDate();
    require_isEmpty3();
    require_isEqual3();
    require_isError();
    require_isFunction();
    require_isMap();
    require_isNumber();
    require_isObject();
    require_isRegExp();
    require_isSet();
    require_isString();
    require_merge();
    require_mergeAll2();
    require_reject();
    require_remove3();
    require_select();
    require_set();
    require_size();
    require_subtract2();
    require_tap2();
    require_toQueryString2();
    require_values();
    require_keys();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/date/var/EnglishLocaleBaseDefinition.js
var require_EnglishLocaleBaseDefinition = __commonJS({
  "node_modules/sugar/date/var/EnglishLocaleBaseDefinition.js"(exports, module) {
    "use strict";
    var EnglishLocaleBaseDefinition = {
      "code": "en",
      "plural": true,
      "timeMarkers": "at",
      "ampm": "AM|A.M.|a,PM|P.M.|p",
      "units": "millisecond:|s,second:|s,minute:|s,hour:|s,day:|s,week:|s,month:|s,year:|s",
      "months": "Jan:uary|,Feb:ruary|,Mar:ch|,Apr:il|,May,Jun:e|,Jul:y|,Aug:ust|,Sep:tember|t|,Oct:ober|,Nov:ember|,Dec:ember|",
      "weekdays": "Sun:day|,Mon:day|,Tue:sday|,Wed:nesday|,Thu:rsday|,Fri:day|,Sat:urday|+weekend",
      "numerals": "zero,one|first,two|second,three|third,four:|th,five|fifth,six:|th,seven:|th,eight:|h,nin:e|th,ten:|th",
      "articles": "a,an,the",
      "tokens": "the,st|nd|rd|th,of|in,a|an,on",
      "time": "{H}:{mm}",
      "past": "{num} {unit} {sign}",
      "future": "{num} {unit} {sign}",
      "duration": "{num} {unit}",
      "modifiers": [
        { "name": "half", "src": "half", "value": 0.5 },
        { "name": "midday", "src": "noon", "value": 12 },
        { "name": "midday", "src": "midnight", "value": 24 },
        { "name": "day", "src": "yesterday", "value": -1 },
        { "name": "day", "src": "today|tonight", "value": 0 },
        { "name": "day", "src": "tomorrow", "value": 1 },
        { "name": "sign", "src": "ago|before", "value": -1 },
        { "name": "sign", "src": "from now|after|from|in|later", "value": 1 },
        { "name": "edge", "src": "first day|first|beginning", "value": -2 },
        { "name": "edge", "src": "last day", "value": 1 },
        { "name": "edge", "src": "end|last", "value": 2 },
        { "name": "shift", "src": "last", "value": -1 },
        { "name": "shift", "src": "the|this", "value": 0 },
        { "name": "shift", "src": "next", "value": 1 }
      ],
      "parse": [
        "(?:just)? now",
        "{shift} {unit:5-7}",
        "{months?} {year}",
        "{midday} {4?} {day|weekday}",
        "{months},?[-.\\/\\s]?{year?}",
        "{edge} of (?:day)? {day|weekday}",
        "{0} {num}{1?} {weekday} {2} {months},? {year?}",
        "{shift?} {day?} {weekday?} (?:at)? {midday}",
        "{sign?} {3?} {half} {3?} {unit:3-4|unit:7} {sign?}",
        "{0?} {edge} {weekday?} {2} {shift?} {unit:4-7?} {months?},? {year?}"
      ],
      "timeParse": [
        "{day|weekday}",
        "{shift} {unit:5?} {weekday}",
        "{0?} {date}{1?} {2?} {months?}",
        "{weekday} {2?} {shift} {unit:5}",
        "{0?} {num} {2?} {months}\\.?,? {year?}",
        "{num?} {unit:4-5} {sign} {day|weekday}",
        "{0|months} {date?}{1?} of {shift} {unit:6-7}",
        "{0?} {num}{1?} {weekday} of {shift} {unit:6}",
        "{year?}[-.\\/\\s]?{months}[-.\\/\\s]{date}",
        "{date}[-.\\/\\s]{months}(?:[-.\\/\\s]{year|yy})?",
        "{weekday?}\\.?,? {months}\\.?,? {date}{1?},? {year?}",
        "{weekday?}\\.?,? {date} {months} {year}"
      ],
      "timeFrontParse": [
        "{sign} {num} {unit}",
        "{num} {unit} {sign}",
        "{4?} {day|weekday}"
      ]
    };
    module.exports = EnglishLocaleBaseDefinition;
  }
});

// node_modules/sugar/date/internal/getEnglishVariant.js
var require_getEnglishVariant = __commonJS({
  "node_modules/sugar/date/internal/getEnglishVariant.js"(exports, module) {
    "use strict";
    var EnglishLocaleBaseDefinition = require_EnglishLocaleBaseDefinition();
    var simpleMerge = require_simpleMerge();
    var simpleClone = require_simpleClone();
    function getEnglishVariant(v) {
      return simpleMerge(simpleClone(EnglishLocaleBaseDefinition), v);
    }
    module.exports = getEnglishVariant;
  }
});

// node_modules/sugar/date/var/BritishEnglishDefinition.js
var require_BritishEnglishDefinition = __commonJS({
  "node_modules/sugar/date/var/BritishEnglishDefinition.js"(exports, module) {
    "use strict";
    var getEnglishVariant = require_getEnglishVariant();
    var BritishEnglishDefinition = getEnglishVariant({
      "short": "{dd}/{MM}/{yyyy}",
      "medium": "{d} {Month} {yyyy}",
      "long": "{d} {Month} {yyyy} {H}:{mm}",
      "full": "{Weekday}, {d} {Month}, {yyyy} {time}",
      "stamp": "{Dow} {d} {Mon} {yyyy} {time}"
    });
    module.exports = BritishEnglishDefinition;
  }
});

// node_modules/sugar/date/var/AmericanEnglishDefinition.js
var require_AmericanEnglishDefinition = __commonJS({
  "node_modules/sugar/date/var/AmericanEnglishDefinition.js"(exports, module) {
    "use strict";
    var getEnglishVariant = require_getEnglishVariant();
    var AmericanEnglishDefinition = getEnglishVariant({
      "mdy": true,
      "firstDayOfWeek": 0,
      "firstDayOfWeekYear": 1,
      "short": "{MM}/{dd}/{yyyy}",
      "medium": "{Month} {d}, {yyyy}",
      "long": "{Month} {d}, {yyyy} {time}",
      "full": "{Weekday}, {Month} {d}, {yyyy} {time}",
      "stamp": "{Dow} {Mon} {d} {yyyy} {time}",
      "time": "{h}:{mm} {TT}"
    });
    module.exports = AmericanEnglishDefinition;
  }
});

// node_modules/sugar/date/var/CanadianEnglishDefinition.js
var require_CanadianEnglishDefinition = __commonJS({
  "node_modules/sugar/date/var/CanadianEnglishDefinition.js"(exports, module) {
    "use strict";
    var getEnglishVariant = require_getEnglishVariant();
    var CanadianEnglishDefinition = getEnglishVariant({
      "short": "{yyyy}-{MM}-{dd}",
      "medium": "{d} {Month}, {yyyy}",
      "long": "{d} {Month}, {yyyy} {H}:{mm}",
      "full": "{Weekday}, {d} {Month}, {yyyy} {time}",
      "stamp": "{Dow} {d} {Mon} {yyyy} {time}"
    });
    module.exports = CanadianEnglishDefinition;
  }
});

// node_modules/sugar/date/var/LazyLoadedLocales.js
var require_LazyLoadedLocales = __commonJS({
  "node_modules/sugar/date/var/LazyLoadedLocales.js"(exports, module) {
    "use strict";
    var BritishEnglishDefinition = require_BritishEnglishDefinition();
    var AmericanEnglishDefinition = require_AmericanEnglishDefinition();
    var CanadianEnglishDefinition = require_CanadianEnglishDefinition();
    var LazyLoadedLocales = {
      "en-US": AmericanEnglishDefinition,
      "en-GB": BritishEnglishDefinition,
      "en-AU": BritishEnglishDefinition,
      "en-CA": CanadianEnglishDefinition
    };
    module.exports = LazyLoadedLocales;
  }
});

// node_modules/sugar/date/var/LOCALE_ARRAY_FIELDS.js
var require_LOCALE_ARRAY_FIELDS = __commonJS({
  "node_modules/sugar/date/var/LOCALE_ARRAY_FIELDS.js"(exports, module) {
    "use strict";
    var LOCALE_ARRAY_FIELDS = [
      "months",
      "weekdays",
      "units",
      "numerals",
      "placeholders",
      "articles",
      "tokens",
      "timeMarkers",
      "ampm",
      "timeSuffixes",
      "parse",
      "timeParse",
      "timeFrontParse",
      "modifiers"
    ];
    module.exports = LOCALE_ARRAY_FIELDS;
  }
});

// node_modules/sugar/date/var/ISODefaults.js
var require_ISODefaults = __commonJS({
  "node_modules/sugar/date/var/ISODefaults.js"(exports, module) {
    "use strict";
    module.exports = {
      ISO_FIRST_DAY_OF_WEEK: 1,
      ISO_FIRST_DAY_OF_WEEK_YEAR: 4
    };
  }
});

// node_modules/sugar/date/var/CoreParsingTokens.js
var require_CoreParsingTokens = __commonJS({
  "node_modules/sugar/date/var/CoreParsingTokens.js"(exports, module) {
    "use strict";
    var CoreParsingTokens = {
      "yyyy": {
        param: "year",
        src: "[-−+]?\\d{4,6}"
      },
      "yy": {
        param: "year",
        src: "\\d{2}"
      },
      "y": {
        param: "year",
        src: "\\d"
      },
      "ayy": {
        param: "year",
        src: "'\\d{2}"
      },
      "MM": {
        param: "month",
        src: "(?:1[012]|0?[1-9])"
      },
      "dd": {
        param: "date",
        src: "(?:3[01]|[12][0-9]|0?[1-9])"
      },
      "hh": {
        param: "hour",
        src: "(?:2[0-4]|[01]?[0-9])"
      },
      "mm": {
        param: "minute",
        src: "[0-5]\\d"
      },
      "ss": {
        param: "second",
        src: "[0-5]\\d(?:[,.]\\d+)?"
      },
      "tzHour": {
        src: "[-−+](?:2[0-4]|[01]?[0-9])"
      },
      "tzMinute": {
        src: "[0-5]\\d"
      },
      "iyyyy": {
        param: "year",
        src: "(?:[-−+]?\\d{4}|[-−+]\\d{5,6})"
      },
      "ihh": {
        param: "hour",
        src: "(?:2[0-4]|[01][0-9])(?:[,.]\\d+)?"
      },
      "imm": {
        param: "minute",
        src: "[0-5]\\d(?:[,.]\\d+)?"
      },
      "GMT": {
        param: "utc",
        src: "GMT"
      },
      "Z": {
        param: "utc",
        src: "Z"
      },
      "timestamp": {
        src: "\\d+"
      }
    };
    module.exports = CoreParsingTokens;
  }
});

// node_modules/sugar/date/var/CoreParsingFormats.js
var require_CoreParsingFormats = __commonJS({
  "node_modules/sugar/date/var/CoreParsingFormats.js"(exports, module) {
    "use strict";
    var CoreParsingFormats = [
      {
        // 12-1978
        // 08-1978 (MDY)
        src: "{MM}[-.\\/]{yyyy}"
      },
      {
        // 12/08/1978
        // 08/12/1978 (MDY)
        time: true,
        src: "{dd}[-\\/]{MM}(?:[-\\/]{yyyy|yy|y})?",
        mdy: "{MM}[-\\/]{dd}(?:[-\\/]{yyyy|yy|y})?"
      },
      {
        // 12.08.1978
        // 08.12.1978 (MDY)
        time: true,
        src: "{dd}\\.{MM}(?:\\.{yyyy|yy|y})?",
        mdy: "{MM}\\.{dd}(?:\\.{yyyy|yy|y})?",
        localeCheck: function(loc) {
          return loc.timeSeparator !== ".";
        }
      },
      {
        // 1975-08-25
        time: true,
        src: "{yyyy}[-.\\/]{MM}(?:[-.\\/]{dd})?"
      },
      {
        // .NET JSON
        src: "\\\\/Date\\({timestamp}(?:[-+]\\d{4,4})?\\)\\\\/"
      },
      {
        // ISO-8601
        src: "{iyyyy}(?:-?{MM}(?:-?{dd}(?:T{ihh}(?::?{imm}(?::?{ss})?)?)?)?)?{tzOffset?}"
      }
    ];
    module.exports = CoreParsingFormats;
  }
});

// node_modules/sugar/date/var/LocalizedParsingTokens.js
var require_LocalizedParsingTokens = __commonJS({
  "node_modules/sugar/date/var/LocalizedParsingTokens.js"(exports, module) {
    "use strict";
    var LocalizedParsingTokens = {
      "year": {
        base: "yyyy|ayy",
        requiresSuffix: true
      },
      "month": {
        base: "MM",
        requiresSuffix: true
      },
      "date": {
        base: "dd",
        requiresSuffix: true
      },
      "hour": {
        base: "hh",
        requiresSuffixOr: ":"
      },
      "minute": {
        base: "mm"
      },
      "second": {
        base: "ss"
      },
      "num": {
        src: "\\d+",
        requiresNumerals: true
      }
    };
    module.exports = LocalizedParsingTokens;
  }
});

// node_modules/sugar/date/internal/getArrayWithOffset.js
var require_getArrayWithOffset = __commonJS({
  "node_modules/sugar/date/internal/getArrayWithOffset.js"(exports, module) {
    "use strict";
    function getArrayWithOffset(arr, n, alternate, offset) {
      var val;
      if (alternate > 1) {
        val = arr[n + (alternate - 1) * offset];
      }
      return val || arr[n];
    }
    module.exports = getArrayWithOffset;
  }
});

// node_modules/sugar/date/internal/getRegNonCapturing.js
var require_getRegNonCapturing = __commonJS({
  "node_modules/sugar/date/internal/getRegNonCapturing.js"(exports, module) {
    "use strict";
    function getRegNonCapturing(src, opt) {
      if (src.length > 1) {
        src = "(?:" + src + ")";
      }
      if (opt) {
        src += "?";
      }
      return src;
    }
    module.exports = getRegNonCapturing;
  }
});

// node_modules/sugar/common/var/PRIVATE_PROP_PREFIX.js
var require_PRIVATE_PROP_PREFIX = __commonJS({
  "node_modules/sugar/common/var/PRIVATE_PROP_PREFIX.js"(exports, module) {
    "use strict";
    module.exports = "_sugar_";
  }
});

// node_modules/sugar/common/internal/privatePropertyAccessor.js
var require_privatePropertyAccessor = __commonJS({
  "node_modules/sugar/common/internal/privatePropertyAccessor.js"(exports, module) {
    "use strict";
    var PRIVATE_PROP_PREFIX = require_PRIVATE_PROP_PREFIX();
    var coreUtilityAliases = require_coreUtilityAliases();
    var setProperty = coreUtilityAliases.setProperty;
    function privatePropertyAccessor(key) {
      var privateKey = PRIVATE_PROP_PREFIX + key;
      return function(obj, val) {
        if (arguments.length > 1) {
          setProperty(obj, privateKey, val);
          return obj;
        }
        return obj[privateKey];
      };
    }
    module.exports = privatePropertyAccessor;
  }
});

// node_modules/sugar/common/var/_utc.js
var require_utc = __commonJS({
  "node_modules/sugar/common/var/_utc.js"(exports, module) {
    "use strict";
    var privatePropertyAccessor = require_privatePropertyAccessor();
    module.exports = privatePropertyAccessor("utc");
  }
});

// node_modules/sugar/common/internal/callDateGet.js
var require_callDateGet = __commonJS({
  "node_modules/sugar/common/internal/callDateGet.js"(exports, module) {
    "use strict";
    var _utc = require_utc();
    function callDateGet(d, method) {
      return d["get" + (_utc(d) ? "UTC" : "") + method]();
    }
    module.exports = callDateGet;
  }
});

// node_modules/sugar/date/internal/getYear.js
var require_getYear = __commonJS({
  "node_modules/sugar/date/internal/getYear.js"(exports, module) {
    "use strict";
    var callDateGet = require_callDateGet();
    function getYear(d) {
      return callDateGet(d, "FullYear");
    }
    module.exports = getYear;
  }
});

// node_modules/sugar/date/internal/getMonth.js
var require_getMonth = __commonJS({
  "node_modules/sugar/date/internal/getMonth.js"(exports, module) {
    "use strict";
    var callDateGet = require_callDateGet();
    function getMonth(d) {
      return callDateGet(d, "Month");
    }
    module.exports = getMonth;
  }
});

// node_modules/sugar/date/internal/getDaysInMonth.js
var require_getDaysInMonth = __commonJS({
  "node_modules/sugar/date/internal/getDaysInMonth.js"(exports, module) {
    "use strict";
    var getYear = require_getYear();
    var getMonth = require_getMonth();
    var callDateGet = require_callDateGet();
    function getDaysInMonth(d) {
      return 32 - callDateGet(new Date(getYear(d), getMonth(d), 32), "Date");
    }
    module.exports = getDaysInMonth;
  }
});

// node_modules/sugar/date/var/DateUnits.js
var require_DateUnits = __commonJS({
  "node_modules/sugar/date/var/DateUnits.js"(exports, module) {
    "use strict";
    var getDaysInMonth = require_getDaysInMonth();
    var DateUnits = [
      {
        name: "millisecond",
        method: "Milliseconds",
        multiplier: 1,
        start: 0,
        end: 999
      },
      {
        name: "second",
        method: "Seconds",
        multiplier: 1e3,
        start: 0,
        end: 59
      },
      {
        name: "minute",
        method: "Minutes",
        multiplier: 60 * 1e3,
        start: 0,
        end: 59
      },
      {
        name: "hour",
        method: "Hours",
        multiplier: 60 * 60 * 1e3,
        start: 0,
        end: 23
      },
      {
        name: "day",
        alias: "date",
        method: "Date",
        ambiguous: true,
        multiplier: 24 * 60 * 60 * 1e3,
        start: 1,
        end: function(d) {
          return getDaysInMonth(d);
        }
      },
      {
        name: "week",
        method: "ISOWeek",
        ambiguous: true,
        multiplier: 7 * 24 * 60 * 60 * 1e3
      },
      {
        name: "month",
        method: "Month",
        ambiguous: true,
        multiplier: 30.4375 * 24 * 60 * 60 * 1e3,
        start: 0,
        end: 11
      },
      {
        name: "year",
        method: "FullYear",
        ambiguous: true,
        multiplier: 365.25 * 24 * 60 * 60 * 1e3,
        start: 0
      }
    ];
    module.exports = DateUnits;
  }
});

// node_modules/sugar/date/var/DateUnitIndexes.js
var require_DateUnitIndexes = __commonJS({
  "node_modules/sugar/date/var/DateUnitIndexes.js"(exports, module) {
    "use strict";
    module.exports = {
      HOURS_INDEX: 3,
      DAY_INDEX: 4,
      WEEK_INDEX: 5,
      MONTH_INDEX: 6,
      YEAR_INDEX: 7
    };
  }
});

// node_modules/sugar/date/internal/iterateOverDateUnits.js
var require_iterateOverDateUnits = __commonJS({
  "node_modules/sugar/date/internal/iterateOverDateUnits.js"(exports, module) {
    "use strict";
    var DateUnits = require_DateUnits();
    var DateUnitIndexes = require_DateUnitIndexes();
    var isUndefined = require_isUndefined();
    var YEAR_INDEX = DateUnitIndexes.YEAR_INDEX;
    function iterateOverDateUnits(fn, startIndex, endIndex) {
      endIndex = endIndex || 0;
      if (isUndefined(startIndex)) {
        startIndex = YEAR_INDEX;
      }
      for (var index = startIndex; index >= endIndex; index--) {
        if (fn(DateUnits[index], index) === false) {
          break;
        }
      }
    }
    module.exports = iterateOverDateUnits;
  }
});

// node_modules/sugar/date/internal/arrayToRegAlternates.js
var require_arrayToRegAlternates = __commonJS({
  "node_modules/sugar/date/internal/arrayToRegAlternates.js"(exports, module) {
    "use strict";
    var map = require_map();
    var escapeRegExp = require_escapeRegExp();
    function arrayToRegAlternates(arr) {
      var joined = arr.join("");
      if (!arr || !arr.length) {
        return "";
      }
      if (joined.length === arr.length) {
        return "[" + joined + "]";
      }
      return map(arr, escapeRegExp).join("|");
    }
    module.exports = arrayToRegAlternates;
  }
});

// node_modules/sugar/date/internal/getAdjustedUnit.js
var require_getAdjustedUnit = __commonJS({
  "node_modules/sugar/date/internal/getAdjustedUnit.js"(exports, module) {
    "use strict";
    var mathAliases = require_mathAliases();
    var iterateOverDateUnits = require_iterateOverDateUnits();
    var abs = mathAliases.abs;
    function getAdjustedUnit(ms, fn) {
      var unitIndex = 0, value = 0;
      iterateOverDateUnits(function(unit, i) {
        value = abs(fn(unit));
        if (value >= 1) {
          unitIndex = i;
          return false;
        }
      });
      return [value, unitIndex, ms];
    }
    module.exports = getAdjustedUnit;
  }
});

// node_modules/sugar/date/internal/getAdjustedUnitForNumber.js
var require_getAdjustedUnitForNumber = __commonJS({
  "node_modules/sugar/date/internal/getAdjustedUnitForNumber.js"(exports, module) {
    "use strict";
    var trunc = require_trunc();
    var withPrecision = require_withPrecision();
    var getAdjustedUnit = require_getAdjustedUnit();
    function getAdjustedUnitForNumber(ms) {
      return getAdjustedUnit(ms, function(unit) {
        return trunc(withPrecision(ms / unit.multiplier, 1));
      });
    }
    module.exports = getAdjustedUnitForNumber;
  }
});

// node_modules/sugar/date/internal/getParsingTokenWithSuffix.js
var require_getParsingTokenWithSuffix = __commonJS({
  "node_modules/sugar/date/internal/getParsingTokenWithSuffix.js"(exports, module) {
    "use strict";
    var LocalizedParsingTokens = require_LocalizedParsingTokens();
    var getRegNonCapturing = require_getRegNonCapturing();
    function getParsingTokenWithSuffix(field, src, suffix) {
      var token = LocalizedParsingTokens[field];
      if (token.requiresSuffix) {
        src = getRegNonCapturing(src + getRegNonCapturing(suffix));
      } else if (token.requiresSuffixOr) {
        src += getRegNonCapturing(token.requiresSuffixOr + "|" + suffix);
      } else {
        src += getRegNonCapturing(suffix, true);
      }
      return src;
    }
    module.exports = getParsingTokenWithSuffix;
  }
});

// node_modules/sugar/date/internal/getNewLocale.js
var require_getNewLocale = __commonJS({
  "node_modules/sugar/date/internal/getNewLocale.js"(exports, module) {
    "use strict";
    var LOCALE_ARRAY_FIELDS = require_LOCALE_ARRAY_FIELDS();
    var ISODefaults = require_ISODefaults();
    var CoreParsingTokens = require_CoreParsingTokens();
    var CoreParsingFormats = require_CoreParsingFormats();
    var LocalizedParsingTokens = require_LocalizedParsingTokens();
    var map = require_map();
    var filter = require_filter();
    var forEach = require_forEach();
    var isDefined = require_isDefined();
    var commaSplit = require_commaSplit();
    var classChecks = require_classChecks();
    var mathAliases = require_mathAliases();
    var isUndefined = require_isUndefined();
    var simpleMerge = require_simpleMerge();
    var getOrdinalSuffix = require_getOrdinalSuffix();
    var getArrayWithOffset = require_getArrayWithOffset();
    var getRegNonCapturing = require_getRegNonCapturing();
    var coreUtilityAliases = require_coreUtilityAliases();
    var iterateOverDateUnits = require_iterateOverDateUnits();
    var arrayToRegAlternates = require_arrayToRegAlternates();
    var fullwidthNumberHelpers = require_fullwidthNumberHelpers();
    var getAdjustedUnitForNumber = require_getAdjustedUnitForNumber();
    var getParsingTokenWithSuffix = require_getParsingTokenWithSuffix();
    var hasOwn = coreUtilityAliases.hasOwn;
    var getOwn = coreUtilityAliases.getOwn;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    var fullWidthNumberMap = fullwidthNumberHelpers.fullWidthNumberMap;
    var fullWidthNumbers = fullwidthNumberHelpers.fullWidthNumbers;
    var pow = mathAliases.pow;
    var max = mathAliases.max;
    var ISO_FIRST_DAY_OF_WEEK = ISODefaults.ISO_FIRST_DAY_OF_WEEK;
    var ISO_FIRST_DAY_OF_WEEK_YEAR = ISODefaults.ISO_FIRST_DAY_OF_WEEK_YEAR;
    var isString = classChecks.isString;
    var isFunction = classChecks.isFunction;
    function getNewLocale(def) {
      function Locale(def2) {
        this.init(def2);
      }
      Locale.prototype = {
        getMonthName: function(n, alternate) {
          if (this.monthSuffix) {
            return n + 1 + this.monthSuffix;
          }
          return getArrayWithOffset(this.months, n, alternate, 12);
        },
        getWeekdayName: function(n, alternate) {
          return getArrayWithOffset(this.weekdays, n, alternate, 7);
        },
        // TODO: rename to parse in next major version
        parseValue: function(str, param) {
          var map2 = this[param + "Map"];
          if (hasOwn(map2, str)) {
            return map2[str];
          }
          return this.parseNumber(str, param);
        },
        // TODO: analyze performance of parsing first vs checking
        // numeralMap first.
        parseNumber: function(str, param) {
          var val;
          if (hasOwn(this.numeralMap, str)) {
            val = this.numeralMap[str];
          }
          if (isNaN(val)) {
            val = this.parseRegularNumerals(str);
          }
          if (isNaN(val)) {
            val = this.parseIrregularNumerals(str);
          }
          if (param === "month") {
            val -= 1;
          }
          return val;
        },
        // TODO: perf test returning up front if no regular decimals exist
        parseRegularNumerals: function(str) {
          str = str.replace(/^−/, "-").replace(/,/, ".");
          return +str;
        },
        parseIrregularNumerals: function(str) {
          var place = 1, num = 0, lastWasPlace, isPlace, numeral, digit, arr;
          arr = str.split("");
          for (var i = arr.length - 1; numeral = arr[i]; i--) {
            digit = getOwn(this.numeralMap, numeral);
            if (isUndefined(digit)) {
              digit = getOwn(fullWidthNumberMap, numeral) || 0;
            }
            isPlace = digit > 0 && digit % 10 === 0;
            if (isPlace) {
              if (lastWasPlace) {
                num += place;
              }
              if (i) {
                place = digit;
              } else {
                num += digit;
              }
            } else {
              num += digit * place;
              place *= 10;
            }
            lastWasPlace = isPlace;
          }
          return num;
        },
        getOrdinal: function(n) {
          var suffix = this.ordinalSuffix;
          return suffix || getOrdinalSuffix(n);
        },
        getRelativeFormat: function(adu, type) {
          return this.convertAdjustedToFormat(adu, type);
        },
        getDuration: function(ms) {
          return this.convertAdjustedToFormat(getAdjustedUnitForNumber(max(0, ms)), "duration");
        },
        getFirstDayOfWeek: function() {
          var val = this.firstDayOfWeek;
          return isDefined(val) ? val : ISO_FIRST_DAY_OF_WEEK;
        },
        getFirstDayOfWeekYear: function() {
          return this.firstDayOfWeekYear || ISO_FIRST_DAY_OF_WEEK_YEAR;
        },
        convertAdjustedToFormat: function(adu, type) {
          var sign, unit, mult, num = adu[0], u = adu[1], ms = adu[2], format = this[type] || this.relative;
          if (isFunction(format)) {
            return format.call(this, num, u, ms, type);
          }
          mult = !this.plural || num === 1 ? 0 : 1;
          unit = this.units[mult * 8 + u] || this.units[u];
          sign = this[ms > 0 ? "fromNow" : "ago"];
          return format.replace(/\{(.*?)\}/g, function(full, match) {
            switch (match) {
              case "num":
                return num;
              case "unit":
                return unit;
              case "sign":
                return sign;
            }
          });
        },
        cacheFormat: function(dif, i) {
          this.compiledFormats.splice(i, 1);
          this.compiledFormats.unshift(dif);
        },
        addFormat: function(format) {
          var loc = this, src, to;
          function getTokenSrc(token) {
            var suffix, src2, tmp, opt = token.match(/\?$/), nc = token.match(/^(\d+)\??$/), slice = token.match(/(\d)(?:-(\d))?/), param = token.replace(/[^a-z]+$/i, "");
            if (tmp = getOwn(loc.parsingAliases, param)) {
              src2 = formatToSrc(tmp);
              if (opt) {
                src2 = getRegNonCapturing(src2, true);
              }
              return src2;
            }
            if (nc) {
              src2 = loc.tokens[nc[1]];
            } else if (tmp = getOwn(CoreParsingTokens, param)) {
              src2 = tmp.src;
              param = tmp.param || param;
            } else {
              tmp = getOwn(loc.parsingTokens, param) || getOwn(loc, param);
              param = param.replace(/s$/, "");
              if (!tmp) {
                tmp = getOwn(loc.parsingTokens, param) || getOwn(loc, param + "s");
              }
              if (isString(tmp)) {
                src2 = tmp;
                suffix = loc[param + "Suffix"];
              } else {
                if (param === "weekday" && loc.code === "ko") {
                  tmp = filter(tmp, function(str) {
                    return str.length > 1;
                  });
                }
                if (slice) {
                  tmp = filter(tmp, function(m, i) {
                    var mod = i % (loc.units ? 8 : tmp.length);
                    return mod >= slice[1] && mod <= (slice[2] || slice[1]);
                  });
                }
                src2 = arrayToRegAlternates(tmp);
              }
            }
            if (!src2) {
              return "";
            }
            if (nc) {
              src2 = getRegNonCapturing(src2);
            } else {
              to.push(param);
              src2 = "(" + src2 + ")";
            }
            if (suffix) {
              src2 = getParsingTokenWithSuffix(param, src2, suffix);
            }
            if (opt) {
              src2 += "?";
            }
            return src2;
          }
          function formatToSrc(str) {
            str = str.replace(/ /g, " ?");
            str = str.replace(/\{([^,]+?)\}/g, function(match, token) {
              var tokens = token.split("|");
              if (tokens.length > 1) {
                return getRegNonCapturing(map(tokens, getTokenSrc).join("|"));
              } else {
                return getTokenSrc(token);
              }
            });
            return str;
          }
          function parseInputFormat() {
            to = [];
            src = formatToSrc(format);
          }
          parseInputFormat();
          loc.addRawFormat(src, to);
        },
        addRawFormat: function(format, to) {
          this.compiledFormats.unshift({
            reg: RegExp("^ *" + format + " *$", "i"),
            to
          });
        },
        init: function(def2) {
          var loc = this;
          function initFormats() {
            loc.compiledFormats = [];
            loc.parsingAliases = {};
            loc.parsingTokens = {};
          }
          function initDefinition() {
            simpleMerge(loc, def2);
          }
          function initArrayFields() {
            forEach(LOCALE_ARRAY_FIELDS, function(name) {
              var val = loc[name];
              if (isString(val)) {
                loc[name] = commaSplit(val);
              } else if (!val) {
                loc[name] = [];
              }
            });
          }
          function buildValueArray(name, mod, map2, fn) {
            var field = name, all = [], setMap;
            if (!loc[field]) {
              field += "s";
            }
            if (!map2) {
              map2 = {};
              setMap = true;
            }
            forAllAlternates(field, function(alt, j, i) {
              var idx = j * mod + i, val;
              val = fn ? fn(i) : i;
              map2[alt] = val;
              map2[alt.toLowerCase()] = val;
              all[idx] = alt;
            });
            loc[field] = all;
            if (setMap) {
              loc[name + "Map"] = map2;
            }
          }
          function forAllAlternates(field, fn) {
            forEach(loc[field], function(str, i) {
              forEachAlternate(str, function(alt, j) {
                fn(alt, j, i);
              });
            });
          }
          function forEachAlternate(str, fn) {
            var arr = map(str.split("+"), function(split) {
              return split.replace(/(.+):(.+)$/, function(full, base, suffixes) {
                return map(suffixes.split("|"), function(suffix) {
                  return base + suffix;
                }).join("|");
              });
            }).join("|");
            forEach(arr.split("|"), fn);
          }
          function buildNumerals() {
            var map2 = {};
            buildValueArray("numeral", 10, map2);
            buildValueArray("article", 1, map2, function() {
              return 1;
            });
            buildValueArray("placeholder", 4, map2, function(n) {
              return pow(10, n + 1);
            });
            loc.numeralMap = map2;
          }
          function buildTimeFormats() {
            loc.parsingAliases["time"] = getTimeFormat();
            loc.parsingAliases["tzOffset"] = getTZOffsetFormat();
          }
          function getTimeFormat(standalone) {
            var src, sep;
            sep = getTimeSeparatorSrc(standalone);
            if (loc.ampmFront) {
              src = "{ampm?} {hour} (?:{minute} (?::?{second})?)?";
            } else if (loc.ampm.length) {
              src = "{hour}(?:" + sep + "{minute?}(?:" + sep + "{second?})? {ampm?}| {ampm})";
            } else {
              src = "{hour}(?:" + sep + "{minute?}(?:" + sep + "{second?})?)";
            }
            return src;
          }
          function getTimeSeparatorSrc() {
            if (loc.timeSeparator) {
              return "[:" + loc.timeSeparator + "]";
            } else {
              return ":";
            }
          }
          function getTZOffsetFormat() {
            return "(?:{Z}|{GMT?}(?:{tzHour}(?::?{tzMinute}(?: \\([\\w\\s]+\\))?)?)?)?";
          }
          function buildParsingTokens() {
            forEachProperty(LocalizedParsingTokens, function(token, name) {
              var src = token.base ? getCoreTokensForBase(token.base) : token.src, arr;
              if (token.requiresNumerals || loc.numeralUnits) {
                src += getNumeralSrc();
              }
              arr = loc[name + "s"];
              if (arr && arr.length) {
                src += "|" + arrayToRegAlternates(arr);
              }
              loc.parsingTokens[name] = src;
            });
          }
          function getCoreTokensForBase(base) {
            return map(base.split("|"), function(key) {
              return CoreParsingTokens[key].src;
            }).join("|");
          }
          function getNumeralSrc() {
            var all, src = "";
            all = loc.numerals.concat(loc.placeholders).concat(loc.articles);
            if (loc.allowsFullWidth) {
              all = all.concat(fullWidthNumbers.split(""));
            }
            if (all.length) {
              src = "|(?:" + arrayToRegAlternates(all) + ")+";
            }
            return src;
          }
          function buildTimeSuffixes() {
            iterateOverDateUnits(function(unit, i) {
              var token = loc.timeSuffixes[i];
              if (token) {
                loc[(unit.alias || unit.name) + "Suffix"] = token;
              }
            });
          }
          function buildModifiers() {
            forEach(loc.modifiers, function(modifier) {
              var name = modifier.name, mapKey = name + "Map", map2;
              map2 = loc[mapKey] || {};
              forEachAlternate(modifier.src, function(alt, j) {
                var token = getOwn(loc.parsingTokens, name), val = modifier.value;
                map2[alt] = val;
                loc.parsingTokens[name] = token ? token + "|" + alt : alt;
                if (modifier.name === "sign" && j === 0) {
                  loc[val === 1 ? "fromNow" : "ago"] = alt;
                }
              });
              loc[mapKey] = map2;
            });
          }
          function addCoreFormats() {
            forEach(CoreParsingFormats, function(df) {
              var src = df.src;
              if (df.localeCheck && !df.localeCheck(loc)) {
                return;
              }
              if (df.mdy && loc.mdy) {
                src = df.mdy;
              }
              if (df.time) {
                loc.addFormat(getFormatWithTime(src, true));
                loc.addFormat(getFormatWithTime(src));
              } else {
                loc.addFormat(src);
              }
            });
            loc.addFormat("{time}");
          }
          function addLocaleFormats() {
            addFormatSet("parse");
            addFormatSet("timeParse", true);
            addFormatSet("timeFrontParse", true, true);
          }
          function addFormatSet(field, allowTime, timeFront) {
            forEach(loc[field], function(format) {
              if (allowTime) {
                format = getFormatWithTime(format, timeFront);
              }
              loc.addFormat(format);
            });
          }
          function getFormatWithTime(baseFormat, timeBefore) {
            if (timeBefore) {
              return getTimeBefore() + baseFormat;
            }
            return baseFormat + getTimeAfter();
          }
          function getTimeBefore() {
            return getRegNonCapturing("{time}[,\\s\\u3000]", true);
          }
          function getTimeAfter() {
            var markers = ",?[\\s\\u3000]", localized;
            localized = arrayToRegAlternates(loc.timeMarkers);
            if (localized) {
              markers += "| (?:" + localized + ") ";
            }
            markers = getRegNonCapturing(markers, loc.timeMarkerOptional);
            return getRegNonCapturing(markers + "{time}{tzOffset}", true);
          }
          initFormats();
          initDefinition();
          initArrayFields();
          buildValueArray("month", 12);
          buildValueArray("weekday", 7);
          buildValueArray("unit", 8);
          buildValueArray("ampm", 2);
          buildNumerals();
          buildTimeFormats();
          buildParsingTokens();
          buildTimeSuffixes();
          buildModifiers();
          addCoreFormats();
          addLocaleFormats();
        }
      };
      return new Locale(def);
    }
    module.exports = getNewLocale;
  }
});

// node_modules/sugar/date/var/LocaleHelpers.js
var require_LocaleHelpers = __commonJS({
  "node_modules/sugar/date/var/LocaleHelpers.js"(exports, module) {
    "use strict";
    var LazyLoadedLocales = require_LazyLoadedLocales();
    var AmericanEnglishDefinition = require_AmericanEnglishDefinition();
    var getNewLocale = require_getNewLocale();
    var English;
    var localeManager;
    function buildLocales() {
      function LocaleManager(loc) {
        this.locales = {};
        this.add(loc);
      }
      LocaleManager.prototype = {
        get: function(code, fallback) {
          var loc = this.locales[code];
          if (!loc && LazyLoadedLocales[code]) {
            loc = this.add(code, LazyLoadedLocales[code]);
          } else if (!loc && code) {
            loc = this.locales[code.slice(0, 2)];
          }
          return loc || fallback === false ? loc : this.current;
        },
        getAll: function() {
          return this.locales;
        },
        set: function(code) {
          var loc = this.get(code, false);
          if (!loc) {
            throw new TypeError("Invalid Locale: " + code);
          }
          return this.current = loc;
        },
        add: function(code, def) {
          if (!def) {
            def = code;
            code = def.code;
          } else {
            def.code = code;
          }
          var loc = def.compiledFormats ? def : getNewLocale(def);
          this.locales[code] = loc;
          if (!this.current) {
            this.current = loc;
          }
          return loc;
        },
        remove: function(code) {
          if (this.current.code === code) {
            this.current = this.get("en");
          }
          return delete this.locales[code];
        }
      };
      English = getNewLocale(AmericanEnglishDefinition);
      localeManager = new LocaleManager(English);
    }
    buildLocales();
    module.exports = {
      English,
      localeManager
    };
  }
});

// node_modules/sugar/date/addLocale.js
var require_addLocale = __commonJS({
  "node_modules/sugar/date/addLocale.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LocaleHelpers = require_LocaleHelpers();
    var localeManager = LocaleHelpers.localeManager;
    Sugar.Date.defineStatic({
      "addLocale": function(code, set) {
        return localeManager.add(code, set);
      }
    });
    module.exports = Sugar.Date.addLocale;
  }
});

// node_modules/sugar/date/var/MINUTES.js
var require_MINUTES = __commonJS({
  "node_modules/sugar/date/var/MINUTES.js"(exports, module) {
    "use strict";
    module.exports = 60 * 1e3;
  }
});

// node_modules/sugar/date/var/ABBREVIATED_YEAR_REG.js
var require_ABBREVIATED_YEAR_REG = __commonJS({
  "node_modules/sugar/date/var/ABBREVIATED_YEAR_REG.js"(exports, module) {
    "use strict";
    module.exports = /^'?(\d{1,2})$/;
  }
});

// node_modules/sugar/date/internal/tzOffset.js
var require_tzOffset = __commonJS({
  "node_modules/sugar/date/internal/tzOffset.js"(exports, module) {
    "use strict";
    function tzOffset(d) {
      return d.getTimezoneOffset();
    }
    module.exports = tzOffset;
  }
});

// node_modules/sugar/common/internal/callDateSet.js
var require_callDateSet = __commonJS({
  "node_modules/sugar/common/internal/callDateSet.js"(exports, module) {
    "use strict";
    var _utc = require_utc();
    var callDateGet = require_callDateGet();
    function callDateSet(d, method, value, safe) {
      if (safe && value === callDateGet(d, method, value)) {
        return;
      }
      d["set" + (_utc(d) ? "UTC" : "") + method](value);
    }
    module.exports = callDateSet;
  }
});

// node_modules/sugar/date/internal/getLowerUnitIndex.js
var require_getLowerUnitIndex = __commonJS({
  "node_modules/sugar/date/internal/getLowerUnitIndex.js"(exports, module) {
    "use strict";
    var DateUnitIndexes = require_DateUnitIndexes();
    var HOURS_INDEX = DateUnitIndexes.HOURS_INDEX;
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    var WEEK_INDEX = DateUnitIndexes.WEEK_INDEX;
    var MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;
    function getLowerUnitIndex(index) {
      if (index === MONTH_INDEX) {
        return DAY_INDEX;
      } else if (index === WEEK_INDEX) {
        return HOURS_INDEX;
      }
      return index - 1;
    }
    module.exports = getLowerUnitIndex;
  }
});

// node_modules/sugar/date/internal/walkUnitDown.js
var require_walkUnitDown = __commonJS({
  "node_modules/sugar/date/internal/walkUnitDown.js"(exports, module) {
    "use strict";
    var DateUnits = require_DateUnits();
    var getLowerUnitIndex = require_getLowerUnitIndex();
    function walkUnitDown(unitIndex, fn) {
      while (unitIndex >= 0) {
        if (fn(DateUnits[unitIndex], unitIndex) === false) {
          break;
        }
        unitIndex = getLowerUnitIndex(unitIndex);
      }
    }
    module.exports = walkUnitDown;
  }
});

// node_modules/sugar/date/internal/setUnitAndLowerToEdge.js
var require_setUnitAndLowerToEdge = __commonJS({
  "node_modules/sugar/date/internal/setUnitAndLowerToEdge.js"(exports, module) {
    "use strict";
    var isDefined = require_isDefined();
    var classChecks = require_classChecks();
    var callDateSet = require_callDateSet();
    var walkUnitDown = require_walkUnitDown();
    var isFunction = classChecks.isFunction;
    function setUnitAndLowerToEdge(d, startIndex, stopIndex, end) {
      walkUnitDown(startIndex, function(unit, i) {
        var val = end ? unit.end : unit.start;
        if (isFunction(val)) {
          val = val(d);
        }
        callDateSet(d, unit.method, val);
        return !isDefined(stopIndex) || i > stopIndex;
      });
      return d;
    }
    module.exports = setUnitAndLowerToEdge;
  }
});

// node_modules/sugar/date/internal/resetTime.js
var require_resetTime = __commonJS({
  "node_modules/sugar/date/internal/resetTime.js"(exports, module) {
    "use strict";
    var DateUnitIndexes = require_DateUnitIndexes();
    var setUnitAndLowerToEdge = require_setUnitAndLowerToEdge();
    var HOURS_INDEX = DateUnitIndexes.HOURS_INDEX;
    function resetTime(d) {
      return setUnitAndLowerToEdge(d, HOURS_INDEX);
    }
    module.exports = resetTime;
  }
});

// node_modules/sugar/date/internal/defaultNewDate.js
var require_defaultNewDate = __commonJS({
  "node_modules/sugar/date/internal/defaultNewDate.js"(exports, module) {
    "use strict";
    function defaultNewDate() {
      return /* @__PURE__ */ new Date();
    }
    module.exports = defaultNewDate;
  }
});

// node_modules/sugar/date/var/DATE_OPTIONS.js
var require_DATE_OPTIONS = __commonJS({
  "node_modules/sugar/date/var/DATE_OPTIONS.js"(exports, module) {
    "use strict";
    var defaultNewDate = require_defaultNewDate();
    var DATE_OPTIONS = {
      "newDateInternal": defaultNewDate
    };
    module.exports = DATE_OPTIONS;
  }
});

// node_modules/sugar/date/var/_dateOptions.js
var require_dateOptions = __commonJS({
  "node_modules/sugar/date/var/_dateOptions.js"(exports, module) {
    "use strict";
    var DATE_OPTIONS = require_DATE_OPTIONS();
    var namespaceAliases = require_namespaceAliases();
    var defineOptionsAccessor = require_defineOptionsAccessor();
    var sugarDate = namespaceAliases.sugarDate;
    module.exports = defineOptionsAccessor(sugarDate, DATE_OPTIONS);
  }
});

// node_modules/sugar/date/internal/getNewDate.js
var require_getNewDate = __commonJS({
  "node_modules/sugar/date/internal/getNewDate.js"(exports, module) {
    "use strict";
    var _dateOptions = require_dateOptions();
    function getNewDate() {
      return _dateOptions("newDateInternal")();
    }
    module.exports = getNewDate;
  }
});

// node_modules/sugar/date/internal/setDate.js
var require_setDate = __commonJS({
  "node_modules/sugar/date/internal/setDate.js"(exports, module) {
    "use strict";
    var callDateSet = require_callDateSet();
    function setDate(d, val) {
      callDateSet(d, "Date", val);
    }
    module.exports = setDate;
  }
});

// node_modules/sugar/date/internal/getDate.js
var require_getDate = __commonJS({
  "node_modules/sugar/date/internal/getDate.js"(exports, module) {
    "use strict";
    var callDateGet = require_callDateGet();
    function getDate(d) {
      return callDateGet(d, "Date");
    }
    module.exports = getDate;
  }
});

// node_modules/sugar/date/internal/getWeekday.js
var require_getWeekday = __commonJS({
  "node_modules/sugar/date/internal/getWeekday.js"(exports, module) {
    "use strict";
    var callDateGet = require_callDateGet();
    function getWeekday(d) {
      return callDateGet(d, "Day");
    }
    module.exports = getWeekday;
  }
});

// node_modules/sugar/date/internal/setWeekday.js
var require_setWeekday = __commonJS({
  "node_modules/sugar/date/internal/setWeekday.js"(exports, module) {
    "use strict";
    var setDate = require_setDate();
    var getDate = require_getDate();
    var getWeekday = require_getWeekday();
    var classChecks = require_classChecks();
    var mathAliases = require_mathAliases();
    var isNumber = classChecks.isNumber;
    var abs = mathAliases.abs;
    function setWeekday(d, dow, dir) {
      if (!isNumber(dow))
        return;
      var currentWeekday = getWeekday(d);
      if (dir) {
        var ndir = dir > 0 ? 1 : -1;
        var offset = dow % 7 - currentWeekday;
        if (offset && offset / abs(offset) !== ndir) {
          dow += 7 * ndir;
        }
      }
      setDate(d, getDate(d) + dow - currentWeekday);
      return d.getTime();
    }
    module.exports = setWeekday;
  }
});

// node_modules/sugar/date/internal/resetLowerUnits.js
var require_resetLowerUnits = __commonJS({
  "node_modules/sugar/date/internal/resetLowerUnits.js"(exports, module) {
    "use strict";
    var getLowerUnitIndex = require_getLowerUnitIndex();
    var setUnitAndLowerToEdge = require_setUnitAndLowerToEdge();
    function resetLowerUnits(d, unitIndex) {
      return setUnitAndLowerToEdge(d, getLowerUnitIndex(unitIndex));
    }
    module.exports = resetLowerUnits;
  }
});

// node_modules/sugar/date/internal/getHigherUnitIndex.js
var require_getHigherUnitIndex = __commonJS({
  "node_modules/sugar/date/internal/getHigherUnitIndex.js"(exports, module) {
    "use strict";
    var DateUnitIndexes = require_DateUnitIndexes();
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    var MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;
    function getHigherUnitIndex(index) {
      return index === DAY_INDEX ? MONTH_INDEX : index + 1;
    }
    module.exports = getHigherUnitIndex;
  }
});

// node_modules/sugar/date/internal/setYear.js
var require_setYear = __commonJS({
  "node_modules/sugar/date/internal/setYear.js"(exports, module) {
    "use strict";
    var callDateSet = require_callDateSet();
    function setYear(d, val) {
      callDateSet(d, "FullYear", val);
    }
    module.exports = setYear;
  }
});

// node_modules/sugar/date/internal/setMonth.js
var require_setMonth = __commonJS({
  "node_modules/sugar/date/internal/setMonth.js"(exports, module) {
    "use strict";
    var callDateSet = require_callDateSet();
    function setMonth(d, val) {
      callDateSet(d, "Month", val);
    }
    module.exports = setMonth;
  }
});

// node_modules/sugar/date/internal/cloneDate.js
var require_cloneDate = __commonJS({
  "node_modules/sugar/date/internal/cloneDate.js"(exports, module) {
    "use strict";
    var _utc = require_utc();
    function cloneDate(d) {
      var clone = new Date(d.getTime());
      _utc(clone, !!_utc(d));
      return clone;
    }
    module.exports = cloneDate;
  }
});

// node_modules/sugar/date/internal/moveToBeginningOfWeek.js
var require_moveToBeginningOfWeek = __commonJS({
  "node_modules/sugar/date/internal/moveToBeginningOfWeek.js"(exports, module) {
    "use strict";
    var setWeekday = require_setWeekday();
    var getWeekday = require_getWeekday();
    var mathAliases = require_mathAliases();
    var floor = mathAliases.floor;
    function moveToBeginningOfWeek(d, firstDayOfWeek) {
      setWeekday(d, floor((getWeekday(d) - firstDayOfWeek) / 7) * 7 + firstDayOfWeek);
      return d;
    }
    module.exports = moveToBeginningOfWeek;
  }
});

// node_modules/sugar/date/internal/moveToFirstDayOfWeekYear.js
var require_moveToFirstDayOfWeekYear = __commonJS({
  "node_modules/sugar/date/internal/moveToFirstDayOfWeekYear.js"(exports, module) {
    "use strict";
    var DateUnitIndexes = require_DateUnitIndexes();
    var setDate = require_setDate();
    var setUnitAndLowerToEdge = require_setUnitAndLowerToEdge();
    var moveToBeginningOfWeek = require_moveToBeginningOfWeek();
    var MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;
    function moveToFirstDayOfWeekYear(d, firstDayOfWeek, firstDayOfWeekYear) {
      setUnitAndLowerToEdge(d, MONTH_INDEX);
      setDate(d, firstDayOfWeekYear);
      moveToBeginningOfWeek(d, firstDayOfWeek);
    }
    module.exports = moveToFirstDayOfWeekYear;
  }
});

// node_modules/sugar/date/internal/setISOWeekNumber.js
var require_setISOWeekNumber = __commonJS({
  "node_modules/sugar/date/internal/setISOWeekNumber.js"(exports, module) {
    "use strict";
    var ISODefaults = require_ISODefaults();
    var getDate = require_getDate();
    var setDate = require_setDate();
    var setYear = require_setYear();
    var getYear = require_getYear();
    var getMonth = require_getMonth();
    var setMonth = require_setMonth();
    var cloneDate = require_cloneDate();
    var getWeekday = require_getWeekday();
    var setWeekday = require_setWeekday();
    var classChecks = require_classChecks();
    var moveToFirstDayOfWeekYear = require_moveToFirstDayOfWeekYear();
    var isNumber = classChecks.isNumber;
    var ISO_FIRST_DAY_OF_WEEK = ISODefaults.ISO_FIRST_DAY_OF_WEEK;
    var ISO_FIRST_DAY_OF_WEEK_YEAR = ISODefaults.ISO_FIRST_DAY_OF_WEEK_YEAR;
    function setISOWeekNumber(d, num) {
      if (isNumber(num)) {
        var isoWeek = cloneDate(d), dow = getWeekday(d);
        moveToFirstDayOfWeekYear(isoWeek, ISO_FIRST_DAY_OF_WEEK, ISO_FIRST_DAY_OF_WEEK_YEAR);
        setDate(isoWeek, getDate(isoWeek) + 7 * (num - 1));
        setYear(d, getYear(isoWeek));
        setMonth(d, getMonth(isoWeek));
        setDate(d, getDate(isoWeek));
        setWeekday(d, dow || 7);
      }
      return d.getTime();
    }
    module.exports = setISOWeekNumber;
  }
});

// node_modules/sugar/date/internal/callDateSetWithWeek.js
var require_callDateSetWithWeek = __commonJS({
  "node_modules/sugar/date/internal/callDateSetWithWeek.js"(exports, module) {
    "use strict";
    var callDateSet = require_callDateSet();
    var setISOWeekNumber = require_setISOWeekNumber();
    function callDateSetWithWeek(d, method, value, safe) {
      if (method === "ISOWeek") {
        setISOWeekNumber(d, value);
      } else {
        callDateSet(d, method, value, safe);
      }
    }
    module.exports = callDateSetWithWeek;
  }
});

// node_modules/sugar/common/internal/getOwnKey.js
var require_getOwnKey = __commonJS({
  "node_modules/sugar/common/internal/getOwnKey.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    function getOwnKey(obj, key) {
      if (hasOwn(obj, key)) {
        return key;
      }
    }
    module.exports = getOwnKey;
  }
});

// node_modules/sugar/date/internal/getDateParamKey.js
var require_getDateParamKey = __commonJS({
  "node_modules/sugar/date/internal/getDateParamKey.js"(exports, module) {
    "use strict";
    var getOwnKey = require_getOwnKey();
    function getDateParamKey(params, key) {
      return getOwnKey(params, key) || getOwnKey(params, key + "s") || key === "day" && getOwnKey(params, "date");
    }
    module.exports = getDateParamKey;
  }
});

// node_modules/sugar/date/internal/getDateParam.js
var require_getDateParam = __commonJS({
  "node_modules/sugar/date/internal/getDateParam.js"(exports, module) {
    "use strict";
    var getDateParamKey = require_getDateParamKey();
    var coreUtilityAliases = require_coreUtilityAliases();
    var getOwn = coreUtilityAliases.getOwn;
    function getDateParam(params, key) {
      return getOwn(params, getDateParamKey(params, key));
    }
    module.exports = getDateParam;
  }
});

// node_modules/sugar/date/internal/iterateOverDateParams.js
var require_iterateOverDateParams = __commonJS({
  "node_modules/sugar/date/internal/iterateOverDateParams.js"(exports, module) {
    "use strict";
    var DateUnitIndexes = require_DateUnitIndexes();
    var isDefined = require_isDefined();
    var getDateParam = require_getDateParam();
    var iterateOverDateUnits = require_iterateOverDateUnits();
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    function iterateOverDateParams(params, fn, startIndex, endIndex) {
      function run(name, unit, i) {
        var val = getDateParam(params, name);
        if (isDefined(val)) {
          fn(name, val, unit, i);
        }
      }
      iterateOverDateUnits(function(unit, i) {
        var result = run(unit.name, unit, i);
        if (result !== false && i === DAY_INDEX) {
          result = run("weekday", unit, i);
        }
        return result;
      }, startIndex, endIndex);
    }
    module.exports = iterateOverDateParams;
  }
});

// node_modules/sugar/date/internal/updateDate.js
var require_updateDate = __commonJS({
  "node_modules/sugar/date/internal/updateDate.js"(exports, module) {
    "use strict";
    var DateUnits = require_DateUnits();
    var DateUnitIndexes = require_DateUnitIndexes();
    var trunc = require_trunc();
    var setDate = require_setDate();
    var getDate = require_getDate();
    var getMonth = require_getMonth();
    var getNewDate = require_getNewDate();
    var setWeekday = require_setWeekday();
    var mathAliases = require_mathAliases();
    var callDateGet = require_callDateGet();
    var classChecks = require_classChecks();
    var resetLowerUnits = require_resetLowerUnits();
    var getLowerUnitIndex = require_getLowerUnitIndex();
    var getHigherUnitIndex = require_getHigherUnitIndex();
    var callDateSetWithWeek = require_callDateSetWithWeek();
    var iterateOverDateParams = require_iterateOverDateParams();
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    var WEEK_INDEX = DateUnitIndexes.WEEK_INDEX;
    var MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;
    var YEAR_INDEX = DateUnitIndexes.YEAR_INDEX;
    var round = mathAliases.round;
    var isNumber = classChecks.isNumber;
    function updateDate(d, params, reset, advance, prefer, weekdayDir, contextDate) {
      var upperUnitIndex;
      function setUpperUnit(unitName, unitIndex) {
        if (prefer && !upperUnitIndex) {
          if (unitName === "weekday") {
            upperUnitIndex = WEEK_INDEX;
          } else {
            upperUnitIndex = getHigherUnitIndex(unitIndex);
          }
        }
      }
      function setSpecificity(unitIndex) {
        if (unitIndex > params.specificity) {
          return;
        }
        params.specificity = unitIndex;
      }
      function canDisambiguate() {
        if (!upperUnitIndex || upperUnitIndex > YEAR_INDEX) {
          return;
        }
        switch (prefer) {
          case -1:
            return d >= (contextDate || getNewDate());
          case 1:
            return d <= (contextDate || getNewDate());
        }
      }
      function disambiguateHigherUnit() {
        var unit = DateUnits[upperUnitIndex];
        advance = prefer;
        setUnit(unit.name, 1, unit, upperUnitIndex);
      }
      function handleFraction(unit, unitIndex, fraction) {
        if (unitIndex) {
          var lowerUnit = DateUnits[getLowerUnitIndex(unitIndex)];
          var val = round(unit.multiplier / lowerUnit.multiplier * fraction);
          params[lowerUnit.name] = val;
        }
      }
      function monthHasShifted(d2, targetMonth) {
        if (targetMonth < 0) {
          targetMonth = targetMonth % 12 + 12;
        }
        return targetMonth % 12 !== getMonth(d2);
      }
      function setUnit(unitName, value, unit, unitIndex) {
        var method = unit.method, checkMonth, fraction;
        setUpperUnit(unitName, unitIndex);
        setSpecificity(unitIndex);
        fraction = value % 1;
        if (fraction) {
          handleFraction(unit, unitIndex, fraction);
          value = trunc(value);
        }
        if (unitName === "weekday") {
          if (!advance) {
            setWeekday(d, value, weekdayDir);
          }
          return;
        }
        checkMonth = unitIndex === MONTH_INDEX && getDate(d) > 28;
        if (advance && !unit.ambiguous) {
          d.setTime(d.getTime() + value * advance * unit.multiplier);
          return;
        } else if (advance) {
          if (unitIndex === WEEK_INDEX) {
            value *= 7;
            method = DateUnits[DAY_INDEX].method;
          }
          value = value * advance + callDateGet(d, method);
        }
        callDateSetWithWeek(d, method, value, advance);
        if (checkMonth && monthHasShifted(d, value)) {
          setDate(d, 0);
        }
      }
      if (isNumber(params) && advance) {
        params = { millisecond: params };
      } else if (isNumber(params)) {
        d.setTime(params);
        return d;
      }
      iterateOverDateParams(params, setUnit);
      if (reset && params.specificity) {
        resetLowerUnits(d, params.specificity);
      }
      if (canDisambiguate()) {
        disambiguateHigherUnit();
      }
      return d;
    }
    module.exports = updateDate;
  }
});

// node_modules/sugar/date/internal/advanceDate.js
var require_advanceDate = __commonJS({
  "node_modules/sugar/date/internal/advanceDate.js"(exports, module) {
    "use strict";
    var updateDate = require_updateDate();
    function advanceDate(d, unit, num, reset) {
      var set = {};
      set[unit] = num;
      return updateDate(d, set, reset, 1);
    }
    module.exports = advanceDate;
  }
});

// node_modules/sugar/date/internal/dateIsValid.js
var require_dateIsValid = __commonJS({
  "node_modules/sugar/date/internal/dateIsValid.js"(exports, module) {
    "use strict";
    function dateIsValid(d) {
      return !isNaN(d.getTime());
    }
    module.exports = dateIsValid;
  }
});

// node_modules/sugar/date/internal/moveToEndOfWeek.js
var require_moveToEndOfWeek = __commonJS({
  "node_modules/sugar/date/internal/moveToEndOfWeek.js"(exports, module) {
    "use strict";
    var setWeekday = require_setWeekday();
    var getWeekday = require_getWeekday();
    var mathAliases = require_mathAliases();
    var ceil = mathAliases.ceil;
    function moveToEndOfWeek(d, firstDayOfWeek) {
      var target = firstDayOfWeek - 1;
      setWeekday(d, ceil((getWeekday(d) - target) / 7) * 7 + target);
      return d;
    }
    module.exports = moveToEndOfWeek;
  }
});

// node_modules/sugar/date/internal/moveToEndOfUnit.js
var require_moveToEndOfUnit = __commonJS({
  "node_modules/sugar/date/internal/moveToEndOfUnit.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var DateUnitIndexes = require_DateUnitIndexes();
    var moveToEndOfWeek = require_moveToEndOfWeek();
    var getLowerUnitIndex = require_getLowerUnitIndex();
    var setUnitAndLowerToEdge = require_setUnitAndLowerToEdge();
    var WEEK_INDEX = DateUnitIndexes.WEEK_INDEX;
    var localeManager = LocaleHelpers.localeManager;
    function moveToEndOfUnit(d, unitIndex, localeCode, stopIndex) {
      if (unitIndex === WEEK_INDEX) {
        moveToEndOfWeek(d, localeManager.get(localeCode).getFirstDayOfWeek());
      }
      return setUnitAndLowerToEdge(d, getLowerUnitIndex(unitIndex), stopIndex, true);
    }
    module.exports = moveToEndOfUnit;
  }
});

// node_modules/sugar/date/internal/deleteDateParam.js
var require_deleteDateParam = __commonJS({
  "node_modules/sugar/date/internal/deleteDateParam.js"(exports, module) {
    "use strict";
    var getDateParamKey = require_getDateParamKey();
    function deleteDateParam(params, key) {
      delete params[getDateParamKey(params, key)];
    }
    module.exports = deleteDateParam;
  }
});

// node_modules/sugar/date/internal/moveToBeginningOfUnit.js
var require_moveToBeginningOfUnit = __commonJS({
  "node_modules/sugar/date/internal/moveToBeginningOfUnit.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var DateUnitIndexes = require_DateUnitIndexes();
    var getLowerUnitIndex = require_getLowerUnitIndex();
    var moveToBeginningOfWeek = require_moveToBeginningOfWeek();
    var setUnitAndLowerToEdge = require_setUnitAndLowerToEdge();
    var WEEK_INDEX = DateUnitIndexes.WEEK_INDEX;
    var localeManager = LocaleHelpers.localeManager;
    function moveToBeginningOfUnit(d, unitIndex, localeCode) {
      if (unitIndex === WEEK_INDEX) {
        moveToBeginningOfWeek(d, localeManager.get(localeCode).getFirstDayOfWeek());
      }
      return setUnitAndLowerToEdge(d, getLowerUnitIndex(unitIndex));
    }
    module.exports = moveToBeginningOfUnit;
  }
});

// node_modules/sugar/date/internal/getYearFromAbbreviation.js
var require_getYearFromAbbreviation = __commonJS({
  "node_modules/sugar/date/internal/getYearFromAbbreviation.js"(exports, module) {
    "use strict";
    var getYear = require_getYear();
    var mathAliases = require_mathAliases();
    var abs = mathAliases.abs;
    function getYearFromAbbreviation(str, d, prefer) {
      var val = +str, delta;
      val += val < 50 ? 2e3 : 1900;
      if (prefer) {
        delta = val - getYear(d);
        if (delta / abs(delta) !== prefer) {
          val += prefer * 100;
        }
      }
      return val;
    }
    module.exports = getYearFromAbbreviation;
  }
});

// node_modules/sugar/date/internal/iterateOverHigherDateParams.js
var require_iterateOverHigherDateParams = __commonJS({
  "node_modules/sugar/date/internal/iterateOverHigherDateParams.js"(exports, module) {
    "use strict";
    var DateUnitIndexes = require_DateUnitIndexes();
    var iterateOverDateParams = require_iterateOverDateParams();
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    var YEAR_INDEX = DateUnitIndexes.YEAR_INDEX;
    function iterateOverHigherDateParams(params, fn) {
      iterateOverDateParams(params, fn, YEAR_INDEX, DAY_INDEX);
    }
    module.exports = iterateOverHigherDateParams;
  }
});

// node_modules/sugar/date/internal/getExtendedDate.js
var require_getExtendedDate = __commonJS({
  "node_modules/sugar/date/internal/getExtendedDate.js"(exports, module) {
    "use strict";
    var MINUTES = require_MINUTES();
    var ABBREVIATED_YEAR_REG = require_ABBREVIATED_YEAR_REG();
    var LocaleHelpers = require_LocaleHelpers();
    var DateUnitIndexes = require_DateUnitIndexes();
    var _utc = require_utc();
    var trunc = require_trunc();
    var forEach = require_forEach();
    var tzOffset = require_tzOffset();
    var isDefined = require_isDefined();
    var resetTime = require_resetTime();
    var getNewDate = require_getNewDate();
    var updateDate = require_updateDate();
    var setWeekday = require_setWeekday();
    var simpleMerge = require_simpleMerge();
    var advanceDate = require_advanceDate();
    var isUndefined = require_isUndefined();
    var classChecks = require_classChecks();
    var dateIsValid = require_dateIsValid();
    var simpleClone = require_simpleClone();
    var isObjectType = require_isObjectType();
    var moveToEndOfUnit = require_moveToEndOfUnit();
    var deleteDateParam = require_deleteDateParam();
    var coreUtilityAliases = require_coreUtilityAliases();
    var moveToBeginningOfUnit = require_moveToBeginningOfUnit();
    var iterateOverDateParams = require_iterateOverDateParams();
    var getYearFromAbbreviation = require_getYearFromAbbreviation();
    var iterateOverHigherDateParams = require_iterateOverHigherDateParams();
    var isNumber = classChecks.isNumber;
    var isString = classChecks.isString;
    var isDate = classChecks.isDate;
    var getOwn = coreUtilityAliases.getOwn;
    var English = LocaleHelpers.English;
    var localeManager = LocaleHelpers.localeManager;
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    var WEEK_INDEX = DateUnitIndexes.WEEK_INDEX;
    var MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;
    var YEAR_INDEX = DateUnitIndexes.YEAR_INDEX;
    function getExtendedDate(contextDate, d, opt, forceClone) {
      var date, set, loc, afterCallbacks, relative, weekdayDir;
      var optPrefer, optLocale, optFromUTC, optSetUTC, optParams, optClone;
      afterCallbacks = [];
      setupOptions(opt);
      function setupOptions(opt2) {
        opt2 = isString(opt2) ? { locale: opt2 } : opt2 || {};
        optPrefer = +!!getOwn(opt2, "future") - +!!getOwn(opt2, "past");
        optLocale = getOwn(opt2, "locale");
        optFromUTC = getOwn(opt2, "fromUTC");
        optSetUTC = getOwn(opt2, "setUTC");
        optParams = getOwn(opt2, "params");
        optClone = getOwn(opt2, "clone");
      }
      function parseFormatValues(match, dif) {
        var set2 = optParams || {};
        forEach(dif.to, function(param, i) {
          var str = match[i + 1], val;
          if (!str)
            return;
          val = parseIrregular(str, param);
          if (isUndefined(val)) {
            val = loc.parseValue(str, param);
          }
          set2[param] = val;
        });
        return set2;
      }
      function parseIrregular(str, param) {
        if (param === "utc") {
          return 1;
        } else if (param === "year") {
          var match = str.match(ABBREVIATED_YEAR_REG);
          if (match) {
            return getYearFromAbbreviation(match[1], date, optPrefer);
          }
        }
      }
      function cloneDateByFlag(d2, clone) {
        if (_utc(d2) && !isDefined(optFromUTC)) {
          optFromUTC = true;
        }
        if (_utc(d2) && !isDefined(optSetUTC)) {
          optSetUTC = true;
        }
        if (clone) {
          d2 = new Date(d2.getTime());
        }
        return d2;
      }
      function afterDateSet(fn) {
        afterCallbacks.push(fn);
      }
      function fireCallbacks() {
        forEach(afterCallbacks, function(fn) {
          fn.call();
        });
      }
      function parseStringDate(str) {
        str = str.toLowerCase();
        loc = localeManager.get(optLocale);
        for (var i = 0, dif, match; dif = loc.compiledFormats[i]; i++) {
          match = str.match(dif.reg);
          if (match) {
            loc.cacheFormat(dif, i);
            set = parseFormatValues(match, dif);
            if (isDefined(set.timestamp)) {
              date.setTime(set.timestamp);
              break;
            }
            if (isDefined(set.ampm)) {
              handleAmpm(set.ampm);
            }
            if (set.utc || isDefined(set.tzHour)) {
              handleTimezoneOffset(set.tzHour, set.tzMinute);
            }
            if (isDefined(set.shift) && isUndefined(set.unit)) {
              handleUnitlessShift();
            }
            if (isDefined(set.num) && isUndefined(set.unit)) {
              handleUnitlessNum(set.num);
            }
            if (set.midday) {
              handleMidday(set.midday);
            }
            if (isDefined(set.day)) {
              handleRelativeDay(set.day);
            }
            if (isDefined(set.unit)) {
              handleRelativeUnit(set.unit);
            }
            if (set.edge) {
              handleEdge(set.edge, set);
            }
            break;
          }
        }
        if (!set) {
          date = new Date(str);
          if (optFromUTC && dateIsValid(date)) {
            date.setTime(date.getTime() + tzOffset(date) * MINUTES);
          }
        } else if (relative) {
          updateDate(date, set, false, 1);
        } else {
          updateDate(date, set, true, 0, optPrefer, weekdayDir, contextDate);
        }
        fireCallbacks();
        return date;
      }
      function handleAmpm(ampm) {
        if (ampm === 1 && set.hour < 12) {
          set.hour += 12;
        } else if (ampm === 0 && set.hour === 12) {
          set.hour = 0;
        }
      }
      function handleTimezoneOffset(tzHour, tzMinute) {
        _utc(date, true);
        if (tzHour < 0) {
          tzMinute *= -1;
        }
        var offset = tzHour * 60 + (tzMinute || 0);
        if (offset) {
          set.minute = (set.minute || 0) - offset;
        }
      }
      function handleUnitlessShift() {
        if (isDefined(set.month)) {
          set.unit = YEAR_INDEX;
        } else if (isDefined(set.weekday)) {
          set.unit = WEEK_INDEX;
        }
      }
      function handleUnitlessNum(num) {
        if (isDefined(set.weekday)) {
          setOrdinalWeekday(num);
        } else if (isDefined(set.month)) {
          set.date = set.num;
        }
      }
      function handleMidday(hour) {
        set.hour = hour % 24;
        if (hour > 23) {
          afterDateSet(function() {
            advanceDate(date, "date", trunc(hour / 24));
          });
        }
      }
      function handleRelativeDay() {
        resetTime(date);
        if (isUndefined(set.unit)) {
          set.unit = DAY_INDEX;
          set.num = set.day;
          delete set.day;
        }
      }
      function handleRelativeUnit(unitIndex) {
        var num;
        if (isDefined(set.num)) {
          num = set.num;
        } else if (isDefined(set.edge) && isUndefined(set.shift)) {
          num = 0;
        } else {
          num = 1;
        }
        if (isDefined(set.weekday)) {
          if (unitIndex === MONTH_INDEX) {
            setOrdinalWeekday(num);
            num = 1;
          } else {
            updateDate(date, { weekday: set.weekday }, true);
            delete set.weekday;
          }
        }
        if (set.half) {
          num *= set.half;
        }
        if (isDefined(set.shift)) {
          num *= set.shift;
        } else if (set.sign) {
          num *= set.sign;
        }
        if (isDefined(set.day)) {
          num += set.day;
          delete set.day;
        }
        separateAbsoluteUnits(unitIndex);
        set[English.units[unitIndex]] = num;
        relative = true;
      }
      function handleEdge(edge, params) {
        var edgeIndex = params.unit, weekdayOfMonth;
        if (!edgeIndex) {
          iterateOverHigherDateParams(params, function(unitName, val, unit, i) {
            if (unitName === "weekday" && isDefined(params.month)) {
              return;
            }
            edgeIndex = i;
          });
        }
        if (edgeIndex === MONTH_INDEX && isDefined(params.weekday)) {
          weekdayOfMonth = params.weekday;
          delete params.weekday;
        }
        afterDateSet(function() {
          var stopIndex;
          if (edge < 0) {
            moveToBeginningOfUnit(date, edgeIndex, optLocale);
          } else if (edge > 0) {
            if (edge === 1) {
              stopIndex = DAY_INDEX;
              moveToBeginningOfUnit(date, DAY_INDEX);
            }
            moveToEndOfUnit(date, edgeIndex, optLocale, stopIndex);
          }
          if (isDefined(weekdayOfMonth)) {
            setWeekday(date, weekdayOfMonth, -edge);
            resetTime(date);
          }
        });
        if (edgeIndex === MONTH_INDEX) {
          params.specificity = DAY_INDEX;
        } else {
          params.specificity = edgeIndex - 1;
        }
      }
      function setOrdinalWeekday(num) {
        set.weekday = 7 * (num - 1) + set.weekday;
        set.date = 1;
        weekdayDir = 1;
      }
      function separateAbsoluteUnits(unitIndex) {
        var params;
        iterateOverDateParams(set, function(name, val, unit, i) {
          if (i >= unitIndex) {
            date.setTime(NaN);
            return false;
          } else if (i < unitIndex) {
            params = params || {};
            params[name] = val;
            deleteDateParam(set, name);
          }
        });
        if (params) {
          afterDateSet(function() {
            updateDate(date, params, true, 0, false, weekdayDir);
            if (optParams) {
              simpleMerge(optParams, params);
            }
          });
          if (set.edge) {
            handleEdge(set.edge, params);
            delete set.edge;
          }
        }
      }
      if (contextDate && d) {
        date = cloneDateByFlag(contextDate, true);
      } else {
        date = getNewDate();
      }
      _utc(date, optFromUTC);
      if (isString(d)) {
        date = parseStringDate(d);
      } else if (isDate(d)) {
        date = cloneDateByFlag(d, optClone || forceClone);
      } else if (isObjectType(d)) {
        set = simpleClone(d);
        updateDate(date, set, true);
      } else if (isNumber(d) || d === null) {
        date.setTime(d);
      }
      _utc(date, !!optSetUTC);
      return {
        set,
        date
      };
    }
    module.exports = getExtendedDate;
  }
});

// node_modules/sugar/date/internal/createDate.js
var require_createDate = __commonJS({
  "node_modules/sugar/date/internal/createDate.js"(exports, module) {
    "use strict";
    var getExtendedDate = require_getExtendedDate();
    function createDate(d, options, forceClone) {
      return getExtendedDate(null, d, options, forceClone).date;
    }
    module.exports = createDate;
  }
});

// node_modules/sugar/date/internal/setDateChainableConstructor.js
var require_setDateChainableConstructor = __commonJS({
  "node_modules/sugar/date/internal/setDateChainableConstructor.js"(exports, module) {
    "use strict";
    var createDate = require_createDate();
    var namespaceAliases = require_namespaceAliases();
    var setChainableConstructor = require_setChainableConstructor();
    var sugarDate = namespaceAliases.sugarDate;
    function setDateChainableConstructor() {
      setChainableConstructor(sugarDate, createDate);
    }
    module.exports = setDateChainableConstructor;
  }
});

// node_modules/sugar/date/build/setDateChainableConstructorCall.js
var require_setDateChainableConstructorCall = __commonJS({
  "node_modules/sugar/date/build/setDateChainableConstructorCall.js"() {
    "use strict";
    var setDateChainableConstructor = require_setDateChainableConstructor();
    setDateChainableConstructor();
  }
});

// node_modules/sugar/date/create.js
var require_create2 = __commonJS({
  "node_modules/sugar/date/create.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createDate = require_createDate();
    require_setDateChainableConstructorCall();
    Sugar.Date.defineStatic({
      "create": function(d, options) {
        return createDate(d, options);
      }
    });
    module.exports = Sugar.Date.create;
  }
});

// node_modules/sugar/date/getAllLocaleCodes.js
var require_getAllLocaleCodes = __commonJS({
  "node_modules/sugar/date/getAllLocaleCodes.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LocaleHelpers = require_LocaleHelpers();
    var getKeys = require_getKeys();
    var localeManager = LocaleHelpers.localeManager;
    Sugar.Date.defineStatic({
      "getAllLocaleCodes": function() {
        return getKeys(localeManager.getAll());
      }
    });
    module.exports = Sugar.Date.getAllLocaleCodes;
  }
});

// node_modules/sugar/date/getAllLocales.js
var require_getAllLocales = __commonJS({
  "node_modules/sugar/date/getAllLocales.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LocaleHelpers = require_LocaleHelpers();
    var localeManager = LocaleHelpers.localeManager;
    Sugar.Date.defineStatic({
      "getAllLocales": function() {
        return localeManager.getAll();
      }
    });
    module.exports = Sugar.Date.getAllLocales;
  }
});

// node_modules/sugar/date/getLocale.js
var require_getLocale = __commonJS({
  "node_modules/sugar/date/getLocale.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LocaleHelpers = require_LocaleHelpers();
    var localeManager = LocaleHelpers.localeManager;
    Sugar.Date.defineStatic({
      "getLocale": function(code) {
        return localeManager.get(code, !code);
      }
    });
    module.exports = Sugar.Date.getLocale;
  }
});

// node_modules/sugar/date/removeLocale.js
var require_removeLocale = __commonJS({
  "node_modules/sugar/date/removeLocale.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LocaleHelpers = require_LocaleHelpers();
    var localeManager = LocaleHelpers.localeManager;
    Sugar.Date.defineStatic({
      "removeLocale": function(code) {
        return localeManager.remove(code);
      }
    });
    module.exports = Sugar.Date.removeLocale;
  }
});

// node_modules/sugar/date/setLocale.js
var require_setLocale = __commonJS({
  "node_modules/sugar/date/setLocale.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LocaleHelpers = require_LocaleHelpers();
    var localeManager = LocaleHelpers.localeManager;
    Sugar.Date.defineStatic({
      "setLocale": function(code) {
        return localeManager.set(code);
      }
    });
    module.exports = Sugar.Date.setLocale;
  }
});

// node_modules/sugar/date/internal/buildNumberUnitMethods.js
var require_buildNumberUnitMethods = __commonJS({
  "node_modules/sugar/date/internal/buildNumberUnitMethods.js"(exports, module) {
    "use strict";
    var DateUnits = require_DateUnits();
    var createDate = require_createDate();
    var mathAliases = require_mathAliases();
    var advanceDate = require_advanceDate();
    var namespaceAliases = require_namespaceAliases();
    var defineInstanceSimilar = require_defineInstanceSimilar();
    var sugarNumber = namespaceAliases.sugarNumber;
    var round = mathAliases.round;
    function buildNumberUnitMethods() {
      defineInstanceSimilar(sugarNumber, DateUnits, function(methods, unit) {
        var name = unit.name, base, after, before;
        base = function(n) {
          return round(n * unit.multiplier);
        };
        after = function(n, d, options) {
          return advanceDate(createDate(d, options, true), name, n);
        };
        before = function(n, d, options) {
          return advanceDate(createDate(d, options, true), name, -n);
        };
        methods[name] = base;
        methods[name + "s"] = base;
        methods[name + "Before"] = before;
        methods[name + "sBefore"] = before;
        methods[name + "Ago"] = before;
        methods[name + "sAgo"] = before;
        methods[name + "After"] = after;
        methods[name + "sAfter"] = after;
        methods[name + "FromNow"] = after;
        methods[name + "sFromNow"] = after;
      });
    }
    module.exports = buildNumberUnitMethods;
  }
});

// node_modules/sugar/date/build/buildNumberUnitMethodsCall.js
var require_buildNumberUnitMethodsCall = __commonJS({
  "node_modules/sugar/date/build/buildNumberUnitMethodsCall.js"() {
    "use strict";
    var buildNumberUnitMethods = require_buildNumberUnitMethods();
    buildNumberUnitMethods();
  }
});

// node_modules/sugar/number/day.js
var require_day = __commonJS({
  "node_modules/sugar/number/day.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.day;
  }
});

// node_modules/sugar/number/dayAfter.js
var require_dayAfter = __commonJS({
  "node_modules/sugar/number/dayAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.dayAfter;
  }
});

// node_modules/sugar/number/dayAgo.js
var require_dayAgo = __commonJS({
  "node_modules/sugar/number/dayAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.dayAgo;
  }
});

// node_modules/sugar/number/dayBefore.js
var require_dayBefore = __commonJS({
  "node_modules/sugar/number/dayBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.dayBefore;
  }
});

// node_modules/sugar/number/dayFromNow.js
var require_dayFromNow = __commonJS({
  "node_modules/sugar/number/dayFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.dayFromNow;
  }
});

// node_modules/sugar/number/days.js
var require_days = __commonJS({
  "node_modules/sugar/number/days.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.days;
  }
});

// node_modules/sugar/number/daysAfter.js
var require_daysAfter = __commonJS({
  "node_modules/sugar/number/daysAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.daysAfter;
  }
});

// node_modules/sugar/number/daysAgo.js
var require_daysAgo = __commonJS({
  "node_modules/sugar/number/daysAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.daysAgo;
  }
});

// node_modules/sugar/number/daysBefore.js
var require_daysBefore = __commonJS({
  "node_modules/sugar/number/daysBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.daysBefore;
  }
});

// node_modules/sugar/number/daysFromNow.js
var require_daysFromNow = __commonJS({
  "node_modules/sugar/number/daysFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.daysFromNow;
  }
});

// node_modules/sugar/number/duration.js
var require_duration = __commonJS({
  "node_modules/sugar/number/duration.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var LocaleHelpers = require_LocaleHelpers();
    var localeManager = LocaleHelpers.localeManager;
    Sugar.Number.defineInstance({
      "duration": function(n, localeCode) {
        return localeManager.get(localeCode).getDuration(n);
      }
    });
    module.exports = Sugar.Number.duration;
  }
});

// node_modules/sugar/number/hour.js
var require_hour = __commonJS({
  "node_modules/sugar/number/hour.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hour;
  }
});

// node_modules/sugar/number/hourAfter.js
var require_hourAfter = __commonJS({
  "node_modules/sugar/number/hourAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hourAfter;
  }
});

// node_modules/sugar/number/hourAgo.js
var require_hourAgo = __commonJS({
  "node_modules/sugar/number/hourAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hourAgo;
  }
});

// node_modules/sugar/number/hourBefore.js
var require_hourBefore = __commonJS({
  "node_modules/sugar/number/hourBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hourBefore;
  }
});

// node_modules/sugar/number/hourFromNow.js
var require_hourFromNow = __commonJS({
  "node_modules/sugar/number/hourFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hourFromNow;
  }
});

// node_modules/sugar/number/hours.js
var require_hours = __commonJS({
  "node_modules/sugar/number/hours.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hours;
  }
});

// node_modules/sugar/number/hoursAfter.js
var require_hoursAfter = __commonJS({
  "node_modules/sugar/number/hoursAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hoursAfter;
  }
});

// node_modules/sugar/number/hoursAgo.js
var require_hoursAgo = __commonJS({
  "node_modules/sugar/number/hoursAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hoursAgo;
  }
});

// node_modules/sugar/number/hoursBefore.js
var require_hoursBefore = __commonJS({
  "node_modules/sugar/number/hoursBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hoursBefore;
  }
});

// node_modules/sugar/number/hoursFromNow.js
var require_hoursFromNow = __commonJS({
  "node_modules/sugar/number/hoursFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.hoursFromNow;
  }
});

// node_modules/sugar/number/millisecond.js
var require_millisecond = __commonJS({
  "node_modules/sugar/number/millisecond.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecond;
  }
});

// node_modules/sugar/number/millisecondAfter.js
var require_millisecondAfter = __commonJS({
  "node_modules/sugar/number/millisecondAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondAfter;
  }
});

// node_modules/sugar/number/millisecondAgo.js
var require_millisecondAgo = __commonJS({
  "node_modules/sugar/number/millisecondAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondAgo;
  }
});

// node_modules/sugar/number/millisecondBefore.js
var require_millisecondBefore = __commonJS({
  "node_modules/sugar/number/millisecondBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondBefore;
  }
});

// node_modules/sugar/number/millisecondFromNow.js
var require_millisecondFromNow = __commonJS({
  "node_modules/sugar/number/millisecondFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondFromNow;
  }
});

// node_modules/sugar/number/milliseconds.js
var require_milliseconds = __commonJS({
  "node_modules/sugar/number/milliseconds.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.milliseconds;
  }
});

// node_modules/sugar/number/millisecondsAfter.js
var require_millisecondsAfter = __commonJS({
  "node_modules/sugar/number/millisecondsAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondsAfter;
  }
});

// node_modules/sugar/number/millisecondsAgo.js
var require_millisecondsAgo = __commonJS({
  "node_modules/sugar/number/millisecondsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondsAgo;
  }
});

// node_modules/sugar/number/millisecondsBefore.js
var require_millisecondsBefore = __commonJS({
  "node_modules/sugar/number/millisecondsBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondsBefore;
  }
});

// node_modules/sugar/number/millisecondsFromNow.js
var require_millisecondsFromNow = __commonJS({
  "node_modules/sugar/number/millisecondsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.millisecondsFromNow;
  }
});

// node_modules/sugar/number/minute.js
var require_minute = __commonJS({
  "node_modules/sugar/number/minute.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minute;
  }
});

// node_modules/sugar/number/minuteAfter.js
var require_minuteAfter = __commonJS({
  "node_modules/sugar/number/minuteAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minuteAfter;
  }
});

// node_modules/sugar/number/minuteAgo.js
var require_minuteAgo = __commonJS({
  "node_modules/sugar/number/minuteAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minuteAgo;
  }
});

// node_modules/sugar/number/minuteBefore.js
var require_minuteBefore = __commonJS({
  "node_modules/sugar/number/minuteBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minuteBefore;
  }
});

// node_modules/sugar/number/minuteFromNow.js
var require_minuteFromNow = __commonJS({
  "node_modules/sugar/number/minuteFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minuteFromNow;
  }
});

// node_modules/sugar/number/minutes.js
var require_minutes = __commonJS({
  "node_modules/sugar/number/minutes.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minutes;
  }
});

// node_modules/sugar/number/minutesAfter.js
var require_minutesAfter = __commonJS({
  "node_modules/sugar/number/minutesAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minutesAfter;
  }
});

// node_modules/sugar/number/minutesAgo.js
var require_minutesAgo = __commonJS({
  "node_modules/sugar/number/minutesAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minutesAgo;
  }
});

// node_modules/sugar/number/minutesBefore.js
var require_minutesBefore = __commonJS({
  "node_modules/sugar/number/minutesBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minutesBefore;
  }
});

// node_modules/sugar/number/minutesFromNow.js
var require_minutesFromNow = __commonJS({
  "node_modules/sugar/number/minutesFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.minutesFromNow;
  }
});

// node_modules/sugar/number/month.js
var require_month = __commonJS({
  "node_modules/sugar/number/month.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.month;
  }
});

// node_modules/sugar/number/monthAfter.js
var require_monthAfter = __commonJS({
  "node_modules/sugar/number/monthAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthAfter;
  }
});

// node_modules/sugar/number/monthAgo.js
var require_monthAgo = __commonJS({
  "node_modules/sugar/number/monthAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthAgo;
  }
});

// node_modules/sugar/number/monthBefore.js
var require_monthBefore = __commonJS({
  "node_modules/sugar/number/monthBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthBefore;
  }
});

// node_modules/sugar/number/monthFromNow.js
var require_monthFromNow = __commonJS({
  "node_modules/sugar/number/monthFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthFromNow;
  }
});

// node_modules/sugar/number/months.js
var require_months = __commonJS({
  "node_modules/sugar/number/months.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.months;
  }
});

// node_modules/sugar/number/monthsAfter.js
var require_monthsAfter = __commonJS({
  "node_modules/sugar/number/monthsAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthsAfter;
  }
});

// node_modules/sugar/number/monthsAgo.js
var require_monthsAgo = __commonJS({
  "node_modules/sugar/number/monthsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthsAgo;
  }
});

// node_modules/sugar/number/monthsBefore.js
var require_monthsBefore = __commonJS({
  "node_modules/sugar/number/monthsBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthsBefore;
  }
});

// node_modules/sugar/number/monthsFromNow.js
var require_monthsFromNow = __commonJS({
  "node_modules/sugar/number/monthsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.monthsFromNow;
  }
});

// node_modules/sugar/number/second.js
var require_second = __commonJS({
  "node_modules/sugar/number/second.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.second;
  }
});

// node_modules/sugar/number/secondAfter.js
var require_secondAfter = __commonJS({
  "node_modules/sugar/number/secondAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondAfter;
  }
});

// node_modules/sugar/number/secondAgo.js
var require_secondAgo = __commonJS({
  "node_modules/sugar/number/secondAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondAgo;
  }
});

// node_modules/sugar/number/secondBefore.js
var require_secondBefore = __commonJS({
  "node_modules/sugar/number/secondBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondBefore;
  }
});

// node_modules/sugar/number/secondFromNow.js
var require_secondFromNow = __commonJS({
  "node_modules/sugar/number/secondFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondFromNow;
  }
});

// node_modules/sugar/number/seconds.js
var require_seconds = __commonJS({
  "node_modules/sugar/number/seconds.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.seconds;
  }
});

// node_modules/sugar/number/secondsAfter.js
var require_secondsAfter = __commonJS({
  "node_modules/sugar/number/secondsAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondsAfter;
  }
});

// node_modules/sugar/number/secondsAgo.js
var require_secondsAgo = __commonJS({
  "node_modules/sugar/number/secondsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondsAgo;
  }
});

// node_modules/sugar/number/secondsBefore.js
var require_secondsBefore = __commonJS({
  "node_modules/sugar/number/secondsBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondsBefore;
  }
});

// node_modules/sugar/number/secondsFromNow.js
var require_secondsFromNow = __commonJS({
  "node_modules/sugar/number/secondsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.secondsFromNow;
  }
});

// node_modules/sugar/number/week.js
var require_week = __commonJS({
  "node_modules/sugar/number/week.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.week;
  }
});

// node_modules/sugar/number/weekAfter.js
var require_weekAfter = __commonJS({
  "node_modules/sugar/number/weekAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weekAfter;
  }
});

// node_modules/sugar/number/weekAgo.js
var require_weekAgo = __commonJS({
  "node_modules/sugar/number/weekAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weekAgo;
  }
});

// node_modules/sugar/number/weekBefore.js
var require_weekBefore = __commonJS({
  "node_modules/sugar/number/weekBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weekBefore;
  }
});

// node_modules/sugar/number/weekFromNow.js
var require_weekFromNow = __commonJS({
  "node_modules/sugar/number/weekFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weekFromNow;
  }
});

// node_modules/sugar/number/weeks.js
var require_weeks = __commonJS({
  "node_modules/sugar/number/weeks.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weeks;
  }
});

// node_modules/sugar/number/weeksAfter.js
var require_weeksAfter = __commonJS({
  "node_modules/sugar/number/weeksAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weeksAfter;
  }
});

// node_modules/sugar/number/weeksAgo.js
var require_weeksAgo = __commonJS({
  "node_modules/sugar/number/weeksAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weeksAgo;
  }
});

// node_modules/sugar/number/weeksBefore.js
var require_weeksBefore = __commonJS({
  "node_modules/sugar/number/weeksBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weeksBefore;
  }
});

// node_modules/sugar/number/weeksFromNow.js
var require_weeksFromNow = __commonJS({
  "node_modules/sugar/number/weeksFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.weeksFromNow;
  }
});

// node_modules/sugar/number/year.js
var require_year = __commonJS({
  "node_modules/sugar/number/year.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.year;
  }
});

// node_modules/sugar/number/yearAfter.js
var require_yearAfter = __commonJS({
  "node_modules/sugar/number/yearAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearAfter;
  }
});

// node_modules/sugar/number/yearAgo.js
var require_yearAgo = __commonJS({
  "node_modules/sugar/number/yearAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearAgo;
  }
});

// node_modules/sugar/number/yearBefore.js
var require_yearBefore = __commonJS({
  "node_modules/sugar/number/yearBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearBefore;
  }
});

// node_modules/sugar/number/yearFromNow.js
var require_yearFromNow = __commonJS({
  "node_modules/sugar/number/yearFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearFromNow;
  }
});

// node_modules/sugar/number/years.js
var require_years = __commonJS({
  "node_modules/sugar/number/years.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.years;
  }
});

// node_modules/sugar/number/yearsAfter.js
var require_yearsAfter = __commonJS({
  "node_modules/sugar/number/yearsAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearsAfter;
  }
});

// node_modules/sugar/number/yearsAgo.js
var require_yearsAgo = __commonJS({
  "node_modules/sugar/number/yearsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearsAgo;
  }
});

// node_modules/sugar/number/yearsBefore.js
var require_yearsBefore = __commonJS({
  "node_modules/sugar/number/yearsBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearsBefore;
  }
});

// node_modules/sugar/number/yearsFromNow.js
var require_yearsFromNow = __commonJS({
  "node_modules/sugar/number/yearsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildNumberUnitMethodsCall();
    module.exports = Sugar.Number.yearsFromNow;
  }
});

// node_modules/sugar/date/internal/compareDate.js
var require_compareDate = __commonJS({
  "node_modules/sugar/date/internal/compareDate.js"(exports, module) {
    "use strict";
    var MINUTES = require_MINUTES();
    var DateUnits = require_DateUnits();
    var DateUnitIndexes = require_DateUnitIndexes();
    var _utc = require_utc();
    var tzOffset = require_tzOffset();
    var cloneDate = require_cloneDate();
    var isDefined = require_isDefined();
    var advanceDate = require_advanceDate();
    var dateIsValid = require_dateIsValid();
    var moveToEndOfUnit = require_moveToEndOfUnit();
    var getExtendedDate = require_getExtendedDate();
    var moveToBeginningOfUnit = require_moveToBeginningOfUnit();
    var MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;
    function compareDate(date, d, margin, localeCode, options) {
      var loMargin = 0, hiMargin = 0, timezoneShift, compareEdges, override, min, max, p, t;
      function getTimezoneShift() {
        if (p.set && p.set.specificity) {
          return 0;
        }
        return (tzOffset(p.date) - tzOffset(date)) * MINUTES;
      }
      function addSpecificUnit() {
        var unit = DateUnits[p.set.specificity];
        return advanceDate(cloneDate(p.date), unit.name, 1).getTime() - 1;
      }
      if (_utc(date)) {
        options = options || {};
        options.fromUTC = true;
        options.setUTC = true;
      }
      p = getExtendedDate(null, d, options, true);
      if (margin > 0) {
        loMargin = hiMargin = margin;
        override = true;
      }
      if (!dateIsValid(p.date))
        return false;
      if (p.set && p.set.specificity) {
        if (isDefined(p.set.edge) || isDefined(p.set.shift)) {
          compareEdges = true;
          moveToBeginningOfUnit(p.date, p.set.specificity, localeCode);
        }
        if (compareEdges || p.set.specificity === MONTH_INDEX) {
          max = moveToEndOfUnit(cloneDate(p.date), p.set.specificity, localeCode).getTime();
        } else {
          max = addSpecificUnit();
        }
        if (!override && isDefined(p.set.sign) && p.set.specificity) {
          loMargin = 50;
          hiMargin = -50;
        }
      }
      t = date.getTime();
      min = p.date.getTime();
      max = max || min;
      timezoneShift = getTimezoneShift();
      if (timezoneShift) {
        min -= timezoneShift;
        max -= timezoneShift;
      }
      return t >= min - loMargin && t <= max + hiMargin;
    }
    module.exports = compareDate;
  }
});

// node_modules/sugar/date/internal/getTimeDistanceForUnit.js
var require_getTimeDistanceForUnit = __commonJS({
  "node_modules/sugar/date/internal/getTimeDistanceForUnit.js"(exports, module) {
    "use strict";
    var trunc = require_trunc();
    var cloneDate = require_cloneDate();
    var advanceDate = require_advanceDate();
    function getTimeDistanceForUnit(d1, d2, unit) {
      var fwd = d2 > d1, num, tmp;
      if (!fwd) {
        tmp = d2;
        d2 = d1;
        d1 = tmp;
      }
      num = d2 - d1;
      if (unit.multiplier > 1) {
        num = trunc(num / unit.multiplier);
      }
      if (unit.ambiguous) {
        d1 = cloneDate(d1);
        if (num) {
          num -= 1;
          advanceDate(d1, unit.name, num);
        }
        while (d1 < d2) {
          advanceDate(d1, unit.name, 1);
          if (d1 > d2) {
            break;
          }
          num += 1;
        }
      }
      return fwd ? -num : num;
    }
    module.exports = getTimeDistanceForUnit;
  }
});

// node_modules/sugar/date/internal/buildDateUnitMethods.js
var require_buildDateUnitMethods = __commonJS({
  "node_modules/sugar/date/internal/buildDateUnitMethods.js"(exports, module) {
    "use strict";
    var DateUnits = require_DateUnits();
    var DateUnitIndexes = require_DateUnitIndexes();
    var forEach = require_forEach();
    var createDate = require_createDate();
    var compareDate = require_compareDate();
    var advanceDate = require_advanceDate();
    var moveToEndOfUnit = require_moveToEndOfUnit();
    var namespaceAliases = require_namespaceAliases();
    var simpleCapitalize = require_simpleCapitalize();
    var moveToBeginningOfUnit = require_moveToBeginningOfUnit();
    var defineInstanceSimilar = require_defineInstanceSimilar();
    var getTimeDistanceForUnit = require_getTimeDistanceForUnit();
    var sugarDate = namespaceAliases.sugarDate;
    var HOURS_INDEX = DateUnitIndexes.HOURS_INDEX;
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    function buildDateUnitMethods() {
      defineInstanceSimilar(sugarDate, DateUnits, function(methods, unit, index) {
        var name = unit.name, caps = simpleCapitalize(name);
        if (index > DAY_INDEX) {
          forEach(["Last", "This", "Next"], function(shift) {
            methods["is" + shift + caps] = function(d, localeCode) {
              return compareDate(d, shift + " " + name, 0, localeCode, { locale: "en" });
            };
          });
        }
        if (index > HOURS_INDEX) {
          methods["beginningOf" + caps] = function(d, localeCode) {
            return moveToBeginningOfUnit(d, index, localeCode);
          };
          methods["endOf" + caps] = function(d, localeCode) {
            return moveToEndOfUnit(d, index, localeCode);
          };
        }
        methods["add" + caps + "s"] = function(d, num, reset) {
          return advanceDate(d, name, num, reset);
        };
        var since = function(date, d, options) {
          return getTimeDistanceForUnit(date, createDate(d, options, true), unit);
        };
        var until = function(date, d, options) {
          return getTimeDistanceForUnit(createDate(d, options, true), date, unit);
        };
        methods[name + "sAgo"] = methods[name + "sUntil"] = until;
        methods[name + "sSince"] = methods[name + "sFromNow"] = since;
      });
    }
    module.exports = buildDateUnitMethods;
  }
});

// node_modules/sugar/date/build/buildDateUnitMethodsCall.js
var require_buildDateUnitMethodsCall = __commonJS({
  "node_modules/sugar/date/build/buildDateUnitMethodsCall.js"() {
    "use strict";
    var buildDateUnitMethods = require_buildDateUnitMethods();
    buildDateUnitMethods();
  }
});

// node_modules/sugar/date/addDays.js
var require_addDays = __commonJS({
  "node_modules/sugar/date/addDays.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addDays;
  }
});

// node_modules/sugar/date/addHours.js
var require_addHours = __commonJS({
  "node_modules/sugar/date/addHours.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addHours;
  }
});

// node_modules/sugar/date/addMilliseconds.js
var require_addMilliseconds = __commonJS({
  "node_modules/sugar/date/addMilliseconds.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addMilliseconds;
  }
});

// node_modules/sugar/date/addMinutes.js
var require_addMinutes = __commonJS({
  "node_modules/sugar/date/addMinutes.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addMinutes;
  }
});

// node_modules/sugar/date/addMonths.js
var require_addMonths = __commonJS({
  "node_modules/sugar/date/addMonths.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addMonths;
  }
});

// node_modules/sugar/date/addSeconds.js
var require_addSeconds = __commonJS({
  "node_modules/sugar/date/addSeconds.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addSeconds;
  }
});

// node_modules/sugar/date/addWeeks.js
var require_addWeeks = __commonJS({
  "node_modules/sugar/date/addWeeks.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addWeeks;
  }
});

// node_modules/sugar/date/addYears.js
var require_addYears = __commonJS({
  "node_modules/sugar/date/addYears.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.addYears;
  }
});

// node_modules/sugar/date/internal/getDateParamsFromString.js
var require_getDateParamsFromString = __commonJS({
  "node_modules/sugar/date/internal/getDateParamsFromString.js"(exports, module) {
    "use strict";
    var isUndefined = require_isUndefined();
    function getDateParamsFromString(str) {
      var match, num, params = {};
      match = str.match(/^(-?\d*[\d.]\d*)?\s?(\w+?)s?$/i);
      if (match) {
        if (isUndefined(num)) {
          num = match[1] ? +match[1] : 1;
        }
        params[match[2].toLowerCase()] = num;
      }
      return params;
    }
    module.exports = getDateParamsFromString;
  }
});

// node_modules/sugar/date/internal/collectDateParamsFromArguments.js
var require_collectDateParamsFromArguments = __commonJS({
  "node_modules/sugar/date/internal/collectDateParamsFromArguments.js"(exports, module) {
    "use strict";
    var DateUnitIndexes = require_DateUnitIndexes();
    var isDefined = require_isDefined();
    var walkUnitDown = require_walkUnitDown();
    var YEAR_INDEX = DateUnitIndexes.YEAR_INDEX;
    function collectDateParamsFromArguments(args) {
      var params = {}, index = 0;
      walkUnitDown(YEAR_INDEX, function(unit) {
        var arg = args[index++];
        if (isDefined(arg)) {
          params[unit.name] = arg;
        }
      });
      return params;
    }
    module.exports = collectDateParamsFromArguments;
  }
});

// node_modules/sugar/date/internal/collectUpdateDateArguments.js
var require_collectUpdateDateArguments = __commonJS({
  "node_modules/sugar/date/internal/collectUpdateDateArguments.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var simpleClone = require_simpleClone();
    var isObjectType = require_isObjectType();
    var getDateParamsFromString = require_getDateParamsFromString();
    var collectDateParamsFromArguments = require_collectDateParamsFromArguments();
    var isNumber = classChecks.isNumber;
    var isString = classChecks.isString;
    function collectUpdateDateArguments(args, allowDuration) {
      var arg1 = args[0], arg2 = args[1], params, reset;
      if (allowDuration && isString(arg1)) {
        params = getDateParamsFromString(arg1);
        reset = arg2;
      } else if (isNumber(arg1) && isNumber(arg2)) {
        params = collectDateParamsFromArguments(args);
      } else {
        params = isObjectType(arg1) ? simpleClone(arg1) : arg1;
        reset = arg2;
      }
      return [params, reset];
    }
    module.exports = collectUpdateDateArguments;
  }
});

// node_modules/sugar/date/internal/advanceDateWithArgs.js
var require_advanceDateWithArgs = __commonJS({
  "node_modules/sugar/date/internal/advanceDateWithArgs.js"(exports, module) {
    "use strict";
    var updateDate = require_updateDate();
    var collectUpdateDateArguments = require_collectUpdateDateArguments();
    function advanceDateWithArgs(d, args, dir) {
      args = collectUpdateDateArguments(args, true);
      return updateDate(d, args[0], args[1], dir);
    }
    module.exports = advanceDateWithArgs;
  }
});

// node_modules/sugar/date/advance.js
var require_advance = __commonJS({
  "node_modules/sugar/date/advance.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var advanceDateWithArgs = require_advanceDateWithArgs();
    Sugar.Date.defineInstanceWithArguments({
      "advance": function(d, args) {
        return advanceDateWithArgs(d, args, 1);
      }
    });
    module.exports = Sugar.Date.advance;
  }
});

// node_modules/sugar/date/beginningOfDay.js
var require_beginningOfDay = __commonJS({
  "node_modules/sugar/date/beginningOfDay.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.beginningOfDay;
  }
});

// node_modules/sugar/date/beginningOfISOWeek.js
var require_beginningOfISOWeek = __commonJS({
  "node_modules/sugar/date/beginningOfISOWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var resetTime = require_resetTime();
    var getWeekday = require_getWeekday();
    var setWeekday = require_setWeekday();
    Sugar.Date.defineInstance({
      "beginningOfISOWeek": function(date) {
        var day = getWeekday(date);
        if (day === 0) {
          day = -6;
        } else if (day !== 1) {
          day = 1;
        }
        setWeekday(date, day);
        return resetTime(date);
      }
    });
    module.exports = Sugar.Date.beginningOfISOWeek;
  }
});

// node_modules/sugar/date/beginningOfMonth.js
var require_beginningOfMonth = __commonJS({
  "node_modules/sugar/date/beginningOfMonth.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.beginningOfMonth;
  }
});

// node_modules/sugar/date/beginningOfWeek.js
var require_beginningOfWeek = __commonJS({
  "node_modules/sugar/date/beginningOfWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.beginningOfWeek;
  }
});

// node_modules/sugar/date/beginningOfYear.js
var require_beginningOfYear = __commonJS({
  "node_modules/sugar/date/beginningOfYear.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.beginningOfYear;
  }
});

// node_modules/sugar/date/clone.js
var require_clone4 = __commonJS({
  "node_modules/sugar/date/clone.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var cloneDate = require_cloneDate();
    Sugar.Date.defineInstance({
      "clone": function(date) {
        return cloneDate(date);
      }
    });
    module.exports = Sugar.Date.clone;
  }
});

// node_modules/sugar/date/daysAgo.js
var require_daysAgo2 = __commonJS({
  "node_modules/sugar/date/daysAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.daysAgo;
  }
});

// node_modules/sugar/date/daysFromNow.js
var require_daysFromNow2 = __commonJS({
  "node_modules/sugar/date/daysFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.daysFromNow;
  }
});

// node_modules/sugar/date/daysInMonth.js
var require_daysInMonth = __commonJS({
  "node_modules/sugar/date/daysInMonth.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getDaysInMonth = require_getDaysInMonth();
    Sugar.Date.defineInstance({
      "daysInMonth": function(date) {
        return getDaysInMonth(date);
      }
    });
    module.exports = Sugar.Date.daysInMonth;
  }
});

// node_modules/sugar/date/daysSince.js
var require_daysSince = __commonJS({
  "node_modules/sugar/date/daysSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.daysSince;
  }
});

// node_modules/sugar/date/daysUntil.js
var require_daysUntil = __commonJS({
  "node_modules/sugar/date/daysUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.daysUntil;
  }
});

// node_modules/sugar/date/endOfDay.js
var require_endOfDay = __commonJS({
  "node_modules/sugar/date/endOfDay.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.endOfDay;
  }
});

// node_modules/sugar/date/endOfISOWeek.js
var require_endOfISOWeek = __commonJS({
  "node_modules/sugar/date/endOfISOWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var DateUnitIndexes = require_DateUnitIndexes();
    var getWeekday = require_getWeekday();
    var setWeekday = require_setWeekday();
    var moveToEndOfUnit = require_moveToEndOfUnit();
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    Sugar.Date.defineInstance({
      "endOfISOWeek": function(date) {
        if (getWeekday(date) !== 0) {
          setWeekday(date, 7);
        }
        return moveToEndOfUnit(date, DAY_INDEX);
      }
    });
    module.exports = Sugar.Date.endOfISOWeek;
  }
});

// node_modules/sugar/date/endOfMonth.js
var require_endOfMonth = __commonJS({
  "node_modules/sugar/date/endOfMonth.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.endOfMonth;
  }
});

// node_modules/sugar/date/endOfWeek.js
var require_endOfWeek = __commonJS({
  "node_modules/sugar/date/endOfWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.endOfWeek;
  }
});

// node_modules/sugar/date/endOfYear.js
var require_endOfYear = __commonJS({
  "node_modules/sugar/date/endOfYear.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.endOfYear;
  }
});

// node_modules/sugar/date/var/CoreOutputFormats.js
var require_CoreOutputFormats = __commonJS({
  "node_modules/sugar/date/var/CoreOutputFormats.js"(exports, module) {
    "use strict";
    var CoreOutputFormats = {
      "ISO8601": "{yyyy}-{MM}-{dd}T{HH}:{mm}:{ss}.{SSS}{Z}",
      "RFC1123": "{Dow}, {dd} {Mon} {yyyy} {HH}:{mm}:{ss} {ZZ}",
      "RFC1036": "{Weekday}, {dd}-{Mon}-{yy} {HH}:{mm}:{ss} {ZZ}"
    };
    module.exports = CoreOutputFormats;
  }
});

// node_modules/sugar/date/var/TIMEZONE_ABBREVIATION_REG.js
var require_TIMEZONE_ABBREVIATION_REG = __commonJS({
  "node_modules/sugar/date/var/TIMEZONE_ABBREVIATION_REG.js"(exports, module) {
    "use strict";
    module.exports = /\(([-+]\d{2,4}|\w{3,5})\)$/;
  }
});

// node_modules/sugar/date/internal/getHours.js
var require_getHours = __commonJS({
  "node_modules/sugar/date/internal/getHours.js"(exports, module) {
    "use strict";
    var callDateGet = require_callDateGet();
    function getHours(d) {
      return callDateGet(d, "Hours");
    }
    module.exports = getHours;
  }
});

// node_modules/sugar/date/internal/getWeekNumber.js
var require_getWeekNumber = __commonJS({
  "node_modules/sugar/date/internal/getWeekNumber.js"(exports, module) {
    "use strict";
    var ISODefaults = require_ISODefaults();
    var setDate = require_setDate();
    var getDate = require_getDate();
    var cloneDate = require_cloneDate();
    var isUndefined = require_isUndefined();
    var moveToEndOfWeek = require_moveToEndOfWeek();
    var moveToBeginningOfWeek = require_moveToBeginningOfWeek();
    var moveToFirstDayOfWeekYear = require_moveToFirstDayOfWeekYear();
    var ISO_FIRST_DAY_OF_WEEK = ISODefaults.ISO_FIRST_DAY_OF_WEEK;
    var ISO_FIRST_DAY_OF_WEEK_YEAR = ISODefaults.ISO_FIRST_DAY_OF_WEEK_YEAR;
    function getWeekNumber(d, allowPrevious, firstDayOfWeek, firstDayOfWeekYear) {
      var isoWeek, n = 0;
      if (isUndefined(firstDayOfWeek)) {
        firstDayOfWeek = ISO_FIRST_DAY_OF_WEEK;
      }
      if (isUndefined(firstDayOfWeekYear)) {
        firstDayOfWeekYear = ISO_FIRST_DAY_OF_WEEK_YEAR;
      }
      isoWeek = moveToEndOfWeek(cloneDate(d), firstDayOfWeek);
      moveToFirstDayOfWeekYear(isoWeek, firstDayOfWeek, firstDayOfWeekYear);
      if (allowPrevious && d < isoWeek) {
        isoWeek = moveToBeginningOfWeek(cloneDate(d), firstDayOfWeek);
        moveToFirstDayOfWeekYear(isoWeek, firstDayOfWeek, firstDayOfWeekYear);
      }
      while (isoWeek <= d) {
        setDate(isoWeek, getDate(isoWeek) + 7);
        n++;
      }
      return n;
    }
    module.exports = getWeekNumber;
  }
});

// node_modules/sugar/date/internal/getWeekYear.js
var require_getWeekYear = __commonJS({
  "node_modules/sugar/date/internal/getWeekYear.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var getYear = require_getYear();
    var getMonth = require_getMonth();
    var getWeekNumber = require_getWeekNumber();
    var localeManager = LocaleHelpers.localeManager;
    function getWeekYear(d, localeCode, iso) {
      var year, month, firstDayOfWeek, firstDayOfWeekYear, week, loc;
      year = getYear(d);
      month = getMonth(d);
      if (month === 0 || month === 11) {
        if (!iso) {
          loc = localeManager.get(localeCode);
          firstDayOfWeek = loc.getFirstDayOfWeek(localeCode);
          firstDayOfWeekYear = loc.getFirstDayOfWeekYear(localeCode);
        }
        week = getWeekNumber(d, false, firstDayOfWeek, firstDayOfWeekYear);
        if (month === 0 && week === 0) {
          year -= 1;
        } else if (month === 11 && week === 1) {
          year += 1;
        }
      }
      return year;
    }
    module.exports = getWeekYear;
  }
});

// node_modules/sugar/date/internal/getUTCOffset.js
var require_getUTCOffset = __commonJS({
  "node_modules/sugar/date/internal/getUTCOffset.js"(exports, module) {
    "use strict";
    var _utc = require_utc();
    var trunc = require_trunc();
    var tzOffset = require_tzOffset();
    var padNumber = require_padNumber();
    var mathAliases = require_mathAliases();
    var abs = mathAliases.abs;
    function getUTCOffset(d, iso) {
      var offset = _utc(d) ? 0 : tzOffset(d), hours, mins, colon;
      colon = iso === true ? ":" : "";
      if (!offset && iso)
        return "Z";
      hours = padNumber(trunc(-offset / 60), 2, true);
      mins = padNumber(abs(offset % 60), 2);
      return hours + colon + mins;
    }
    module.exports = getUTCOffset;
  }
});

// node_modules/sugar/date/internal/getDaysSince.js
var require_getDaysSince = __commonJS({
  "node_modules/sugar/date/internal/getDaysSince.js"(exports, module) {
    "use strict";
    var DateUnits = require_DateUnits();
    var DateUnitIndexes = require_DateUnitIndexes();
    var getTimeDistanceForUnit = require_getTimeDistanceForUnit();
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    function getDaysSince(d1, d2) {
      return getTimeDistanceForUnit(d1, d2, DateUnits[DAY_INDEX]);
    }
    module.exports = getDaysSince;
  }
});

// node_modules/sugar/date/internal/getMeridiemToken.js
var require_getMeridiemToken = __commonJS({
  "node_modules/sugar/date/internal/getMeridiemToken.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var trunc = require_trunc();
    var getHours = require_getHours();
    var localeManager = LocaleHelpers.localeManager;
    function getMeridiemToken(d, localeCode) {
      var hours = getHours(d);
      return localeManager.get(localeCode).ampm[trunc(hours / 12)] || "";
    }
    module.exports = getMeridiemToken;
  }
});

// node_modules/sugar/date/var/FormatTokensBase.js
var require_FormatTokensBase = __commonJS({
  "node_modules/sugar/date/var/FormatTokensBase.js"(exports, module) {
    "use strict";
    var TIMEZONE_ABBREVIATION_REG = require_TIMEZONE_ABBREVIATION_REG();
    var LocaleHelpers = require_LocaleHelpers();
    var DateUnitIndexes = require_DateUnitIndexes();
    var trunc = require_trunc();
    var getDate = require_getDate();
    var getYear = require_getYear();
    var getHours = require_getHours();
    var getMonth = require_getMonth();
    var cloneDate = require_cloneDate();
    var padNumber = require_padNumber();
    var getWeekday = require_getWeekday();
    var callDateGet = require_callDateGet();
    var mathAliases = require_mathAliases();
    var getWeekYear = require_getWeekYear();
    var getUTCOffset = require_getUTCOffset();
    var getDaysSince = require_getDaysSince();
    var getWeekNumber = require_getWeekNumber();
    var getMeridiemToken = require_getMeridiemToken();
    var setUnitAndLowerToEdge = require_setUnitAndLowerToEdge();
    var localeManager = LocaleHelpers.localeManager;
    var MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;
    var ceil = mathAliases.ceil;
    var FormatTokensBase = [
      {
        ldml: "Dow",
        strf: "a",
        lowerToken: "dow",
        get: function(d, localeCode) {
          return localeManager.get(localeCode).getWeekdayName(getWeekday(d), 2);
        }
      },
      {
        ldml: "Weekday",
        strf: "A",
        lowerToken: "weekday",
        allowAlternates: true,
        get: function(d, localeCode, alternate) {
          return localeManager.get(localeCode).getWeekdayName(getWeekday(d), alternate);
        }
      },
      {
        ldml: "Mon",
        strf: "b h",
        lowerToken: "mon",
        get: function(d, localeCode) {
          return localeManager.get(localeCode).getMonthName(getMonth(d), 2);
        }
      },
      {
        ldml: "Month",
        strf: "B",
        lowerToken: "month",
        allowAlternates: true,
        get: function(d, localeCode, alternate) {
          return localeManager.get(localeCode).getMonthName(getMonth(d), alternate);
        }
      },
      {
        strf: "C",
        get: function(d) {
          return getYear(d).toString().slice(0, 2);
        }
      },
      {
        ldml: "d date day",
        strf: "d",
        strfPadding: 2,
        ldmlPaddedToken: "dd",
        ordinalToken: "do",
        get: function(d) {
          return getDate(d);
        }
      },
      {
        strf: "e",
        get: function(d) {
          return padNumber(getDate(d), 2, false, 10, " ");
        }
      },
      {
        ldml: "H 24hr",
        strf: "H",
        strfPadding: 2,
        ldmlPaddedToken: "HH",
        get: function(d) {
          return getHours(d);
        }
      },
      {
        ldml: "h hours 12hr",
        strf: "I",
        strfPadding: 2,
        ldmlPaddedToken: "hh",
        get: function(d) {
          return getHours(d) % 12 || 12;
        }
      },
      {
        ldml: "D",
        strf: "j",
        strfPadding: 3,
        ldmlPaddedToken: "DDD",
        get: function(d) {
          var s = setUnitAndLowerToEdge(cloneDate(d), MONTH_INDEX);
          return getDaysSince(d, s) + 1;
        }
      },
      {
        ldml: "M",
        strf: "m",
        strfPadding: 2,
        ordinalToken: "Mo",
        ldmlPaddedToken: "MM",
        get: function(d) {
          return getMonth(d) + 1;
        }
      },
      {
        ldml: "m minutes",
        strf: "M",
        strfPadding: 2,
        ldmlPaddedToken: "mm",
        get: function(d) {
          return callDateGet(d, "Minutes");
        }
      },
      {
        ldml: "Q",
        get: function(d) {
          return ceil((getMonth(d) + 1) / 3);
        }
      },
      {
        ldml: "TT",
        strf: "p",
        get: function(d, localeCode) {
          return getMeridiemToken(d, localeCode);
        }
      },
      {
        ldml: "tt",
        strf: "P",
        get: function(d, localeCode) {
          return getMeridiemToken(d, localeCode).toLowerCase();
        }
      },
      {
        ldml: "T",
        lowerToken: "t",
        get: function(d, localeCode) {
          return getMeridiemToken(d, localeCode).charAt(0);
        }
      },
      {
        ldml: "s seconds",
        strf: "S",
        strfPadding: 2,
        ldmlPaddedToken: "ss",
        get: function(d) {
          return callDateGet(d, "Seconds");
        }
      },
      {
        ldml: "S ms",
        strfPadding: 3,
        ldmlPaddedToken: "SSS",
        get: function(d) {
          return callDateGet(d, "Milliseconds");
        }
      },
      {
        ldml: "e",
        strf: "u",
        ordinalToken: "eo",
        get: function(d) {
          return getWeekday(d) || 7;
        }
      },
      {
        strf: "U",
        strfPadding: 2,
        get: function(d) {
          return getWeekNumber(d, false, 0);
        }
      },
      {
        ldml: "W",
        strf: "V",
        strfPadding: 2,
        ordinalToken: "Wo",
        ldmlPaddedToken: "WW",
        get: function(d) {
          return getWeekNumber(d, true);
        }
      },
      {
        strf: "w",
        get: function(d) {
          return getWeekday(d);
        }
      },
      {
        ldml: "w",
        ordinalToken: "wo",
        ldmlPaddedToken: "ww",
        get: function(d, localeCode) {
          var loc = localeManager.get(localeCode), dow = loc.getFirstDayOfWeek(localeCode), doy = loc.getFirstDayOfWeekYear(localeCode);
          return getWeekNumber(d, true, dow, doy);
        }
      },
      {
        strf: "W",
        strfPadding: 2,
        get: function(d) {
          return getWeekNumber(d, false);
        }
      },
      {
        ldmlPaddedToken: "gggg",
        ldmlTwoDigitToken: "gg",
        get: function(d, localeCode) {
          return getWeekYear(d, localeCode);
        }
      },
      {
        strf: "G",
        strfPadding: 4,
        strfTwoDigitToken: "g",
        ldmlPaddedToken: "GGGG",
        ldmlTwoDigitToken: "GG",
        get: function(d, localeCode) {
          return getWeekYear(d, localeCode, true);
        }
      },
      {
        ldml: "year",
        ldmlPaddedToken: "yyyy",
        ldmlTwoDigitToken: "yy",
        strf: "Y",
        strfPadding: 4,
        strfTwoDigitToken: "y",
        get: function(d) {
          return getYear(d);
        }
      },
      {
        ldml: "ZZ",
        strf: "z",
        get: function(d) {
          return getUTCOffset(d);
        }
      },
      {
        ldml: "X",
        get: function(d) {
          return trunc(d.getTime() / 1e3);
        }
      },
      {
        ldml: "x",
        get: function(d) {
          return d.getTime();
        }
      },
      {
        ldml: "Z",
        get: function(d) {
          return getUTCOffset(d, true);
        }
      },
      {
        ldml: "z",
        strf: "Z",
        get: function(d) {
          var match = d.toString().match(TIMEZONE_ABBREVIATION_REG);
          return match ? match[1] : "";
        }
      },
      {
        strf: "D",
        alias: "%m/%d/%y"
      },
      {
        strf: "F",
        alias: "%Y-%m-%d"
      },
      {
        strf: "r",
        alias: "%I:%M:%S %p"
      },
      {
        strf: "R",
        alias: "%H:%M"
      },
      {
        strf: "T",
        alias: "%H:%M:%S"
      },
      {
        strf: "x",
        alias: "{short}"
      },
      {
        strf: "X",
        alias: "{time}"
      },
      {
        strf: "c",
        alias: "{stamp}"
      }
    ];
    module.exports = FormatTokensBase;
  }
});

// node_modules/sugar/date/var/formattingTokens.js
var require_formattingTokens = __commonJS({
  "node_modules/sugar/date/var/formattingTokens.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var FormatTokensBase = require_FormatTokensBase();
    var CoreOutputFormats = require_CoreOutputFormats();
    var forEach = require_forEach();
    var padNumber = require_padNumber();
    var spaceSplit = require_spaceSplit();
    var namespaceAliases = require_namespaceAliases();
    var coreUtilityAliases = require_coreUtilityAliases();
    var createFormatMatcher = require_createFormatMatcher();
    var defineInstanceSimilar = require_defineInstanceSimilar();
    var localeManager = LocaleHelpers.localeManager;
    var hasOwn = coreUtilityAliases.hasOwn;
    var getOwn = coreUtilityAliases.getOwn;
    var forEachProperty = coreUtilityAliases.forEachProperty;
    var sugarDate = namespaceAliases.sugarDate;
    var ldmlTokens;
    var strfTokens;
    function buildDateFormatTokens() {
      function addFormats(target, tokens, fn) {
        if (tokens) {
          forEach(spaceSplit(tokens), function(token) {
            target[token] = fn;
          });
        }
      }
      function buildLowercase(get) {
        return function(d, localeCode) {
          return get(d, localeCode).toLowerCase();
        };
      }
      function buildOrdinal(get) {
        return function(d, localeCode) {
          var n = get(d, localeCode);
          return n + localeManager.get(localeCode).getOrdinal(n);
        };
      }
      function buildPadded(get, padding) {
        return function(d, localeCode) {
          return padNumber(get(d, localeCode), padding);
        };
      }
      function buildTwoDigits(get) {
        return function(d, localeCode) {
          return get(d, localeCode) % 100;
        };
      }
      function buildAlias(alias) {
        return function(d, localeCode) {
          return dateFormatMatcher(alias, d, localeCode);
        };
      }
      function buildAlternates(f) {
        for (var n = 1; n <= 5; n++) {
          buildAlternate(f, n);
        }
      }
      function buildAlternate(f, n) {
        var alternate = function(d, localeCode) {
          return f.get(d, localeCode, n);
        };
        addFormats(ldmlTokens, f.ldml + n, alternate);
        if (f.lowerToken) {
          ldmlTokens[f.lowerToken + n] = buildLowercase(alternate);
        }
      }
      function getIdentityFormat(name) {
        return function(d, localeCode) {
          var loc = localeManager.get(localeCode);
          return dateFormatMatcher(loc[name], d, localeCode);
        };
      }
      ldmlTokens = {};
      strfTokens = {};
      forEach(FormatTokensBase, function(f) {
        var get = f.get, getPadded;
        if (f.lowerToken) {
          ldmlTokens[f.lowerToken] = buildLowercase(get);
        }
        if (f.ordinalToken) {
          ldmlTokens[f.ordinalToken] = buildOrdinal(get, f);
        }
        if (f.ldmlPaddedToken) {
          ldmlTokens[f.ldmlPaddedToken] = buildPadded(get, f.ldmlPaddedToken.length);
        }
        if (f.ldmlTwoDigitToken) {
          ldmlTokens[f.ldmlTwoDigitToken] = buildPadded(buildTwoDigits(get), 2);
        }
        if (f.strfTwoDigitToken) {
          strfTokens[f.strfTwoDigitToken] = buildPadded(buildTwoDigits(get), 2);
        }
        if (f.strfPadding) {
          getPadded = buildPadded(get, f.strfPadding);
        }
        if (f.alias) {
          get = buildAlias(f.alias);
        }
        if (f.allowAlternates) {
          buildAlternates(f);
        }
        addFormats(ldmlTokens, f.ldml, get);
        addFormats(strfTokens, f.strf, getPadded || get);
      });
      forEachProperty(CoreOutputFormats, function(src, name) {
        addFormats(ldmlTokens, name, buildAlias(src));
      });
      defineInstanceSimilar(sugarDate, "short medium long full", function(methods, name) {
        var fn = getIdentityFormat(name);
        addFormats(ldmlTokens, name, fn);
        methods[name] = fn;
      });
      addFormats(ldmlTokens, "time", getIdentityFormat("time"));
      addFormats(ldmlTokens, "stamp", getIdentityFormat("stamp"));
    }
    var dateFormatMatcher;
    function buildDateFormatMatcher() {
      function getLdml(d, token, localeCode) {
        return getOwn(ldmlTokens, token)(d, localeCode);
      }
      function getStrf(d, token, localeCode) {
        return getOwn(strfTokens, token)(d, localeCode);
      }
      function checkDateToken(ldml, strf) {
        return hasOwn(ldmlTokens, ldml) || hasOwn(strfTokens, strf);
      }
      dateFormatMatcher = createFormatMatcher(getLdml, getStrf, checkDateToken);
    }
    buildDateFormatTokens();
    buildDateFormatMatcher();
    module.exports = {
      ldmlTokens,
      strfTokens,
      dateFormatMatcher
    };
  }
});

// node_modules/sugar/date/internal/assertDateIsValid.js
var require_assertDateIsValid = __commonJS({
  "node_modules/sugar/date/internal/assertDateIsValid.js"(exports, module) {
    "use strict";
    var dateIsValid = require_dateIsValid();
    function assertDateIsValid(d) {
      if (!dateIsValid(d)) {
        throw new TypeError("Date is not valid");
      }
    }
    module.exports = assertDateIsValid;
  }
});

// node_modules/sugar/date/internal/dateFormat.js
var require_dateFormat = __commonJS({
  "node_modules/sugar/date/internal/dateFormat.js"(exports, module) {
    "use strict";
    var CoreOutputFormats = require_CoreOutputFormats();
    var formattingTokens = require_formattingTokens();
    var assertDateIsValid = require_assertDateIsValid();
    var dateFormatMatcher = formattingTokens.dateFormatMatcher;
    function dateFormat(d, format, localeCode) {
      assertDateIsValid(d);
      format = CoreOutputFormats[format] || format || "{long}";
      return dateFormatMatcher(format, d, localeCode);
    }
    module.exports = dateFormat;
  }
});

// node_modules/sugar/date/format.js
var require_format3 = __commonJS({
  "node_modules/sugar/date/format.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var dateFormat = require_dateFormat();
    Sugar.Date.defineInstance({
      "format": function(date, f, localeCode) {
        return dateFormat(date, f, localeCode);
      }
    });
    module.exports = Sugar.Date.format;
  }
});

// node_modules/sugar/date/internal/createDateWithContext.js
var require_createDateWithContext = __commonJS({
  "node_modules/sugar/date/internal/createDateWithContext.js"(exports, module) {
    "use strict";
    var getExtendedDate = require_getExtendedDate();
    function createDateWithContext(contextDate, d, options, forceClone) {
      return getExtendedDate(contextDate, d, options, forceClone).date;
    }
    module.exports = createDateWithContext;
  }
});

// node_modules/sugar/date/get.js
var require_get2 = __commonJS({
  "node_modules/sugar/date/get.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createDateWithContext = require_createDateWithContext();
    Sugar.Date.defineInstance({
      "get": function(date, d, options) {
        return createDateWithContext(date, d, options);
      }
    });
    module.exports = Sugar.Date.get;
  }
});

// node_modules/sugar/date/getISOWeek.js
var require_getISOWeek = __commonJS({
  "node_modules/sugar/date/getISOWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getWeekNumber = require_getWeekNumber();
    Sugar.Date.defineInstance({
      "getISOWeek": function(date) {
        return getWeekNumber(date, true);
      }
    });
    module.exports = Sugar.Date.getISOWeek;
  }
});

// node_modules/sugar/date/getUTCOffset.js
var require_getUTCOffset2 = __commonJS({
  "node_modules/sugar/date/getUTCOffset.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getUTCOffset = require_getUTCOffset();
    Sugar.Date.defineInstance({
      "getUTCOffset": function(date, iso) {
        return getUTCOffset(date, iso);
      }
    });
    module.exports = Sugar.Date.getUTCOffset;
  }
});

// node_modules/sugar/date/getUTCWeekday.js
var require_getUTCWeekday = __commonJS({
  "node_modules/sugar/date/getUTCWeekday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.Date.defineInstance({
      "getUTCWeekday": function(date) {
        return date.getUTCDay();
      }
    });
    module.exports = Sugar.Date.getUTCWeekday;
  }
});

// node_modules/sugar/date/getWeekday.js
var require_getWeekday2 = __commonJS({
  "node_modules/sugar/date/getWeekday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getWeekday = require_getWeekday();
    Sugar.Date.defineInstance({
      "getWeekday": function(date) {
        return getWeekday(date);
      }
    });
    module.exports = Sugar.Date.getWeekday;
  }
});

// node_modules/sugar/date/hoursAgo.js
var require_hoursAgo2 = __commonJS({
  "node_modules/sugar/date/hoursAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.hoursAgo;
  }
});

// node_modules/sugar/date/hoursFromNow.js
var require_hoursFromNow2 = __commonJS({
  "node_modules/sugar/date/hoursFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.hoursFromNow;
  }
});

// node_modules/sugar/date/hoursSince.js
var require_hoursSince = __commonJS({
  "node_modules/sugar/date/hoursSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.hoursSince;
  }
});

// node_modules/sugar/date/hoursUntil.js
var require_hoursUntil = __commonJS({
  "node_modules/sugar/date/hoursUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.hoursUntil;
  }
});

// node_modules/sugar/date/internal/compareDay.js
var require_compareDay = __commonJS({
  "node_modules/sugar/date/internal/compareDay.js"(exports, module) {
    "use strict";
    var setDate = require_setDate();
    var getDate = require_getDate();
    var getYear = require_getYear();
    var getMonth = require_getMonth();
    var getNewDate = require_getNewDate();
    function compareDay(d, shift) {
      var comp = getNewDate();
      if (shift) {
        setDate(comp, getDate(comp) + shift);
      }
      return getYear(d) === getYear(comp) && getMonth(d) === getMonth(comp) && getDate(d) === getDate(comp);
    }
    module.exports = compareDay;
  }
});

// node_modules/sugar/date/internal/fullCompareDate.js
var require_fullCompareDate = __commonJS({
  "node_modules/sugar/date/internal/fullCompareDate.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var trim = require_trim();
    var getMonth = require_getMonth();
    var isDefined = require_isDefined();
    var getNewDate = require_getNewDate();
    var compareDay = require_compareDay();
    var getWeekday = require_getWeekday();
    var dateIsValid = require_dateIsValid();
    var classChecks = require_classChecks();
    var compareDate = require_compareDate();
    var isString = classChecks.isString;
    var English = LocaleHelpers.English;
    function fullCompareDate(date, d, margin) {
      var tmp;
      if (!dateIsValid(date))
        return;
      if (isString(d)) {
        d = trim(d).toLowerCase();
        switch (true) {
          case d === "future":
            return date.getTime() > getNewDate().getTime();
          case d === "past":
            return date.getTime() < getNewDate().getTime();
          case d === "today":
            return compareDay(date);
          case d === "tomorrow":
            return compareDay(date, 1);
          case d === "yesterday":
            return compareDay(date, -1);
          case d === "weekday":
            return getWeekday(date) > 0 && getWeekday(date) < 6;
          case d === "weekend":
            return getWeekday(date) === 0 || getWeekday(date) === 6;
          case isDefined(tmp = English.weekdayMap[d]):
            return getWeekday(date) === tmp;
          case isDefined(tmp = English.monthMap[d]):
            return getMonth(date) === tmp;
        }
      }
      return compareDate(date, d, margin);
    }
    module.exports = fullCompareDate;
  }
});

// node_modules/sugar/date/is.js
var require_is = __commonJS({
  "node_modules/sugar/date/is.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var fullCompareDate = require_fullCompareDate();
    Sugar.Date.defineInstance({
      "is": function(date, d, margin) {
        return fullCompareDate(date, d, margin);
      }
    });
    module.exports = Sugar.Date.is;
  }
});

// node_modules/sugar/date/isAfter.js
var require_isAfter = __commonJS({
  "node_modules/sugar/date/isAfter.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createDate = require_createDate();
    Sugar.Date.defineInstance({
      "isAfter": function(date, d, margin) {
        return date.getTime() > createDate(d).getTime() - (margin || 0);
      }
    });
    module.exports = Sugar.Date.isAfter;
  }
});

// node_modules/sugar/date/isBefore.js
var require_isBefore = __commonJS({
  "node_modules/sugar/date/isBefore.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createDate = require_createDate();
    Sugar.Date.defineInstance({
      "isBefore": function(date, d, margin) {
        return date.getTime() < createDate(d).getTime() + (margin || 0);
      }
    });
    module.exports = Sugar.Date.isBefore;
  }
});

// node_modules/sugar/date/isBetween.js
var require_isBetween = __commonJS({
  "node_modules/sugar/date/isBetween.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createDate = require_createDate();
    var mathAliases = require_mathAliases();
    var min = mathAliases.min;
    var max = mathAliases.max;
    Sugar.Date.defineInstance({
      "isBetween": function(date, d1, d2, margin) {
        var t = date.getTime();
        var t1 = createDate(d1).getTime();
        var t2 = createDate(d2).getTime();
        var lo = min(t1, t2);
        var hi = max(t1, t2);
        margin = margin || 0;
        return lo - margin <= t && hi + margin >= t;
      }
    });
    module.exports = Sugar.Date.isBetween;
  }
});

// node_modules/sugar/date/internal/buildRelativeAliases.js
var require_buildRelativeAliases = __commonJS({
  "node_modules/sugar/date/internal/buildRelativeAliases.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var spaceSplit = require_spaceSplit();
    var fullCompareDate = require_fullCompareDate();
    var namespaceAliases = require_namespaceAliases();
    var defineInstanceSimilar = require_defineInstanceSimilar();
    var English = LocaleHelpers.English;
    var sugarDate = namespaceAliases.sugarDate;
    function buildRelativeAliases() {
      var special = spaceSplit("Today Yesterday Tomorrow Weekday Weekend Future Past");
      var weekdays = English.weekdays.slice(0, 7);
      var months = English.months.slice(0, 12);
      var together = special.concat(weekdays).concat(months);
      defineInstanceSimilar(sugarDate, together, function(methods, name) {
        methods["is" + name] = function(d) {
          return fullCompareDate(d, name);
        };
      });
    }
    module.exports = buildRelativeAliases;
  }
});

// node_modules/sugar/date/build/buildRelativeAliasesCall.js
var require_buildRelativeAliasesCall = __commonJS({
  "node_modules/sugar/date/build/buildRelativeAliasesCall.js"() {
    "use strict";
    var buildRelativeAliases = require_buildRelativeAliases();
    buildRelativeAliases();
  }
});

// node_modules/sugar/date/isFriday.js
var require_isFriday = __commonJS({
  "node_modules/sugar/date/isFriday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isFriday;
  }
});

// node_modules/sugar/date/isFuture.js
var require_isFuture = __commonJS({
  "node_modules/sugar/date/isFuture.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isFuture;
  }
});

// node_modules/sugar/date/isLastMonth.js
var require_isLastMonth = __commonJS({
  "node_modules/sugar/date/isLastMonth.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isLastMonth;
  }
});

// node_modules/sugar/date/isLastWeek.js
var require_isLastWeek = __commonJS({
  "node_modules/sugar/date/isLastWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isLastWeek;
  }
});

// node_modules/sugar/date/isLastYear.js
var require_isLastYear = __commonJS({
  "node_modules/sugar/date/isLastYear.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isLastYear;
  }
});

// node_modules/sugar/date/isLeapYear.js
var require_isLeapYear = __commonJS({
  "node_modules/sugar/date/isLeapYear.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getYear = require_getYear();
    Sugar.Date.defineInstance({
      "isLeapYear": function(date) {
        var year = getYear(date);
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
    });
    module.exports = Sugar.Date.isLeapYear;
  }
});

// node_modules/sugar/date/isMonday.js
var require_isMonday = __commonJS({
  "node_modules/sugar/date/isMonday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isMonday;
  }
});

// node_modules/sugar/date/isNextMonth.js
var require_isNextMonth = __commonJS({
  "node_modules/sugar/date/isNextMonth.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isNextMonth;
  }
});

// node_modules/sugar/date/isNextWeek.js
var require_isNextWeek = __commonJS({
  "node_modules/sugar/date/isNextWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isNextWeek;
  }
});

// node_modules/sugar/date/isNextYear.js
var require_isNextYear = __commonJS({
  "node_modules/sugar/date/isNextYear.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isNextYear;
  }
});

// node_modules/sugar/date/isPast.js
var require_isPast = __commonJS({
  "node_modules/sugar/date/isPast.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isPast;
  }
});

// node_modules/sugar/date/isSaturday.js
var require_isSaturday = __commonJS({
  "node_modules/sugar/date/isSaturday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isSaturday;
  }
});

// node_modules/sugar/date/isSunday.js
var require_isSunday = __commonJS({
  "node_modules/sugar/date/isSunday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isSunday;
  }
});

// node_modules/sugar/date/isThisMonth.js
var require_isThisMonth = __commonJS({
  "node_modules/sugar/date/isThisMonth.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isThisMonth;
  }
});

// node_modules/sugar/date/isThisWeek.js
var require_isThisWeek = __commonJS({
  "node_modules/sugar/date/isThisWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isThisWeek;
  }
});

// node_modules/sugar/date/isThisYear.js
var require_isThisYear = __commonJS({
  "node_modules/sugar/date/isThisYear.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.isThisYear;
  }
});

// node_modules/sugar/date/isThursday.js
var require_isThursday = __commonJS({
  "node_modules/sugar/date/isThursday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isThursday;
  }
});

// node_modules/sugar/date/isToday.js
var require_isToday = __commonJS({
  "node_modules/sugar/date/isToday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isToday;
  }
});

// node_modules/sugar/date/isTomorrow.js
var require_isTomorrow = __commonJS({
  "node_modules/sugar/date/isTomorrow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isTomorrow;
  }
});

// node_modules/sugar/date/isTuesday.js
var require_isTuesday = __commonJS({
  "node_modules/sugar/date/isTuesday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isTuesday;
  }
});

// node_modules/sugar/date/internal/isUTC.js
var require_isUTC = __commonJS({
  "node_modules/sugar/date/internal/isUTC.js"(exports, module) {
    "use strict";
    var _utc = require_utc();
    var tzOffset = require_tzOffset();
    function isUTC(d) {
      return !!_utc(d) || tzOffset(d) === 0;
    }
    module.exports = isUTC;
  }
});

// node_modules/sugar/date/isUTC.js
var require_isUTC2 = __commonJS({
  "node_modules/sugar/date/isUTC.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var isUTC = require_isUTC();
    Sugar.Date.defineInstance({
      "isUTC": function(date) {
        return isUTC(date);
      }
    });
    module.exports = Sugar.Date.isUTC;
  }
});

// node_modules/sugar/date/isValid.js
var require_isValid = __commonJS({
  "node_modules/sugar/date/isValid.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var dateIsValid = require_dateIsValid();
    Sugar.Date.defineInstance({
      "isValid": function(date) {
        return dateIsValid(date);
      }
    });
    module.exports = Sugar.Date.isValid;
  }
});

// node_modules/sugar/date/isWednesday.js
var require_isWednesday = __commonJS({
  "node_modules/sugar/date/isWednesday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isWednesday;
  }
});

// node_modules/sugar/date/isWeekday.js
var require_isWeekday = __commonJS({
  "node_modules/sugar/date/isWeekday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isWeekday;
  }
});

// node_modules/sugar/date/isWeekend.js
var require_isWeekend = __commonJS({
  "node_modules/sugar/date/isWeekend.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isWeekend;
  }
});

// node_modules/sugar/date/isYesterday.js
var require_isYesterday = __commonJS({
  "node_modules/sugar/date/isYesterday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildRelativeAliasesCall();
    module.exports = Sugar.Date.isYesterday;
  }
});

// node_modules/sugar/date/iso.js
var require_iso = __commonJS({
  "node_modules/sugar/date/iso.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.Date.defineInstance({
      "iso": function(date) {
        return date.toISOString();
      }
    });
    module.exports = Sugar.Date.iso;
  }
});

// node_modules/sugar/date/millisecondsAgo.js
var require_millisecondsAgo2 = __commonJS({
  "node_modules/sugar/date/millisecondsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.millisecondsAgo;
  }
});

// node_modules/sugar/date/millisecondsFromNow.js
var require_millisecondsFromNow2 = __commonJS({
  "node_modules/sugar/date/millisecondsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.millisecondsFromNow;
  }
});

// node_modules/sugar/date/millisecondsSince.js
var require_millisecondsSince = __commonJS({
  "node_modules/sugar/date/millisecondsSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.millisecondsSince;
  }
});

// node_modules/sugar/date/millisecondsUntil.js
var require_millisecondsUntil = __commonJS({
  "node_modules/sugar/date/millisecondsUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.millisecondsUntil;
  }
});

// node_modules/sugar/date/minutesAgo.js
var require_minutesAgo2 = __commonJS({
  "node_modules/sugar/date/minutesAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.minutesAgo;
  }
});

// node_modules/sugar/date/minutesFromNow.js
var require_minutesFromNow2 = __commonJS({
  "node_modules/sugar/date/minutesFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.minutesFromNow;
  }
});

// node_modules/sugar/date/minutesSince.js
var require_minutesSince = __commonJS({
  "node_modules/sugar/date/minutesSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.minutesSince;
  }
});

// node_modules/sugar/date/minutesUntil.js
var require_minutesUntil = __commonJS({
  "node_modules/sugar/date/minutesUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.minutesUntil;
  }
});

// node_modules/sugar/date/monthsAgo.js
var require_monthsAgo2 = __commonJS({
  "node_modules/sugar/date/monthsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.monthsAgo;
  }
});

// node_modules/sugar/date/monthsFromNow.js
var require_monthsFromNow2 = __commonJS({
  "node_modules/sugar/date/monthsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.monthsFromNow;
  }
});

// node_modules/sugar/date/monthsSince.js
var require_monthsSince = __commonJS({
  "node_modules/sugar/date/monthsSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.monthsSince;
  }
});

// node_modules/sugar/date/monthsUntil.js
var require_monthsUntil = __commonJS({
  "node_modules/sugar/date/monthsUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.monthsUntil;
  }
});

// node_modules/sugar/date/internal/getAdjustedUnitForDate.js
var require_getAdjustedUnitForDate = __commonJS({
  "node_modules/sugar/date/internal/getAdjustedUnitForDate.js"(exports, module) {
    "use strict";
    var getNewDate = require_getNewDate();
    var mathAliases = require_mathAliases();
    var getAdjustedUnit = require_getAdjustedUnit();
    var getTimeDistanceForUnit = require_getTimeDistanceForUnit();
    var abs = mathAliases.abs;
    function getAdjustedUnitForDate(d, dRelative) {
      var ms;
      if (!dRelative) {
        dRelative = getNewDate();
        if (d > dRelative) {
          dRelative = new Date(dRelative.getTime() - 10);
        }
      }
      ms = d - dRelative;
      return getAdjustedUnit(ms, function(u) {
        return abs(getTimeDistanceForUnit(d, dRelative, u));
      });
    }
    module.exports = getAdjustedUnitForDate;
  }
});

// node_modules/sugar/date/internal/dateRelative.js
var require_dateRelative = __commonJS({
  "node_modules/sugar/date/internal/dateRelative.js"(exports, module) {
    "use strict";
    var LocaleHelpers = require_LocaleHelpers();
    var dateFormat = require_dateFormat();
    var classChecks = require_classChecks();
    var assertDateIsValid = require_assertDateIsValid();
    var getAdjustedUnitForDate = require_getAdjustedUnitForDate();
    var isFunction = classChecks.isFunction;
    var localeManager = LocaleHelpers.localeManager;
    function dateRelative(d, dRelative, arg1, arg2) {
      var adu, format, type, localeCode, fn;
      assertDateIsValid(d);
      if (isFunction(arg1)) {
        fn = arg1;
      } else {
        localeCode = arg1;
        fn = arg2;
      }
      adu = getAdjustedUnitForDate(d, dRelative);
      if (fn) {
        format = fn.apply(d, adu.concat(localeManager.get(localeCode)));
        if (format) {
          return dateFormat(d, format, localeCode);
        }
      }
      if (adu[1] === 0) {
        adu[1] = 1;
        adu[0] = 1;
      }
      if (dRelative) {
        type = "duration";
      } else if (adu[2] > 0) {
        type = "future";
      } else {
        type = "past";
      }
      return localeManager.get(localeCode).getRelativeFormat(adu, type);
    }
    module.exports = dateRelative;
  }
});

// node_modules/sugar/date/relative.js
var require_relative = __commonJS({
  "node_modules/sugar/date/relative.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var dateRelative = require_dateRelative();
    Sugar.Date.defineInstance({
      "relative": function(date, localeCode, relativeFn) {
        return dateRelative(date, null, localeCode, relativeFn);
      }
    });
    module.exports = Sugar.Date.relative;
  }
});

// node_modules/sugar/date/relativeTo.js
var require_relativeTo = __commonJS({
  "node_modules/sugar/date/relativeTo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createDate = require_createDate();
    var dateRelative = require_dateRelative();
    Sugar.Date.defineInstance({
      "relativeTo": function(date, d, localeCode) {
        return dateRelative(date, createDate(d), localeCode);
      }
    });
    module.exports = Sugar.Date.relativeTo;
  }
});

// node_modules/sugar/date/internal/getUnitIndexForParamName.js
var require_getUnitIndexForParamName = __commonJS({
  "node_modules/sugar/date/internal/getUnitIndexForParamName.js"(exports, module) {
    "use strict";
    var iterateOverDateParams = require_iterateOverDateParams();
    function getUnitIndexForParamName(name) {
      var params = {}, unitIndex;
      params[name] = 1;
      iterateOverDateParams(params, function(name2, val, unit, i) {
        unitIndex = i;
        return false;
      });
      return unitIndex;
    }
    module.exports = getUnitIndexForParamName;
  }
});

// node_modules/sugar/date/reset.js
var require_reset = __commonJS({
  "node_modules/sugar/date/reset.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var DateUnitIndexes = require_DateUnitIndexes();
    var moveToBeginningOfUnit = require_moveToBeginningOfUnit();
    var getUnitIndexForParamName = require_getUnitIndexForParamName();
    var DAY_INDEX = DateUnitIndexes.DAY_INDEX;
    Sugar.Date.defineInstance({
      "reset": function(date, unit, localeCode) {
        var unitIndex = unit ? getUnitIndexForParamName(unit) : DAY_INDEX;
        moveToBeginningOfUnit(date, unitIndex, localeCode);
        return date;
      }
    });
    module.exports = Sugar.Date.reset;
  }
});

// node_modules/sugar/date/rewind.js
var require_rewind = __commonJS({
  "node_modules/sugar/date/rewind.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var advanceDateWithArgs = require_advanceDateWithArgs();
    Sugar.Date.defineInstanceWithArguments({
      "rewind": function(d, args) {
        return advanceDateWithArgs(d, args, -1);
      }
    });
    module.exports = Sugar.Date.rewind;
  }
});

// node_modules/sugar/date/secondsAgo.js
var require_secondsAgo2 = __commonJS({
  "node_modules/sugar/date/secondsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.secondsAgo;
  }
});

// node_modules/sugar/date/secondsFromNow.js
var require_secondsFromNow2 = __commonJS({
  "node_modules/sugar/date/secondsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.secondsFromNow;
  }
});

// node_modules/sugar/date/secondsSince.js
var require_secondsSince = __commonJS({
  "node_modules/sugar/date/secondsSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.secondsSince;
  }
});

// node_modules/sugar/date/secondsUntil.js
var require_secondsUntil = __commonJS({
  "node_modules/sugar/date/secondsUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.secondsUntil;
  }
});

// node_modules/sugar/date/set.js
var require_set2 = __commonJS({
  "node_modules/sugar/date/set.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var updateDate = require_updateDate();
    var collectUpdateDateArguments = require_collectUpdateDateArguments();
    Sugar.Date.defineInstanceWithArguments({
      "set": function(d, args) {
        args = collectUpdateDateArguments(args);
        return updateDate(d, args[0], args[1]);
      }
    });
    module.exports = Sugar.Date.set;
  }
});

// node_modules/sugar/date/setISOWeek.js
var require_setISOWeek = __commonJS({
  "node_modules/sugar/date/setISOWeek.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var setISOWeekNumber = require_setISOWeekNumber();
    Sugar.Date.defineInstance({
      "setISOWeek": function(date, num) {
        return setISOWeekNumber(date, num);
      }
    });
    module.exports = Sugar.Date.setISOWeek;
  }
});

// node_modules/sugar/date/setUTC.js
var require_setUTC = __commonJS({
  "node_modules/sugar/date/setUTC.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var _utc = require_utc();
    Sugar.Date.defineInstance({
      "setUTC": function(date, on) {
        return _utc(date, on);
      }
    });
    module.exports = Sugar.Date.setUTC;
  }
});

// node_modules/sugar/date/setWeekday.js
var require_setWeekday2 = __commonJS({
  "node_modules/sugar/date/setWeekday.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var setWeekday = require_setWeekday();
    Sugar.Date.defineInstance({
      "setWeekday": function(date, dow) {
        return setWeekday(date, dow);
      }
    });
    module.exports = Sugar.Date.setWeekday;
  }
});

// node_modules/sugar/date/weeksAgo.js
var require_weeksAgo2 = __commonJS({
  "node_modules/sugar/date/weeksAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.weeksAgo;
  }
});

// node_modules/sugar/date/weeksFromNow.js
var require_weeksFromNow2 = __commonJS({
  "node_modules/sugar/date/weeksFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.weeksFromNow;
  }
});

// node_modules/sugar/date/weeksSince.js
var require_weeksSince = __commonJS({
  "node_modules/sugar/date/weeksSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.weeksSince;
  }
});

// node_modules/sugar/date/weeksUntil.js
var require_weeksUntil = __commonJS({
  "node_modules/sugar/date/weeksUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.weeksUntil;
  }
});

// node_modules/sugar/date/yearsAgo.js
var require_yearsAgo2 = __commonJS({
  "node_modules/sugar/date/yearsAgo.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.yearsAgo;
  }
});

// node_modules/sugar/date/yearsFromNow.js
var require_yearsFromNow2 = __commonJS({
  "node_modules/sugar/date/yearsFromNow.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.yearsFromNow;
  }
});

// node_modules/sugar/date/yearsSince.js
var require_yearsSince = __commonJS({
  "node_modules/sugar/date/yearsSince.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.yearsSince;
  }
});

// node_modules/sugar/date/yearsUntil.js
var require_yearsUntil = __commonJS({
  "node_modules/sugar/date/yearsUntil.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    require_buildDateUnitMethodsCall();
    module.exports = Sugar.Date.yearsUntil;
  }
});

// node_modules/sugar/date/getOption.js
var require_getOption3 = __commonJS({
  "node_modules/sugar/date/getOption.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var _dateOptions = require_dateOptions();
    module.exports = Sugar.Date.getOption;
  }
});

// node_modules/sugar/date/setOption.js
var require_setOption3 = __commonJS({
  "node_modules/sugar/date/setOption.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var _dateOptions = require_dateOptions();
    module.exports = Sugar.Date.setOption;
  }
});

// node_modules/sugar/date/index.js
var require_date = __commonJS({
  "node_modules/sugar/date/index.js"(exports, module) {
    "use strict";
    require_addLocale();
    require_create2();
    require_getAllLocaleCodes();
    require_getAllLocales();
    require_getLocale();
    require_removeLocale();
    require_setLocale();
    require_day();
    require_dayAfter();
    require_dayAgo();
    require_dayBefore();
    require_dayFromNow();
    require_days();
    require_daysAfter();
    require_daysAgo();
    require_daysBefore();
    require_daysFromNow();
    require_duration();
    require_hour();
    require_hourAfter();
    require_hourAgo();
    require_hourBefore();
    require_hourFromNow();
    require_hours();
    require_hoursAfter();
    require_hoursAgo();
    require_hoursBefore();
    require_hoursFromNow();
    require_millisecond();
    require_millisecondAfter();
    require_millisecondAgo();
    require_millisecondBefore();
    require_millisecondFromNow();
    require_milliseconds();
    require_millisecondsAfter();
    require_millisecondsAgo();
    require_millisecondsBefore();
    require_millisecondsFromNow();
    require_minute();
    require_minuteAfter();
    require_minuteAgo();
    require_minuteBefore();
    require_minuteFromNow();
    require_minutes();
    require_minutesAfter();
    require_minutesAgo();
    require_minutesBefore();
    require_minutesFromNow();
    require_month();
    require_monthAfter();
    require_monthAgo();
    require_monthBefore();
    require_monthFromNow();
    require_months();
    require_monthsAfter();
    require_monthsAgo();
    require_monthsBefore();
    require_monthsFromNow();
    require_second();
    require_secondAfter();
    require_secondAgo();
    require_secondBefore();
    require_secondFromNow();
    require_seconds();
    require_secondsAfter();
    require_secondsAgo();
    require_secondsBefore();
    require_secondsFromNow();
    require_week();
    require_weekAfter();
    require_weekAgo();
    require_weekBefore();
    require_weekFromNow();
    require_weeks();
    require_weeksAfter();
    require_weeksAgo();
    require_weeksBefore();
    require_weeksFromNow();
    require_year();
    require_yearAfter();
    require_yearAgo();
    require_yearBefore();
    require_yearFromNow();
    require_years();
    require_yearsAfter();
    require_yearsAgo();
    require_yearsBefore();
    require_yearsFromNow();
    require_addDays();
    require_addHours();
    require_addMilliseconds();
    require_addMinutes();
    require_addMonths();
    require_addSeconds();
    require_addWeeks();
    require_addYears();
    require_advance();
    require_beginningOfDay();
    require_beginningOfISOWeek();
    require_beginningOfMonth();
    require_beginningOfWeek();
    require_beginningOfYear();
    require_clone4();
    require_daysAgo2();
    require_daysFromNow2();
    require_daysInMonth();
    require_daysSince();
    require_daysUntil();
    require_endOfDay();
    require_endOfISOWeek();
    require_endOfMonth();
    require_endOfWeek();
    require_endOfYear();
    require_format3();
    require_get2();
    require_getISOWeek();
    require_getUTCOffset2();
    require_getUTCWeekday();
    require_getWeekday2();
    require_hoursAgo2();
    require_hoursFromNow2();
    require_hoursSince();
    require_hoursUntil();
    require_is();
    require_isAfter();
    require_isBefore();
    require_isBetween();
    require_isFriday();
    require_isFuture();
    require_isLastMonth();
    require_isLastWeek();
    require_isLastYear();
    require_isLeapYear();
    require_isMonday();
    require_isNextMonth();
    require_isNextWeek();
    require_isNextYear();
    require_isPast();
    require_isSaturday();
    require_isSunday();
    require_isThisMonth();
    require_isThisWeek();
    require_isThisYear();
    require_isThursday();
    require_isToday();
    require_isTomorrow();
    require_isTuesday();
    require_isUTC2();
    require_isValid();
    require_isWednesday();
    require_isWeekday();
    require_isWeekend();
    require_isYesterday();
    require_iso();
    require_millisecondsAgo2();
    require_millisecondsFromNow2();
    require_millisecondsSince();
    require_millisecondsUntil();
    require_minutesAgo2();
    require_minutesFromNow2();
    require_minutesSince();
    require_minutesUntil();
    require_monthsAgo2();
    require_monthsFromNow2();
    require_monthsSince();
    require_monthsUntil();
    require_relative();
    require_relativeTo();
    require_reset();
    require_rewind();
    require_secondsAgo2();
    require_secondsFromNow2();
    require_secondsSince();
    require_secondsUntil();
    require_set2();
    require_setISOWeek();
    require_setUTC();
    require_setWeekday2();
    require_weeksAgo2();
    require_weeksFromNow2();
    require_weeksSince();
    require_weeksUntil();
    require_yearsAgo2();
    require_yearsFromNow2();
    require_yearsSince();
    require_yearsUntil();
    require_getOption3();
    require_setOption3();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/range/internal/getRangeMemberPrimitiveValue.js
var require_getRangeMemberPrimitiveValue = __commonJS({
  "node_modules/sugar/range/internal/getRangeMemberPrimitiveValue.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isDate = classChecks.isDate;
    function getRangeMemberPrimitiveValue(m) {
      if (m == null)
        return m;
      return isDate(m) ? m.getTime() : m.valueOf();
    }
    module.exports = getRangeMemberPrimitiveValue;
  }
});

// node_modules/sugar/range/internal/cloneRangeMember.js
var require_cloneRangeMember = __commonJS({
  "node_modules/sugar/range/internal/cloneRangeMember.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var getRangeMemberPrimitiveValue = require_getRangeMemberPrimitiveValue();
    var isDate = classChecks.isDate;
    function cloneRangeMember(m) {
      if (isDate(m)) {
        return new Date(m.getTime());
      } else {
        return getRangeMemberPrimitiveValue(m);
      }
    }
    module.exports = cloneRangeMember;
  }
});

// node_modules/sugar/range/internal/Range.js
var require_Range = __commonJS({
  "node_modules/sugar/range/internal/Range.js"(exports, module) {
    "use strict";
    var cloneRangeMember = require_cloneRangeMember();
    function Range(start, end) {
      this.start = cloneRangeMember(start);
      this.end = cloneRangeMember(end);
    }
    module.exports = Range;
  }
});

// node_modules/sugar/range/internal/getDateForRange.js
var require_getDateForRange = __commonJS({
  "node_modules/sugar/range/internal/getDateForRange.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var namespaceAliases = require_namespaceAliases();
    var isDate = classChecks.isDate;
    var sugarDate = namespaceAliases.sugarDate;
    function getDateForRange(d) {
      if (isDate(d)) {
        return d;
      } else if (d == null) {
        return /* @__PURE__ */ new Date();
      } else if (sugarDate.create) {
        return sugarDate.create(d);
      }
      return new Date(d);
    }
    module.exports = getDateForRange;
  }
});

// node_modules/sugar/range/var/DURATION_UNITS.js
var require_DURATION_UNITS = __commonJS({
  "node_modules/sugar/range/var/DURATION_UNITS.js"(exports, module) {
    "use strict";
    module.exports = "year|month|week|day|hour|minute|second|millisecond";
  }
});

// node_modules/sugar/range/var/FULL_CAPTURED_DURATION.js
var require_FULL_CAPTURED_DURATION = __commonJS({
  "node_modules/sugar/range/var/FULL_CAPTURED_DURATION.js"(exports, module) {
    "use strict";
    var DURATION_UNITS = require_DURATION_UNITS();
    module.exports = "((?:\\d+)?\\s*(?:" + DURATION_UNITS + "))s?";
  }
});

// node_modules/sugar/range/var/DurationTextFormats.js
var require_DurationTextFormats = __commonJS({
  "node_modules/sugar/range/var/DurationTextFormats.js"(exports, module) {
    "use strict";
    var FULL_CAPTURED_DURATION = require_FULL_CAPTURED_DURATION();
    module.exports = {
      RANGE_REG_FROM_TO: /(?:from)?\s*(.+)\s+(?:to|until)\s+(.+)$/i,
      RANGE_REG_REAR_DURATION: RegExp("(.+)\\s*for\\s*" + FULL_CAPTURED_DURATION, "i"),
      RANGE_REG_FRONT_DURATION: RegExp("(?:for)?\\s*" + FULL_CAPTURED_DURATION + "\\s*(?:starting)?\\s(?:at\\s)?(.+)", "i")
    };
  }
});

// node_modules/sugar/range/var/MULTIPLIERS.js
var require_MULTIPLIERS = __commonJS({
  "node_modules/sugar/range/var/MULTIPLIERS.js"(exports, module) {
    "use strict";
    var MULTIPLIERS = {
      "Hours": 60 * 60 * 1e3,
      "Minutes": 60 * 1e3,
      "Seconds": 1e3,
      "Milliseconds": 1
    };
    module.exports = MULTIPLIERS;
  }
});

// node_modules/sugar/range/internal/incrementDate.js
var require_incrementDate = __commonJS({
  "node_modules/sugar/range/internal/incrementDate.js"(exports, module) {
    "use strict";
    var MULTIPLIERS = require_MULTIPLIERS();
    var callDateSet = require_callDateSet();
    var callDateGet = require_callDateGet();
    function incrementDate(src, amount, unit) {
      var mult = MULTIPLIERS[unit], d;
      if (mult) {
        d = new Date(src.getTime() + amount * mult);
      } else {
        d = new Date(src);
        callDateSet(d, unit, callDateGet(src, unit) + amount);
      }
      return d;
    }
    module.exports = incrementDate;
  }
});

// node_modules/sugar/range/var/DURATION_REG.js
var require_DURATION_REG = __commonJS({
  "node_modules/sugar/range/var/DURATION_REG.js"(exports, module) {
    "use strict";
    var DURATION_UNITS = require_DURATION_UNITS();
    module.exports = RegExp("(\\d+)?\\s*(" + DURATION_UNITS + ")s?", "i");
  }
});

// node_modules/sugar/range/internal/getDateIncrementObject.js
var require_getDateIncrementObject = __commonJS({
  "node_modules/sugar/range/internal/getDateIncrementObject.js"(exports, module) {
    "use strict";
    var DURATION_REG = require_DURATION_REG();
    var classChecks = require_classChecks();
    var simpleCapitalize = require_simpleCapitalize();
    var isNumber = classChecks.isNumber;
    function getDateIncrementObject(amt) {
      var match, val, unit;
      if (isNumber(amt)) {
        return [amt, "Milliseconds"];
      }
      match = amt.match(DURATION_REG);
      val = +match[1] || 1;
      unit = simpleCapitalize(match[2].toLowerCase());
      if (unit.match(/hour|minute|second/i)) {
        unit += "s";
      } else if (unit === "Year") {
        unit = "FullYear";
      } else if (unit === "Week") {
        unit = "Date";
        val *= 7;
      } else if (unit === "Day") {
        unit = "Date";
      }
      return [val, unit];
    }
    module.exports = getDateIncrementObject;
  }
});

// node_modules/sugar/range/internal/createDateRangeFromString.js
var require_createDateRangeFromString = __commonJS({
  "node_modules/sugar/range/internal/createDateRangeFromString.js"(exports, module) {
    "use strict";
    var Range = require_Range();
    var DurationTextFormats = require_DurationTextFormats();
    var incrementDate = require_incrementDate();
    var getDateForRange = require_getDateForRange();
    var namespaceAliases = require_namespaceAliases();
    var getDateIncrementObject = require_getDateIncrementObject();
    var sugarDate = namespaceAliases.sugarDate;
    var RANGE_REG_FROM_TO = DurationTextFormats.RANGE_REG_FROM_TO;
    var RANGE_REG_REAR_DURATION = DurationTextFormats.RANGE_REG_REAR_DURATION;
    var RANGE_REG_FRONT_DURATION = DurationTextFormats.RANGE_REG_FRONT_DURATION;
    function createDateRangeFromString(str) {
      var match, datetime, duration, dio, start, end;
      if (sugarDate.get && (match = str.match(RANGE_REG_FROM_TO))) {
        start = getDateForRange(match[1].replace("from", "at"));
        end = sugarDate.get(start, match[2]);
        return new Range(start, end);
      }
      if (match = str.match(RANGE_REG_FRONT_DURATION)) {
        duration = match[1];
        datetime = match[2];
      }
      if (match = str.match(RANGE_REG_REAR_DURATION)) {
        datetime = match[1];
        duration = match[2];
      }
      if (datetime && duration) {
        start = getDateForRange(datetime);
        dio = getDateIncrementObject(duration);
        end = incrementDate(start, dio[0], dio[1]);
      } else {
        start = str;
      }
      return new Range(getDateForRange(start), getDateForRange(end));
    }
    module.exports = createDateRangeFromString;
  }
});

// node_modules/sugar/range/var/DateRangeConstructor.js
var require_DateRangeConstructor = __commonJS({
  "node_modules/sugar/range/var/DateRangeConstructor.js"(exports, module) {
    "use strict";
    var Range = require_Range();
    var classChecks = require_classChecks();
    var getDateForRange = require_getDateForRange();
    var createDateRangeFromString = require_createDateRangeFromString();
    var isString = classChecks.isString;
    var DateRangeConstructor = function(start, end) {
      if (arguments.length === 1 && isString(start)) {
        return createDateRangeFromString(start);
      }
      return new Range(getDateForRange(start), getDateForRange(end));
    };
    module.exports = DateRangeConstructor;
  }
});

// node_modules/sugar/date/range.js
var require_range = __commonJS({
  "node_modules/sugar/date/range.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var DateRangeConstructor = require_DateRangeConstructor();
    Sugar.Date.defineStatic({
      "range": DateRangeConstructor
    });
    module.exports = Sugar.Date.range;
  }
});

// node_modules/sugar/range/var/PrimitiveRangeConstructor.js
var require_PrimitiveRangeConstructor = __commonJS({
  "node_modules/sugar/range/var/PrimitiveRangeConstructor.js"(exports, module) {
    "use strict";
    var Range = require_Range();
    var PrimitiveRangeConstructor = function(start, end) {
      return new Range(start, end);
    };
    module.exports = PrimitiveRangeConstructor;
  }
});

// node_modules/sugar/number/range.js
var require_range2 = __commonJS({
  "node_modules/sugar/number/range.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var PrimitiveRangeConstructor = require_PrimitiveRangeConstructor();
    Sugar.Number.defineStatic({
      "range": PrimitiveRangeConstructor
    });
    module.exports = Sugar.Number.range;
  }
});

// node_modules/sugar/string/range.js
var require_range3 = __commonJS({
  "node_modules/sugar/string/range.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var PrimitiveRangeConstructor = require_PrimitiveRangeConstructor();
    Sugar.String.defineStatic({
      "range": PrimitiveRangeConstructor
    });
    module.exports = Sugar.String.range;
  }
});

// node_modules/sugar/range/internal/rangeClamp.js
var require_rangeClamp = __commonJS({
  "node_modules/sugar/range/internal/rangeClamp.js"(exports, module) {
    "use strict";
    var cloneRangeMember = require_cloneRangeMember();
    function rangeClamp(range, obj) {
      var clamped, start = range.start, end = range.end, min = end < start ? end : start, max = start > end ? start : end;
      if (obj < min) {
        clamped = min;
      } else if (obj > max) {
        clamped = max;
      } else {
        clamped = obj;
      }
      return cloneRangeMember(clamped);
    }
    module.exports = rangeClamp;
  }
});

// node_modules/sugar/number/cap.js
var require_cap = __commonJS({
  "node_modules/sugar/number/cap.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var Range = require_Range();
    var rangeClamp = require_rangeClamp();
    Sugar.Number.defineInstance({
      "cap": function(n, max) {
        return rangeClamp(new Range(void 0, max), n);
      }
    });
    module.exports = Sugar.Number.cap;
  }
});

// node_modules/sugar/number/clamp.js
var require_clamp = __commonJS({
  "node_modules/sugar/number/clamp.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var Range = require_Range();
    var rangeClamp = require_rangeClamp();
    Sugar.Number.defineInstance({
      "clamp": function(n, start, end) {
        return rangeClamp(new Range(start, end), n);
      }
    });
    module.exports = Sugar.Number.clamp;
  }
});

// node_modules/sugar/range/internal/valueIsNotInfinite.js
var require_valueIsNotInfinite = __commonJS({
  "node_modules/sugar/range/internal/valueIsNotInfinite.js"(exports, module) {
    "use strict";
    function valueIsNotInfinite(m) {
      return m !== -Infinity && m !== Infinity;
    }
    module.exports = valueIsNotInfinite;
  }
});

// node_modules/sugar/range/internal/isValidRangeMember.js
var require_isValidRangeMember = __commonJS({
  "node_modules/sugar/range/internal/isValidRangeMember.js"(exports, module) {
    "use strict";
    var valueIsNotInfinite = require_valueIsNotInfinite();
    var getRangeMemberPrimitiveValue = require_getRangeMemberPrimitiveValue();
    function isValidRangeMember(m) {
      var val = getRangeMemberPrimitiveValue(m);
      return (!!val || val === 0) && valueIsNotInfinite(m);
    }
    module.exports = isValidRangeMember;
  }
});

// node_modules/sugar/range/internal/rangeIsValid.js
var require_rangeIsValid = __commonJS({
  "node_modules/sugar/range/internal/rangeIsValid.js"(exports, module) {
    "use strict";
    var isValidRangeMember = require_isValidRangeMember();
    function rangeIsValid(range) {
      return isValidRangeMember(range.start) && isValidRangeMember(range.end) && typeof range.start === typeof range.end;
    }
    module.exports = rangeIsValid;
  }
});

// node_modules/sugar/range/internal/incrementNumber.js
var require_incrementNumber = __commonJS({
  "node_modules/sugar/range/internal/incrementNumber.js"(exports, module) {
    "use strict";
    var withPrecision = require_withPrecision();
    function incrementNumber(current, amount, precision) {
      return withPrecision(current + amount, precision);
    }
    module.exports = incrementNumber;
  }
});

// node_modules/sugar/range/internal/incrementString.js
var require_incrementString = __commonJS({
  "node_modules/sugar/range/internal/incrementString.js"(exports, module) {
    "use strict";
    var chr = require_chr();
    function incrementString(current, amount) {
      return chr(current.charCodeAt(0) + amount);
    }
    module.exports = incrementString;
  }
});

// node_modules/sugar/range/internal/getPrecision.js
var require_getPrecision = __commonJS({
  "node_modules/sugar/range/internal/getPrecision.js"(exports, module) {
    "use strict";
    var periodSplit = require_periodSplit();
    function getPrecision(n) {
      var split = periodSplit(n.toString());
      return split[1] ? split[1].length : 0;
    }
    module.exports = getPrecision;
  }
});

// node_modules/sugar/range/internal/getGreaterPrecision.js
var require_getGreaterPrecision = __commonJS({
  "node_modules/sugar/range/internal/getGreaterPrecision.js"(exports, module) {
    "use strict";
    var mathAliases = require_mathAliases();
    var getPrecision = require_getPrecision();
    var max = mathAliases.max;
    function getGreaterPrecision(n1, n2) {
      return max(getPrecision(n1), getPrecision(n2));
    }
    module.exports = getGreaterPrecision;
  }
});

// node_modules/sugar/range/internal/rangeEvery.js
var require_rangeEvery = __commonJS({
  "node_modules/sugar/range/internal/rangeEvery.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var rangeIsValid = require_rangeIsValid();
    var incrementDate = require_incrementDate();
    var incrementNumber = require_incrementNumber();
    var incrementString = require_incrementString();
    var getGreaterPrecision = require_getGreaterPrecision();
    var getDateIncrementObject = require_getDateIncrementObject();
    var isNumber = classChecks.isNumber;
    var isString = classChecks.isString;
    var isDate = classChecks.isDate;
    var isFunction = classChecks.isFunction;
    function rangeEvery(range, step, countOnly, fn) {
      var increment, precision, dio, unit, start = range.start, end = range.end, inverse = end < start, current = start, index = 0, result = [];
      if (!rangeIsValid(range)) {
        return countOnly ? NaN : [];
      }
      if (isFunction(step)) {
        fn = step;
        step = null;
      }
      step = step || 1;
      if (isNumber(start)) {
        precision = getGreaterPrecision(start, step);
        increment = function() {
          return incrementNumber(current, step, precision);
        };
      } else if (isString(start)) {
        increment = function() {
          return incrementString(current, step);
        };
      } else if (isDate(start)) {
        dio = getDateIncrementObject(step);
        step = dio[0];
        unit = dio[1];
        increment = function() {
          return incrementDate(current, step, unit);
        };
      }
      if (inverse && step > 0) {
        step *= -1;
      }
      while (inverse ? current >= end : current <= end) {
        if (!countOnly) {
          result.push(current);
        }
        if (fn) {
          fn(current, index, range);
        }
        current = increment();
        index++;
      }
      return countOnly ? index - 1 : result;
    }
    module.exports = rangeEvery;
  }
});

// node_modules/sugar/number/upto.js
var require_upto = __commonJS({
  "node_modules/sugar/number/upto.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var Range = require_Range();
    var rangeEvery = require_rangeEvery();
    Sugar.Number.defineInstance({
      "upto": function(n, num, step, everyFn) {
        return rangeEvery(new Range(n, num), step, false, everyFn);
      }
    });
    module.exports = Sugar.Number.upto;
  }
});

// node_modules/sugar/common/internal/defineOnPrototype.js
var require_defineOnPrototype = __commonJS({
  "node_modules/sugar/common/internal/defineOnPrototype.js"(exports, module) {
    "use strict";
    var coreUtilityAliases = require_coreUtilityAliases();
    var forEachProperty = coreUtilityAliases.forEachProperty;
    function defineOnPrototype(ctor, methods) {
      var proto = ctor.prototype;
      forEachProperty(methods, function(val, key) {
        proto[key] = val;
      });
    }
    module.exports = defineOnPrototype;
  }
});

// node_modules/sugar/range/clamp.js
var require_clamp2 = __commonJS({
  "node_modules/sugar/range/clamp.js"() {
    "use strict";
    var Range = require_Range();
    var rangeClamp = require_rangeClamp();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "clamp": function(el) {
        return rangeClamp(this, el);
      }
    });
  }
});

// node_modules/sugar/range/clone.js
var require_clone5 = __commonJS({
  "node_modules/sugar/range/clone.js"() {
    "use strict";
    var Range = require_Range();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "clone": function() {
        return new Range(this.start, this.end);
      }
    });
  }
});

// node_modules/sugar/range/contains.js
var require_contains = __commonJS({
  "node_modules/sugar/range/contains.js"() {
    "use strict";
    var Range = require_Range();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "contains": function(el) {
        if (el == null)
          return false;
        if (el.start && el.end) {
          return el.start >= this.start && el.start <= this.end && el.end >= this.start && el.end <= this.end;
        } else {
          return el >= this.start && el <= this.end;
        }
      }
    });
  }
});

// node_modules/sugar/range/internal/buildDateRangeUnits.js
var require_buildDateRangeUnits = __commonJS({
  "node_modules/sugar/range/internal/buildDateRangeUnits.js"(exports, module) {
    "use strict";
    var MULTIPLIERS = require_MULTIPLIERS();
    var DURATION_UNITS = require_DURATION_UNITS();
    var Range = require_Range();
    var trunc = require_trunc();
    var forEach = require_forEach();
    var rangeEvery = require_rangeEvery();
    var simpleCapitalize = require_simpleCapitalize();
    var defineOnPrototype = require_defineOnPrototype();
    function buildDateRangeUnits() {
      var methods = {};
      forEach(DURATION_UNITS.split("|"), function(unit, i) {
        var name = unit + "s", mult, fn;
        if (i < 4) {
          fn = function() {
            return rangeEvery(this, unit, true);
          };
        } else {
          mult = MULTIPLIERS[simpleCapitalize(name)];
          fn = function() {
            return trunc((this.end - this.start) / mult);
          };
        }
        methods[name] = fn;
      });
      defineOnPrototype(Range, methods);
    }
    module.exports = buildDateRangeUnits;
  }
});

// node_modules/sugar/range/build/buildDateRangeUnitsCall.js
var require_buildDateRangeUnitsCall = __commonJS({
  "node_modules/sugar/range/build/buildDateRangeUnitsCall.js"() {
    "use strict";
    var buildDateRangeUnits = require_buildDateRangeUnits();
    buildDateRangeUnits();
  }
});

// node_modules/sugar/range/days.js
var require_days2 = __commonJS({
  "node_modules/sugar/range/days.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/range/every.js
var require_every3 = __commonJS({
  "node_modules/sugar/range/every.js"() {
    "use strict";
    var Range = require_Range();
    var rangeEvery = require_rangeEvery();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "every": function(amount, everyFn) {
        return rangeEvery(this, amount, false, everyFn);
      }
    });
  }
});

// node_modules/sugar/range/hours.js
var require_hours2 = __commonJS({
  "node_modules/sugar/range/hours.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/range/intersect.js
var require_intersect3 = __commonJS({
  "node_modules/sugar/range/intersect.js"() {
    "use strict";
    var Range = require_Range();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "intersect": function(range) {
        if (range.start > this.end || range.end < this.start) {
          return new Range(NaN, NaN);
        }
        return new Range(
          this.start > range.start ? this.start : range.start,
          this.end < range.end ? this.end : range.end
        );
      }
    });
  }
});

// node_modules/sugar/range/isValid.js
var require_isValid2 = __commonJS({
  "node_modules/sugar/range/isValid.js"() {
    "use strict";
    var Range = require_Range();
    var rangeIsValid = require_rangeIsValid();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "isValid": function() {
        return rangeIsValid(this);
      }
    });
  }
});

// node_modules/sugar/range/milliseconds.js
var require_milliseconds2 = __commonJS({
  "node_modules/sugar/range/milliseconds.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/range/minutes.js
var require_minutes2 = __commonJS({
  "node_modules/sugar/range/minutes.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/range/months.js
var require_months2 = __commonJS({
  "node_modules/sugar/range/months.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/range/seconds.js
var require_seconds2 = __commonJS({
  "node_modules/sugar/range/seconds.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/range/internal/getRangeMemberNumericValue.js
var require_getRangeMemberNumericValue = __commonJS({
  "node_modules/sugar/range/internal/getRangeMemberNumericValue.js"(exports, module) {
    "use strict";
    var classChecks = require_classChecks();
    var isString = classChecks.isString;
    function getRangeMemberNumericValue(m) {
      return isString(m) ? m.charCodeAt(0) : m;
    }
    module.exports = getRangeMemberNumericValue;
  }
});

// node_modules/sugar/range/span.js
var require_span = __commonJS({
  "node_modules/sugar/range/span.js"() {
    "use strict";
    var Range = require_Range();
    var mathAliases = require_mathAliases();
    var rangeIsValid = require_rangeIsValid();
    var defineOnPrototype = require_defineOnPrototype();
    var getRangeMemberNumericValue = require_getRangeMemberNumericValue();
    var abs = mathAliases.abs;
    defineOnPrototype(Range, {
      "span": function() {
        var n = getRangeMemberNumericValue(this.end) - getRangeMemberNumericValue(this.start);
        return rangeIsValid(this) ? abs(n) + 1 : NaN;
      }
    });
  }
});

// node_modules/sugar/range/toArray.js
var require_toArray = __commonJS({
  "node_modules/sugar/range/toArray.js"() {
    "use strict";
    var Range = require_Range();
    var rangeEvery = require_rangeEvery();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "toArray": function() {
        return rangeEvery(this);
      }
    });
  }
});

// node_modules/sugar/range/toString.js
var require_toString = __commonJS({
  "node_modules/sugar/range/toString.js"() {
    "use strict";
    var Range = require_Range();
    var rangeIsValid = require_rangeIsValid();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "toString": function() {
        return rangeIsValid(this) ? this.start + ".." + this.end : "Invalid Range";
      }
    });
  }
});

// node_modules/sugar/range/union.js
var require_union2 = __commonJS({
  "node_modules/sugar/range/union.js"() {
    "use strict";
    var Range = require_Range();
    var defineOnPrototype = require_defineOnPrototype();
    defineOnPrototype(Range, {
      "union": function(range) {
        return new Range(
          this.start < range.start ? this.start : range.start,
          this.end > range.end ? this.end : range.end
        );
      }
    });
  }
});

// node_modules/sugar/range/weeks.js
var require_weeks2 = __commonJS({
  "node_modules/sugar/range/weeks.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/range/years.js
var require_years2 = __commonJS({
  "node_modules/sugar/range/years.js"() {
    "use strict";
    require_buildDateRangeUnitsCall();
  }
});

// node_modules/sugar/number/downto.js
var require_downto = __commonJS({
  "node_modules/sugar/number/downto.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var upto = require_upto();
    Sugar.Number.alias("downto", "upto");
    module.exports = Sugar.Number.downto;
  }
});

// node_modules/sugar/range/index.js
var require_range4 = __commonJS({
  "node_modules/sugar/range/index.js"(exports, module) {
    "use strict";
    require_range();
    require_range2();
    require_range3();
    require_cap();
    require_clamp();
    require_upto();
    require_clamp2();
    require_clone5();
    require_contains();
    require_days2();
    require_every3();
    require_hours2();
    require_intersect3();
    require_isValid2();
    require_milliseconds2();
    require_minutes2();
    require_months2();
    require_seconds2();
    require_span();
    require_toArray();
    require_toString();
    require_union2();
    require_weeks2();
    require_years2();
    require_downto();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/function/after.js
var require_after = __commonJS({
  "node_modules/sugar/function/after.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var coercePositiveInteger = require_coercePositiveInteger();
    Sugar.Function.defineInstance({
      "after": function(fn, num) {
        var count = 0, collectedArgs = [];
        num = coercePositiveInteger(num);
        return function() {
          var args = [];
          for (var $i = 0, $len = arguments.length; $i < $len; $i++)
            args.push(arguments[$i]);
          collectedArgs.push(args);
          count++;
          if (count >= num) {
            return fn.call(this, collectedArgs);
          }
        };
      }
    });
    module.exports = Sugar.Function.after;
  }
});

// node_modules/sugar/function/var/_timers.js
var require_timers = __commonJS({
  "node_modules/sugar/function/var/_timers.js"(exports, module) {
    "use strict";
    var privatePropertyAccessor = require_privatePropertyAccessor();
    module.exports = privatePropertyAccessor("timers");
  }
});

// node_modules/sugar/function/var/_canceled.js
var require_canceled = __commonJS({
  "node_modules/sugar/function/var/_canceled.js"(exports, module) {
    "use strict";
    var privatePropertyAccessor = require_privatePropertyAccessor();
    module.exports = privatePropertyAccessor("canceled");
  }
});

// node_modules/sugar/function/internal/cancelFunction.js
var require_cancelFunction = __commonJS({
  "node_modules/sugar/function/internal/cancelFunction.js"(exports, module) {
    "use strict";
    var _timers = require_timers();
    var _canceled = require_canceled();
    var classChecks = require_classChecks();
    var isArray = classChecks.isArray;
    function cancelFunction(fn) {
      var timers = _timers(fn), timer;
      if (isArray(timers)) {
        while (timer = timers.shift()) {
          clearTimeout(timer);
        }
      }
      _canceled(fn, true);
      return fn;
    }
    module.exports = cancelFunction;
  }
});

// node_modules/sugar/function/cancel.js
var require_cancel = __commonJS({
  "node_modules/sugar/function/cancel.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var cancelFunction = require_cancelFunction();
    Sugar.Function.defineInstance({
      "cancel": function(fn) {
        return cancelFunction(fn);
      }
    });
    module.exports = Sugar.Function.cancel;
  }
});

// node_modules/sugar/function/internal/setDelay.js
var require_setDelay = __commonJS({
  "node_modules/sugar/function/internal/setDelay.js"(exports, module) {
    "use strict";
    var _timers = require_timers();
    var _canceled = require_canceled();
    var coercePositiveInteger = require_coercePositiveInteger();
    function setDelay(fn, ms, after, scope, args) {
      ms = coercePositiveInteger(ms || 0);
      if (!_timers(fn)) {
        _timers(fn, []);
      }
      _canceled(fn, false);
      _timers(fn).push(setTimeout(function() {
        if (!_canceled(fn)) {
          after.apply(scope, args || []);
        }
      }, ms));
    }
    module.exports = setDelay;
  }
});

// node_modules/sugar/function/debounce.js
var require_debounce = __commonJS({
  "node_modules/sugar/function/debounce.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var setDelay = require_setDelay();
    var cancelFunction = require_cancelFunction();
    Sugar.Function.defineInstance({
      "debounce": function(fn, ms) {
        function debounced() {
          var args = [];
          for (var $i = 0, $len = arguments.length; $i < $len; $i++)
            args.push(arguments[$i]);
          cancelFunction(debounced);
          setDelay(debounced, ms, fn, this, args);
        }
        return debounced;
      }
    });
    module.exports = Sugar.Function.debounce;
  }
});

// node_modules/sugar/function/delay.js
var require_delay = __commonJS({
  "node_modules/sugar/function/delay.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var setDelay = require_setDelay();
    Sugar.Function.defineInstanceWithArguments({
      "delay": function(fn, ms, args) {
        setDelay(fn, ms, fn, fn, args);
        return fn;
      }
    });
    module.exports = Sugar.Function.delay;
  }
});

// node_modules/sugar/function/every.js
var require_every4 = __commonJS({
  "node_modules/sugar/function/every.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var setDelay = require_setDelay();
    Sugar.Function.defineInstanceWithArguments({
      "every": function(fn, ms, args) {
        function execute() {
          setDelay(fn, ms, execute);
          fn.apply(fn, args);
        }
        setDelay(fn, ms, execute);
        return fn;
      }
    });
    module.exports = Sugar.Function.every;
  }
});

// node_modules/sugar/function/internal/createLazyFunction.js
var require_createLazyFunction = __commonJS({
  "node_modules/sugar/function/internal/createLazyFunction.js"(exports, module) {
    "use strict";
    var setDelay = require_setDelay();
    var mathAliases = require_mathAliases();
    var max = mathAliases.max;
    var ceil = mathAliases.ceil;
    var round = mathAliases.round;
    function createLazyFunction(fn, ms, immediate, limit) {
      var queue = [], locked = false, execute, rounded, perExecution, result;
      ms = ms || 1;
      limit = limit || Infinity;
      rounded = ceil(ms);
      perExecution = round(rounded / ms) || 1;
      execute = function() {
        var queueLength = queue.length, maxPerRound;
        if (queueLength == 0)
          return;
        maxPerRound = max(queueLength - perExecution, 0);
        while (queueLength > maxPerRound) {
          result = Function.prototype.apply.apply(fn, queue.shift());
          queueLength--;
        }
        setDelay(lazy, rounded, function() {
          locked = false;
          execute();
        });
      };
      function lazy() {
        if (queue.length < limit - (locked && immediate ? 1 : 0)) {
          var args = [];
          for (var $i = 0, $len = arguments.length; $i < $len; $i++)
            args.push(arguments[$i]);
          queue.push([this, args]);
        }
        if (!locked) {
          locked = true;
          if (immediate) {
            execute();
          } else {
            setDelay(lazy, rounded, execute);
          }
        }
        return result;
      }
      return lazy;
    }
    module.exports = createLazyFunction;
  }
});

// node_modules/sugar/function/lazy.js
var require_lazy = __commonJS({
  "node_modules/sugar/function/lazy.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createLazyFunction = require_createLazyFunction();
    Sugar.Function.defineInstance({
      "lazy": function(fn, ms, immediate, limit) {
        return createLazyFunction(fn, ms, immediate, limit);
      }
    });
    module.exports = Sugar.Function.lazy;
  }
});

// node_modules/sugar/function/var/_lock.js
var require_lock = __commonJS({
  "node_modules/sugar/function/var/_lock.js"(exports, module) {
    "use strict";
    var privatePropertyAccessor = require_privatePropertyAccessor();
    module.exports = privatePropertyAccessor("lock");
  }
});

// node_modules/sugar/function/var/_partial.js
var require_partial = __commonJS({
  "node_modules/sugar/function/var/_partial.js"(exports, module) {
    "use strict";
    var privatePropertyAccessor = require_privatePropertyAccessor();
    module.exports = privatePropertyAccessor("partial");
  }
});

// node_modules/sugar/function/lock.js
var require_lock2 = __commonJS({
  "node_modules/sugar/function/lock.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var _lock = require_lock();
    var _partial = require_partial();
    var classChecks = require_classChecks();
    var mathAliases = require_mathAliases();
    var isNumber = classChecks.isNumber;
    var min = mathAliases.min;
    Sugar.Function.defineInstance({
      "lock": function(fn, n) {
        var lockedFn;
        if (_partial(fn)) {
          _lock(fn, isNumber(n) ? n : null);
          return fn;
        }
        lockedFn = function() {
          arguments.length = min(_lock(lockedFn), arguments.length);
          return fn.apply(this, arguments);
        };
        _lock(lockedFn, isNumber(n) ? n : fn.length);
        return lockedFn;
      }
    });
    module.exports = Sugar.Function.lock;
  }
});

// node_modules/sugar/function/internal/collectArguments.js
var require_collectArguments = __commonJS({
  "node_modules/sugar/function/internal/collectArguments.js"(exports, module) {
    "use strict";
    function collectArguments() {
      var args = arguments, i = args.length, arr = new Array(i);
      while (i--) {
        arr[i] = args[i];
      }
      return arr;
    }
    module.exports = collectArguments;
  }
});

// node_modules/sugar/function/internal/createHashedMemoizeFunction.js
var require_createHashedMemoizeFunction = __commonJS({
  "node_modules/sugar/function/internal/createHashedMemoizeFunction.js"(exports, module) {
    "use strict";
    var serializeInternal = require_serializeInternal();
    var coreUtilityAliases = require_coreUtilityAliases();
    var hasOwn = coreUtilityAliases.hasOwn;
    var getOwn = coreUtilityAliases.getOwn;
    function createHashedMemoizeFunction(fn, hashFn, limit) {
      var map = {}, refs = [], counter = 0;
      return function() {
        var hashObj = hashFn.apply(this, arguments);
        var key = serializeInternal(hashObj, refs);
        if (hasOwn(map, key)) {
          return getOwn(map, key);
        }
        if (counter === limit) {
          map = {};
          refs = [];
          counter = 0;
        }
        counter++;
        return map[key] = fn.apply(this, arguments);
      };
    }
    module.exports = createHashedMemoizeFunction;
  }
});

// node_modules/sugar/function/memoize.js
var require_memoize = __commonJS({
  "node_modules/sugar/function/memoize.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var classChecks = require_classChecks();
    var deepGetProperty = require_deepGetProperty();
    var collectArguments = require_collectArguments();
    var createHashedMemoizeFunction = require_createHashedMemoizeFunction();
    var isNumber = classChecks.isNumber;
    var isString = classChecks.isString;
    Sugar.Function.defineInstance({
      "memoize": function(fn, arg1, arg2) {
        var hashFn, limit, prop;
        if (isNumber(arg1)) {
          limit = arg1;
        } else {
          hashFn = arg1;
          limit = arg2;
        }
        if (isString(hashFn)) {
          prop = hashFn;
          hashFn = function(obj) {
            return deepGetProperty(obj, prop);
          };
        } else if (!hashFn) {
          hashFn = collectArguments;
        }
        return createHashedMemoizeFunction(fn, hashFn, limit);
      }
    });
    module.exports = Sugar.Function.memoize;
  }
});

// node_modules/sugar/function/once.js
var require_once = __commonJS({
  "node_modules/sugar/function/once.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.Function.defineInstance({
      "once": function(fn) {
        var called = false, val;
        return function() {
          if (called) {
            return val;
          }
          called = true;
          return val = fn.apply(this, arguments);
        };
      }
    });
    module.exports = Sugar.Function.once;
  }
});

// node_modules/sugar/function/var/createInstanceFromPrototype.js
var require_createInstanceFromPrototype = __commonJS({
  "node_modules/sugar/function/var/createInstanceFromPrototype.js"(exports, module) {
    "use strict";
    var createInstanceFromPrototype = Object.create || function(prototype) {
      var ctor = function() {
      };
      ctor.prototype = prototype;
      return new ctor();
    };
    module.exports = createInstanceFromPrototype;
  }
});

// node_modules/sugar/function/partial.js
var require_partial2 = __commonJS({
  "node_modules/sugar/function/partial.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var _lock = require_lock();
    var _partial = require_partial();
    var isDefined = require_isDefined();
    var classChecks = require_classChecks();
    var mathAliases = require_mathAliases();
    var isObjectType = require_isObjectType();
    var createInstanceFromPrototype = require_createInstanceFromPrototype();
    var isNumber = classChecks.isNumber;
    var min = mathAliases.min;
    Sugar.Function.defineInstanceWithArguments({
      "partial": function(fn, curriedArgs) {
        var curriedLen = curriedArgs.length;
        var partialFn = function() {
          var argIndex = 0, applyArgs = [], self = this, lock = _lock(partialFn), result, i;
          for (i = 0; i < curriedLen; i++) {
            var arg = curriedArgs[i];
            if (isDefined(arg)) {
              applyArgs[i] = arg;
            } else {
              applyArgs[i] = arguments[argIndex++];
            }
          }
          for (i = argIndex; i < arguments.length; i++) {
            applyArgs.push(arguments[i]);
          }
          if (lock === null) {
            lock = curriedLen;
          }
          if (isNumber(lock)) {
            applyArgs.length = min(applyArgs.length, lock);
          }
          if (self instanceof partialFn) {
            self = createInstanceFromPrototype(fn.prototype);
            result = fn.apply(self, applyArgs);
            return isObjectType(result) ? result : self;
          }
          return fn.apply(self, applyArgs);
        };
        _partial(partialFn, true);
        return partialFn;
      }
    });
    module.exports = Sugar.Function.partial;
  }
});

// node_modules/sugar/function/throttle.js
var require_throttle = __commonJS({
  "node_modules/sugar/function/throttle.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var createLazyFunction = require_createLazyFunction();
    Sugar.Function.defineInstance({
      "throttle": function(fn, ms) {
        return createLazyFunction(fn, ms, true, 1);
      }
    });
    module.exports = Sugar.Function.throttle;
  }
});

// node_modules/sugar/function/index.js
var require_function = __commonJS({
  "node_modules/sugar/function/index.js"(exports, module) {
    "use strict";
    require_after();
    require_cancel();
    require_debounce();
    require_delay();
    require_every4();
    require_lazy();
    require_lock2();
    require_memoize();
    require_once();
    require_partial2();
    require_throttle();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/regexp/escape.js
var require_escape = __commonJS({
  "node_modules/sugar/regexp/escape.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var escapeRegExp = require_escapeRegExp();
    Sugar.RegExp.defineStatic({
      "escape": function(str) {
        return escapeRegExp(str);
      }
    });
    module.exports = Sugar.RegExp.escape;
  }
});

// node_modules/sugar/regexp/addFlags.js
var require_addFlags = __commonJS({
  "node_modules/sugar/regexp/addFlags.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getRegExpFlags = require_getRegExpFlags();
    Sugar.RegExp.defineInstance({
      "addFlags": function(r, flags) {
        return RegExp(r.source, getRegExpFlags(r, flags));
      }
    });
    module.exports = Sugar.RegExp.addFlags;
  }
});

// node_modules/sugar/regexp/getFlags.js
var require_getFlags = __commonJS({
  "node_modules/sugar/regexp/getFlags.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var getRegExpFlags = require_getRegExpFlags();
    Sugar.RegExp.defineInstance({
      "getFlags": function(r) {
        return getRegExpFlags(r);
      }
    });
    module.exports = Sugar.RegExp.getFlags;
  }
});

// node_modules/sugar/regexp/removeFlags.js
var require_removeFlags = __commonJS({
  "node_modules/sugar/regexp/removeFlags.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    var allCharsReg = require_allCharsReg();
    var getRegExpFlags = require_getRegExpFlags();
    Sugar.RegExp.defineInstance({
      "removeFlags": function(r, flags) {
        var reg = allCharsReg(flags);
        return RegExp(r.source, getRegExpFlags(r).replace(reg, ""));
      }
    });
    module.exports = Sugar.RegExp.removeFlags;
  }
});

// node_modules/sugar/regexp/setFlags.js
var require_setFlags = __commonJS({
  "node_modules/sugar/regexp/setFlags.js"(exports, module) {
    "use strict";
    var Sugar = require_sugar_core();
    Sugar.RegExp.defineInstance({
      "setFlags": function(r, flags) {
        return RegExp(r.source, flags);
      }
    });
    module.exports = Sugar.RegExp.setFlags;
  }
});

// node_modules/sugar/regexp/index.js
var require_regexp = __commonJS({
  "node_modules/sugar/regexp/index.js"(exports, module) {
    "use strict";
    require_escape();
    require_addFlags();
    require_getFlags();
    require_removeFlags();
    require_setFlags();
    module.exports = require_sugar_core();
  }
});

// node_modules/sugar/index.js
var require_sugar = __commonJS({
  "node_modules/sugar/index.js"(exports, module) {
    require_string();
    require_number();
    require_array();
    require_enumerable();
    require_object();
    require_date();
    require_range4();
    require_function();
    require_regexp();
    module.exports = require_sugar_core();
  }
});
export default require_sugar();
//# sourceMappingURL=sugar.js.map
