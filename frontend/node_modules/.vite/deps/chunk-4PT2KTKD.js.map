{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useEventCallback.js", "../../@restart/hooks/esm/useCommittedRef.js", "../../@restart/ui/esm/DataKey.js"],
  "sourcesContent": ["import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  var ref = useCommittedRef(fn);\n  return useCallback(function () {\n    return ref.current && ref.current.apply(ref, arguments);\n  }, [ref]);\n}", "import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;", "export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexport const PROPERTY_PREFIX = `rrUi`;\nexport function dataAttr(property) {\n  return `${ATTRIBUTE_PREFIX}${property}`;\n}\nexport function dataProp(property) {\n  return `${PROPERTY_PREFIX}${property}`;\n}"],
  "mappings": ";;;;;;;;AAAA,IAAAA,gBAA4B;;;ACA5B,mBAAkC;AAWlC,SAAS,gBAAgB,OAAO;AAC9B,MAAI,UAAM,qBAAO,KAAK;AACtB,8BAAU,WAAY;AACpB,QAAI,UAAU;AAAA,EAChB,GAAG,CAAC,KAAK,CAAC;AACV,SAAO;AACT;AAEA,IAAO,0BAAQ;;;ADjBA,SAAR,iBAAkC,IAAI;AAC3C,MAAI,MAAM,wBAAgB,EAAE;AAC5B,aAAO,2BAAY,WAAY;AAC7B,WAAO,IAAI,WAAW,IAAI,QAAQ,MAAM,KAAK,SAAS;AAAA,EACxD,GAAG,CAAC,GAAG,CAAC;AACV;;;AEPO,IAAM,mBAAmB;AACzB,IAAM,kBAAkB;AACxB,SAAS,SAAS,UAAU;AACjC,SAAO,GAAG,gBAAgB,GAAG,QAAQ;AACvC;AACO,SAAS,SAAS,UAAU;AACjC,SAAO,GAAG,eAAe,GAAG,QAAQ;AACtC;",
  "names": ["import_react"]
}
